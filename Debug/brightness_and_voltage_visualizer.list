
brightness_and_voltage_visualizer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000923c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c64  08009350  08009350  00019350  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fb4  08009fb4  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  08009fb4  08009fb4  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009fb4  08009fb4  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fb4  08009fb4  00019fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009fb8  08009fb8  00019fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08009fbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000510  200001ec  0800a1a8  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006fc  0800a1a8  000206fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae95  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000224f  00000000  00000000  0002b0aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  0002d300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00018b4e  00000000  00000000  0002de10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000d9ad  00000000  00000000  0004695e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008974f  00000000  00000000  0005430b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000dda5a  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000a08  00000000  00000000  000ddab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004128  00000000  00000000  000de4b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	08009334 	.word	0x08009334

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	08009334 	.word	0x08009334

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <drawProgressBarDemo>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void drawProgressBarDemo(uint16_t photoresistorProgress, uint16_t potentiometerProgress)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b0a6      	sub	sp, #152	; 0x98
 8000bdc:	af02      	add	r7, sp, #8
 8000bde:	4603      	mov	r3, r0
 8000be0:	460a      	mov	r2, r1
 8000be2:	80fb      	strh	r3, [r7, #6]
 8000be4:	4613      	mov	r3, r2
 8000be6:	80bb      	strh	r3, [r7, #4]
  char str[128];

  uint8_t potPercent = (potentiometerProgress * 100) / 4095;
 8000be8:	88bb      	ldrh	r3, [r7, #4]
 8000bea:	2264      	movs	r2, #100	; 0x64
 8000bec:	fb02 f303 	mul.w	r3, r2, r3
 8000bf0:	4a29      	ldr	r2, [pc, #164]	; (8000c98 <drawProgressBarDemo+0xc0>)
 8000bf2:	fb82 1203 	smull	r1, r2, r2, r3
 8000bf6:	441a      	add	r2, r3
 8000bf8:	12d2      	asrs	r2, r2, #11
 8000bfa:	17db      	asrs	r3, r3, #31
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  uint8_t photoPercent = (photoresistorProgress * 100) / 4095;
 8000c02:	88fb      	ldrh	r3, [r7, #6]
 8000c04:	2264      	movs	r2, #100	; 0x64
 8000c06:	fb02 f303 	mul.w	r3, r2, r3
 8000c0a:	4a23      	ldr	r2, [pc, #140]	; (8000c98 <drawProgressBarDemo+0xc0>)
 8000c0c:	fb82 1203 	smull	r1, r2, r2, r3
 8000c10:	441a      	add	r2, r3
 8000c12:	12d2      	asrs	r2, r2, #11
 8000c14:	17db      	asrs	r3, r3, #31
 8000c16:	1ad3      	subs	r3, r2, r3
 8000c18:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e

  ssd1306_DrawProgressBar(4, 15, 120, 10, potPercent);
 8000c1c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000c20:	9300      	str	r3, [sp, #0]
 8000c22:	230a      	movs	r3, #10
 8000c24:	2278      	movs	r2, #120	; 0x78
 8000c26:	210f      	movs	r1, #15
 8000c28:	2004      	movs	r0, #4
 8000c2a:	f000 fee9 	bl	8001a00 <ssd1306_DrawProgressBar>
  ssd1306_DrawProgressBar(4, 40, 120, 10, photoPercent);
 8000c2e:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8000c32:	9300      	str	r3, [sp, #0]
 8000c34:	230a      	movs	r3, #10
 8000c36:	2278      	movs	r2, #120	; 0x78
 8000c38:	2128      	movs	r1, #40	; 0x28
 8000c3a:	2004      	movs	r0, #4
 8000c3c:	f000 fee0 	bl	8001a00 <ssd1306_DrawProgressBar>

  ssd1306_SetCursor(0, 5);
 8000c40:	2105      	movs	r1, #5
 8000c42:	2000      	movs	r0, #0
 8000c44:	f001 f828 	bl	8001c98 <ssd1306_SetCursor>
  sprintf(str, "potentiometer %i%%", potPercent);
 8000c48:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8000c4c:	f107 030c 	add.w	r3, r7, #12
 8000c50:	4912      	ldr	r1, [pc, #72]	; (8000c9c <drawProgressBarDemo+0xc4>)
 8000c52:	4618      	mov	r0, r3
 8000c54:	f004 fdb0 	bl	80057b8 <siprintf>
  ssd1306_WriteString(str, Font_7x10);
 8000c58:	4a11      	ldr	r2, [pc, #68]	; (8000ca0 <drawProgressBarDemo+0xc8>)
 8000c5a:	f107 030c 	add.w	r3, r7, #12
 8000c5e:	ca06      	ldmia	r2, {r1, r2}
 8000c60:	4618      	mov	r0, r3
 8000c62:	f000 fff3 	bl	8001c4c <ssd1306_WriteString>

  ssd1306_SetCursor(0, 30);
 8000c66:	211e      	movs	r1, #30
 8000c68:	2000      	movs	r0, #0
 8000c6a:	f001 f815 	bl	8001c98 <ssd1306_SetCursor>
  sprintf(str, "photoresistor %i%%", photoPercent);
 8000c6e:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 8000c72:	f107 030c 	add.w	r3, r7, #12
 8000c76:	490b      	ldr	r1, [pc, #44]	; (8000ca4 <drawProgressBarDemo+0xcc>)
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f004 fd9d 	bl	80057b8 <siprintf>
  ssd1306_WriteString(str, Font_7x10);
 8000c7e:	4a08      	ldr	r2, [pc, #32]	; (8000ca0 <drawProgressBarDemo+0xc8>)
 8000c80:	f107 030c 	add.w	r3, r7, #12
 8000c84:	ca06      	ldmia	r2, {r1, r2}
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 ffe0 	bl	8001c4c <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8000c8c:	f000 fa58 	bl	8001140 <ssd1306_UpdateScreen>
}
 8000c90:	bf00      	nop
 8000c92:	3790      	adds	r7, #144	; 0x90
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	80080081 	.word	0x80080081
 8000c9c:	08009350 	.word	0x08009350
 8000ca0:	20000000 	.word	0x20000000
 8000ca4:	08009364 	.word	0x08009364

08000ca8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cac:	f001 fa9a 	bl	80021e4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb0:	f000 f82a 	bl	8000d08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb4:	f000 f91e 	bl	8000ef4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cb8:	f000 f8fe 	bl	8000eb8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000cbc:	f000 f880 	bl	8000dc0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000cc0:	f000 f8cc 	bl	8000e5c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000cc4:	f000 f9a2 	bl	800100c <ssd1306_Init>
  ssd1306_FlipScreenVertically();
 8000cc8:	f001 f80c 	bl	8001ce4 <ssd1306_FlipScreenVertically>
  ssd1306_Clear();
 8000ccc:	f001 f814 	bl	8001cf8 <ssd1306_Clear>
  ssd1306_SetColor(White);
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	f000 f98b 	bl	8000fec <ssd1306_SetColor>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)sensor_values, 2);
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	4909      	ldr	r1, [pc, #36]	; (8000d00 <main+0x58>)
 8000cda:	480a      	ldr	r0, [pc, #40]	; (8000d04 <main+0x5c>)
 8000cdc:	f001 fbe0 	bl	80024a0 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(500);
 8000ce0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ce4:	f001 fae0 	bl	80022a8 <HAL_Delay>

	  ssd1306_Clear();
 8000ce8:	f001 f806 	bl	8001cf8 <ssd1306_Clear>
	  drawProgressBarDemo(sensor_values[0], sensor_values[1]);
 8000cec:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <main+0x58>)
 8000cee:	881b      	ldrh	r3, [r3, #0]
 8000cf0:	4a03      	ldr	r2, [pc, #12]	; (8000d00 <main+0x58>)
 8000cf2:	8852      	ldrh	r2, [r2, #2]
 8000cf4:	4611      	mov	r1, r2
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff ff6e 	bl	8000bd8 <drawProgressBarDemo>
	  HAL_Delay(500);
 8000cfc:	e7f0      	b.n	8000ce0 <main+0x38>
 8000cfe:	bf00      	nop
 8000d00:	200002d0 	.word	0x200002d0
 8000d04:	20000208 	.word	0x20000208

08000d08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b094      	sub	sp, #80	; 0x50
 8000d0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d12:	2228      	movs	r2, #40	; 0x28
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f003 fed4 	bl	8004ac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d2c:	1d3b      	adds	r3, r7, #4
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d42:	2300      	movs	r3, #0
 8000d44:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d46:	2301      	movs	r3, #1
 8000d48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d54:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d58:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f003 f9d4 	bl	800410c <HAL_RCC_OscConfig>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d6a:	f000 f91d 	bl	8000fa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d6e:	230f      	movs	r3, #15
 8000d70:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d72:	2302      	movs	r3, #2
 8000d74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d7e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d80:	2300      	movs	r3, #0
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	2102      	movs	r1, #2
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f003 fc40 	bl	8004610 <HAL_RCC_ClockConfig>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000d96:	f000 f907 	bl	8000fa8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000da2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	4618      	mov	r0, r3
 8000da8:	f003 fdac 	bl	8004904 <HAL_RCCEx_PeriphCLKConfig>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000db2:	f000 f8f9 	bl	8000fa8 <Error_Handler>
  }
}
 8000db6:	bf00      	nop
 8000db8:	3750      	adds	r7, #80	; 0x50
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000dd0:	4b20      	ldr	r3, [pc, #128]	; (8000e54 <MX_ADC1_Init+0x94>)
 8000dd2:	4a21      	ldr	r2, [pc, #132]	; (8000e58 <MX_ADC1_Init+0x98>)
 8000dd4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000dd6:	4b1f      	ldr	r3, [pc, #124]	; (8000e54 <MX_ADC1_Init+0x94>)
 8000dd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ddc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000dde:	4b1d      	ldr	r3, [pc, #116]	; (8000e54 <MX_ADC1_Init+0x94>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000de4:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <MX_ADC1_Init+0x94>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dea:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <MX_ADC1_Init+0x94>)
 8000dec:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000df0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000df2:	4b18      	ldr	r3, [pc, #96]	; (8000e54 <MX_ADC1_Init+0x94>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000df8:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <MX_ADC1_Init+0x94>)
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dfe:	4815      	ldr	r0, [pc, #84]	; (8000e54 <MX_ADC1_Init+0x94>)
 8000e00:	f001 fa76 	bl	80022f0 <HAL_ADC_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000e0a:	f000 f8cd 	bl	8000fa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e12:	2301      	movs	r3, #1
 8000e14:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000e16:	2307      	movs	r3, #7
 8000e18:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	480d      	ldr	r0, [pc, #52]	; (8000e54 <MX_ADC1_Init+0x94>)
 8000e20:	f001 fd00 	bl	8002824 <HAL_ADC_ConfigChannel>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e2a:	f000 f8bd 	bl	8000fa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e32:	2302      	movs	r3, #2
 8000e34:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4806      	ldr	r0, [pc, #24]	; (8000e54 <MX_ADC1_Init+0x94>)
 8000e3c:	f001 fcf2 	bl	8002824 <HAL_ADC_ConfigChannel>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000e46:	f000 f8af 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e4a:	bf00      	nop
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000208 	.word	0x20000208
 8000e58:	40012400 	.word	0x40012400

08000e5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e62:	4a13      	ldr	r2, [pc, #76]	; (8000eb0 <MX_I2C1_Init+0x54>)
 8000e64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000e66:	4b11      	ldr	r3, [pc, #68]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e68:	4a12      	ldr	r2, [pc, #72]	; (8000eb4 <MX_I2C1_Init+0x58>)
 8000e6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e72:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e80:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e8c:	4b07      	ldr	r3, [pc, #28]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e98:	4804      	ldr	r0, [pc, #16]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e9a:	f002 fb5d 	bl	8003558 <HAL_I2C_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ea4:	f000 f880 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	2000027c 	.word	0x2000027c
 8000eb0:	40005400 	.word	0x40005400
 8000eb4:	00061a80 	.word	0x00061a80

08000eb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <MX_DMA_Init+0x38>)
 8000ec0:	695b      	ldr	r3, [r3, #20]
 8000ec2:	4a0b      	ldr	r2, [pc, #44]	; (8000ef0 <MX_DMA_Init+0x38>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6153      	str	r3, [r2, #20]
 8000eca:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <MX_DMA_Init+0x38>)
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2100      	movs	r1, #0
 8000eda:	200b      	movs	r0, #11
 8000edc:	f001 ff7b 	bl	8002dd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ee0:	200b      	movs	r0, #11
 8000ee2:	f001 ff94 	bl	8002e0e <HAL_NVIC_EnableIRQ>

}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b088      	sub	sp, #32
 8000ef8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efa:	f107 0310 	add.w	r3, r7, #16
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f08:	4b24      	ldr	r3, [pc, #144]	; (8000f9c <MX_GPIO_Init+0xa8>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	4a23      	ldr	r2, [pc, #140]	; (8000f9c <MX_GPIO_Init+0xa8>)
 8000f0e:	f043 0310 	orr.w	r3, r3, #16
 8000f12:	6193      	str	r3, [r2, #24]
 8000f14:	4b21      	ldr	r3, [pc, #132]	; (8000f9c <MX_GPIO_Init+0xa8>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	f003 0310 	and.w	r3, r3, #16
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f20:	4b1e      	ldr	r3, [pc, #120]	; (8000f9c <MX_GPIO_Init+0xa8>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	4a1d      	ldr	r2, [pc, #116]	; (8000f9c <MX_GPIO_Init+0xa8>)
 8000f26:	f043 0320 	orr.w	r3, r3, #32
 8000f2a:	6193      	str	r3, [r2, #24]
 8000f2c:	4b1b      	ldr	r3, [pc, #108]	; (8000f9c <MX_GPIO_Init+0xa8>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	f003 0320 	and.w	r3, r3, #32
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f38:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <MX_GPIO_Init+0xa8>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	4a17      	ldr	r2, [pc, #92]	; (8000f9c <MX_GPIO_Init+0xa8>)
 8000f3e:	f043 0304 	orr.w	r3, r3, #4
 8000f42:	6193      	str	r3, [r2, #24]
 8000f44:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <MX_GPIO_Init+0xa8>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	f003 0304 	and.w	r3, r3, #4
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <MX_GPIO_Init+0xa8>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	4a11      	ldr	r2, [pc, #68]	; (8000f9c <MX_GPIO_Init+0xa8>)
 8000f56:	f043 0308 	orr.w	r3, r3, #8
 8000f5a:	6193      	str	r3, [r2, #24]
 8000f5c:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <MX_GPIO_Init+0xa8>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	f003 0308 	and.w	r3, r3, #8
 8000f64:	603b      	str	r3, [r7, #0]
 8000f66:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : ON_OFF_Pin */
  GPIO_InitStruct.Pin = ON_OFF_Pin;
 8000f68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <MX_GPIO_Init+0xac>)
 8000f70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f72:	2301      	movs	r3, #1
 8000f74:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8000f76:	f107 0310 	add.w	r3, r7, #16
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4809      	ldr	r0, [pc, #36]	; (8000fa4 <MX_GPIO_Init+0xb0>)
 8000f7e:	f002 f94f 	bl	8003220 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2100      	movs	r1, #0
 8000f86:	2028      	movs	r0, #40	; 0x28
 8000f88:	f001 ff25 	bl	8002dd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f8c:	2028      	movs	r0, #40	; 0x28
 8000f8e:	f001 ff3e 	bl	8002e0e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f92:	bf00      	nop
 8000f94:	3720      	adds	r7, #32
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	10210000 	.word	0x10210000
 8000fa4:	40011000 	.word	0x40011000

08000fa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fac:	b672      	cpsid	i
}
 8000fae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <Error_Handler+0x8>

08000fb2 <width>:
static void ssd1306_WriteCommand(uint8_t command);
static void ssd1306_WriteData(uint8_t* data, uint16_t size);
//
//  Get a width and height screen size
//
static const uint16_t width(void)	{ return SSD1306_WIDTH; };
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	2380      	movs	r3, #128	; 0x80
 8000fb8:	4618      	mov	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr

08000fc0 <height>:
static const uint16_t height(void)  { return SSD1306_HEIGHT; };
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	2340      	movs	r3, #64	; 0x40
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr

08000fce <ssd1306_GetWidth>:
/* CODE END Private functions */


/* CODE BEGIN Public functions */
uint16_t ssd1306_GetWidth(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0
  return SSD1306_WIDTH;
 8000fd2:	2380      	movs	r3, #128	; 0x80
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr

08000fdc <ssd1306_GetHeight>:


uint16_t ssd1306_GetHeight(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return SSD1306_HEIGHT;
 8000fe0:	2340      	movs	r3, #64	; 0x40
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr
	...

08000fec <ssd1306_SetColor>:
	return SSD1306.Color;
}


void ssd1306_SetColor(SSD1306_COLOR color)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
	SSD1306.Color = color;
 8000ff6:	4a04      	ldr	r2, [pc, #16]	; (8001008 <ssd1306_SetColor+0x1c>)
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	7153      	strb	r3, [r2, #5]
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	200002d4 	.word	0x200002d4

0800100c <ssd1306_Init>:


//	Initialize the oled screen
uint8_t ssd1306_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 5, 1000) != HAL_OK)
 8001010:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001014:	2205      	movs	r2, #5
 8001016:	2178      	movs	r1, #120	; 0x78
 8001018:	4846      	ldr	r0, [pc, #280]	; (8001134 <ssd1306_Init+0x128>)
 800101a:	f002 fcdb 	bl	80039d4 <HAL_I2C_IsDeviceReady>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d004      	beq.n	800102e <ssd1306_Init+0x22>
	{
		SSD1306.Initialized = 0;
 8001024:	4b44      	ldr	r3, [pc, #272]	; (8001138 <ssd1306_Init+0x12c>)
 8001026:	2200      	movs	r2, #0
 8001028:	719a      	strb	r2, [r3, #6]
		/* Return false */
		return 0;
 800102a:	2300      	movs	r3, #0
 800102c:	e07f      	b.n	800112e <ssd1306_Init+0x122>
	}


	// Wait for the screen to boot
	HAL_Delay(100);
 800102e:	2064      	movs	r0, #100	; 0x64
 8001030:	f001 f93a 	bl	80022a8 <HAL_Delay>


	/* Init LCD */
	ssd1306_WriteCommand(DISPLAYOFF);
 8001034:	20ae      	movs	r0, #174	; 0xae
 8001036:	f000 fe6b 	bl	8001d10 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETDISPLAYCLOCKDIV);
 800103a:	20d5      	movs	r0, #213	; 0xd5
 800103c:	f000 fe68 	bl	8001d10 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); // Increase speed of the display max ~96Hz
 8001040:	20f0      	movs	r0, #240	; 0xf0
 8001042:	f000 fe65 	bl	8001d10 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETMULTIPLEX);
 8001046:	20a8      	movs	r0, #168	; 0xa8
 8001048:	f000 fe62 	bl	8001d10 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(height() - 1);
 800104c:	f7ff ffb8 	bl	8000fc0 <height>
 8001050:	4603      	mov	r3, r0
 8001052:	b2db      	uxtb	r3, r3
 8001054:	3b01      	subs	r3, #1
 8001056:	b2db      	uxtb	r3, r3
 8001058:	4618      	mov	r0, r3
 800105a:	f000 fe59 	bl	8001d10 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETDISPLAYOFFSET);
 800105e:	20d3      	movs	r0, #211	; 0xd3
 8001060:	f000 fe56 	bl	8001d10 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00);
 8001064:	2000      	movs	r0, #0
 8001066:	f000 fe53 	bl	8001d10 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETSTARTLINE);
 800106a:	2040      	movs	r0, #64	; 0x40
 800106c:	f000 fe50 	bl	8001d10 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(CHARGEPUMP);
 8001070:	208d      	movs	r0, #141	; 0x8d
 8001072:	f000 fe4d 	bl	8001d10 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14);
 8001076:	2014      	movs	r0, #20
 8001078:	f000 fe4a 	bl	8001d10 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(MEMORYMODE);
 800107c:	2020      	movs	r0, #32
 800107e:	f000 fe47 	bl	8001d10 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00);
 8001082:	2000      	movs	r0, #0
 8001084:	f000 fe44 	bl	8001d10 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SEGREMAP);
 8001088:	20a0      	movs	r0, #160	; 0xa0
 800108a:	f000 fe41 	bl	8001d10 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(COMSCANINC);
 800108e:	20c0      	movs	r0, #192	; 0xc0
 8001090:	f000 fe3e 	bl	8001d10 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETCOMPINS);
 8001094:	20da      	movs	r0, #218	; 0xda
 8001096:	f000 fe3b 	bl	8001d10 <ssd1306_WriteCommand>


	if (display_geometry == GEOMETRY_128_64)
 800109a:	4b28      	ldr	r3, [pc, #160]	; (800113c <ssd1306_Init+0x130>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d103      	bne.n	80010aa <ssd1306_Init+0x9e>
	{
	  ssd1306_WriteCommand(0x12);
 80010a2:	2012      	movs	r0, #18
 80010a4:	f000 fe34 	bl	8001d10 <ssd1306_WriteCommand>
 80010a8:	e006      	b.n	80010b8 <ssd1306_Init+0xac>
	}
	else if (display_geometry == GEOMETRY_128_32)
 80010aa:	4b24      	ldr	r3, [pc, #144]	; (800113c <ssd1306_Init+0x130>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d102      	bne.n	80010b8 <ssd1306_Init+0xac>
	{
	  ssd1306_WriteCommand(0x02);
 80010b2:	2002      	movs	r0, #2
 80010b4:	f000 fe2c 	bl	8001d10 <ssd1306_WriteCommand>
	}


	ssd1306_WriteCommand(SETCONTRAST);
 80010b8:	2081      	movs	r0, #129	; 0x81
 80010ba:	f000 fe29 	bl	8001d10 <ssd1306_WriteCommand>


	if (display_geometry == GEOMETRY_128_64)
 80010be:	4b1f      	ldr	r3, [pc, #124]	; (800113c <ssd1306_Init+0x130>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d103      	bne.n	80010ce <ssd1306_Init+0xc2>
	{
	  ssd1306_WriteCommand(0xCF);
 80010c6:	20cf      	movs	r0, #207	; 0xcf
 80010c8:	f000 fe22 	bl	8001d10 <ssd1306_WriteCommand>
 80010cc:	e006      	b.n	80010dc <ssd1306_Init+0xd0>
	}
	else if (display_geometry == GEOMETRY_128_32)
 80010ce:	4b1b      	ldr	r3, [pc, #108]	; (800113c <ssd1306_Init+0x130>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d102      	bne.n	80010dc <ssd1306_Init+0xd0>
	{
	  ssd1306_WriteCommand(0x8F);
 80010d6:	208f      	movs	r0, #143	; 0x8f
 80010d8:	f000 fe1a 	bl	8001d10 <ssd1306_WriteCommand>
	}


	ssd1306_WriteCommand(SETPRECHARGE);
 80010dc:	20d9      	movs	r0, #217	; 0xd9
 80010de:	f000 fe17 	bl	8001d10 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF1);
 80010e2:	20f1      	movs	r0, #241	; 0xf1
 80010e4:	f000 fe14 	bl	8001d10 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETVCOMDETECT); //0xDB, (additionally needed to lower the contrast)
 80010e8:	20db      	movs	r0, #219	; 0xdb
 80010ea:	f000 fe11 	bl	8001d10 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40);	        //0x40 default, to lower the contrast, put 0
 80010ee:	2040      	movs	r0, #64	; 0x40
 80010f0:	f000 fe0e 	bl	8001d10 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(DISPLAYALLON_RESUME);
 80010f4:	20a4      	movs	r0, #164	; 0xa4
 80010f6:	f000 fe0b 	bl	8001d10 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(NORMALDISPLAY);
 80010fa:	20a6      	movs	r0, #166	; 0xa6
 80010fc:	f000 fe08 	bl	8001d10 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x2e);            // stop scroll
 8001100:	202e      	movs	r0, #46	; 0x2e
 8001102:	f000 fe05 	bl	8001d10 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(DISPLAYON);
 8001106:	20af      	movs	r0, #175	; 0xaf
 8001108:	f000 fe02 	bl	8001d10 <ssd1306_WriteCommand>


	// Set default values for screen object
	SSD1306.CurrentX = 0;
 800110c:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <ssd1306_Init+0x12c>)
 800110e:	2200      	movs	r2, #0
 8001110:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001112:	4b09      	ldr	r3, [pc, #36]	; (8001138 <ssd1306_Init+0x12c>)
 8001114:	2200      	movs	r2, #0
 8001116:	805a      	strh	r2, [r3, #2]
	SSD1306.Color = Black;
 8001118:	4b07      	ldr	r3, [pc, #28]	; (8001138 <ssd1306_Init+0x12c>)
 800111a:	2200      	movs	r2, #0
 800111c:	715a      	strb	r2, [r3, #5]


	// Clear screen
	ssd1306_Clear();
 800111e:	f000 fdeb 	bl	8001cf8 <ssd1306_Clear>


	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8001122:	f000 f80d 	bl	8001140 <ssd1306_UpdateScreen>


	SSD1306.Initialized = 1;
 8001126:	4b04      	ldr	r3, [pc, #16]	; (8001138 <ssd1306_Init+0x12c>)
 8001128:	2201      	movs	r2, #1
 800112a:	719a      	strb	r2, [r3, #6]


	/* Return OK */
	return 1;
 800112c:	2301      	movs	r3, #1
}
 800112e:	4618      	mov	r0, r3
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	2000027c 	.word	0x2000027c
 8001138:	200002d4 	.word	0x200002d4
 800113c:	200006dc 	.word	0x200006dc

08001140 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 8001140:	b590      	push	{r4, r7, lr}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
	uint8_t i;


	for (i = 0; i < 8; i++)
 8001146:	2300      	movs	r3, #0
 8001148:	71fb      	strb	r3, [r7, #7]
 800114a:	e019      	b.n	8001180 <ssd1306_UpdateScreen+0x40>
	{
		ssd1306_WriteCommand(0xB0 + i);
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	3b50      	subs	r3, #80	; 0x50
 8001150:	b2db      	uxtb	r3, r3
 8001152:	4618      	mov	r0, r3
 8001154:	f000 fddc 	bl	8001d10 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(SETLOWCOLUMN);
 8001158:	2000      	movs	r0, #0
 800115a:	f000 fdd9 	bl	8001d10 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(SETHIGHCOLUMN);
 800115e:	2010      	movs	r0, #16
 8001160:	f000 fdd6 	bl	8001d10 <ssd1306_WriteCommand>
		ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], width());
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	01db      	lsls	r3, r3, #7
 8001168:	4a09      	ldr	r2, [pc, #36]	; (8001190 <ssd1306_UpdateScreen+0x50>)
 800116a:	189c      	adds	r4, r3, r2
 800116c:	f7ff ff21 	bl	8000fb2 <width>
 8001170:	4603      	mov	r3, r0
 8001172:	4619      	mov	r1, r3
 8001174:	4620      	mov	r0, r4
 8001176:	f000 fde3 	bl	8001d40 <ssd1306_WriteData>
	for (i = 0; i < 8; i++)
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	3301      	adds	r3, #1
 800117e:	71fb      	strb	r3, [r7, #7]
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	2b07      	cmp	r3, #7
 8001184:	d9e2      	bls.n	800114c <ssd1306_UpdateScreen+0xc>
	}
}
 8001186:	bf00      	nop
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	bd90      	pop	{r4, r7, pc}
 8001190:	200002dc 	.word	0x200002dc

08001194 <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y)
{
 8001194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	460a      	mov	r2, r1
 800119e:	71fb      	strb	r3, [r7, #7]
 80011a0:	4613      	mov	r3, r2
 80011a2:	71bb      	strb	r3, [r7, #6]
	SSD1306_COLOR color = SSD1306.Color;
 80011a4:	4b34      	ldr	r3, [pc, #208]	; (8001278 <ssd1306_DrawPixel+0xe4>)
 80011a6:	795b      	ldrb	r3, [r3, #5]
 80011a8:	73fb      	strb	r3, [r7, #15]


	if (x >= ssd1306_GetWidth() || y >= ssd1306_GetHeight())
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	b29c      	uxth	r4, r3
 80011ae:	f7ff ff0e 	bl	8000fce <ssd1306_GetWidth>
 80011b2:	4603      	mov	r3, r0
 80011b4:	429c      	cmp	r4, r3
 80011b6:	d25a      	bcs.n	800126e <ssd1306_DrawPixel+0xda>
 80011b8:	79bb      	ldrb	r3, [r7, #6]
 80011ba:	b29c      	uxth	r4, r3
 80011bc:	f7ff ff0e 	bl	8000fdc <ssd1306_GetHeight>
 80011c0:	4603      	mov	r3, r0
 80011c2:	429c      	cmp	r4, r3
 80011c4:	d253      	bcs.n	800126e <ssd1306_DrawPixel+0xda>
		return;
	}


	// Check if pixel should be inverted
	if (SSD1306.Inverted)
 80011c6:	4b2c      	ldr	r3, [pc, #176]	; (8001278 <ssd1306_DrawPixel+0xe4>)
 80011c8:	791b      	ldrb	r3, [r3, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d006      	beq.n	80011dc <ssd1306_DrawPixel+0x48>
	{
		color = (SSD1306_COLOR) !color;
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	bf0c      	ite	eq
 80011d4:	2301      	moveq	r3, #1
 80011d6:	2300      	movne	r3, #0
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	73fb      	strb	r3, [r7, #15]
	}


	// Draw in the right color
	if (color == White)
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d121      	bne.n	8001226 <ssd1306_DrawPixel+0x92>
	{
		SSD1306_Buffer[x + (y / 8) * width()] |= 1 << (y % 8);
 80011e2:	79fc      	ldrb	r4, [r7, #7]
 80011e4:	79bb      	ldrb	r3, [r7, #6]
 80011e6:	08db      	lsrs	r3, r3, #3
 80011e8:	b2dd      	uxtb	r5, r3
 80011ea:	462e      	mov	r6, r5
 80011ec:	f7ff fee1 	bl	8000fb2 <width>
 80011f0:	4603      	mov	r3, r0
 80011f2:	4618      	mov	r0, r3
 80011f4:	4603      	mov	r3, r0
 80011f6:	fb06 f303 	mul.w	r3, r6, r3
 80011fa:	4423      	add	r3, r4
 80011fc:	4a1f      	ldr	r2, [pc, #124]	; (800127c <ssd1306_DrawPixel+0xe8>)
 80011fe:	5cd3      	ldrb	r3, [r2, r3]
 8001200:	b25a      	sxtb	r2, r3
 8001202:	79bb      	ldrb	r3, [r7, #6]
 8001204:	f003 0307 	and.w	r3, r3, #7
 8001208:	2101      	movs	r1, #1
 800120a:	fa01 f303 	lsl.w	r3, r1, r3
 800120e:	b25b      	sxtb	r3, r3
 8001210:	4313      	orrs	r3, r2
 8001212:	b259      	sxtb	r1, r3
 8001214:	79fa      	ldrb	r2, [r7, #7]
 8001216:	462b      	mov	r3, r5
 8001218:	fb00 f303 	mul.w	r3, r0, r3
 800121c:	4413      	add	r3, r2
 800121e:	b2c9      	uxtb	r1, r1
 8001220:	4a16      	ldr	r2, [pc, #88]	; (800127c <ssd1306_DrawPixel+0xe8>)
 8001222:	54d1      	strb	r1, [r2, r3]
 8001224:	e024      	b.n	8001270 <ssd1306_DrawPixel+0xdc>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * width()] &= ~(1 << (y % 8));
 8001226:	79fc      	ldrb	r4, [r7, #7]
 8001228:	79bb      	ldrb	r3, [r7, #6]
 800122a:	08db      	lsrs	r3, r3, #3
 800122c:	b2dd      	uxtb	r5, r3
 800122e:	462e      	mov	r6, r5
 8001230:	f7ff febf 	bl	8000fb2 <width>
 8001234:	4603      	mov	r3, r0
 8001236:	4618      	mov	r0, r3
 8001238:	4603      	mov	r3, r0
 800123a:	fb06 f303 	mul.w	r3, r6, r3
 800123e:	4423      	add	r3, r4
 8001240:	4a0e      	ldr	r2, [pc, #56]	; (800127c <ssd1306_DrawPixel+0xe8>)
 8001242:	5cd3      	ldrb	r3, [r2, r3]
 8001244:	b25a      	sxtb	r2, r3
 8001246:	79bb      	ldrb	r3, [r7, #6]
 8001248:	f003 0307 	and.w	r3, r3, #7
 800124c:	2101      	movs	r1, #1
 800124e:	fa01 f303 	lsl.w	r3, r1, r3
 8001252:	b25b      	sxtb	r3, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	b25b      	sxtb	r3, r3
 8001258:	4013      	ands	r3, r2
 800125a:	b259      	sxtb	r1, r3
 800125c:	79fa      	ldrb	r2, [r7, #7]
 800125e:	462b      	mov	r3, r5
 8001260:	fb00 f303 	mul.w	r3, r0, r3
 8001264:	4413      	add	r3, r2
 8001266:	b2c9      	uxtb	r1, r1
 8001268:	4a04      	ldr	r2, [pc, #16]	; (800127c <ssd1306_DrawPixel+0xe8>)
 800126a:	54d1      	strb	r1, [r2, r3]
 800126c:	e000      	b.n	8001270 <ssd1306_DrawPixel+0xdc>
		return;
 800126e:	bf00      	nop
	}
}
 8001270:	3714      	adds	r7, #20
 8001272:	46bd      	mov	sp, r7
 8001274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001276:	bf00      	nop
 8001278:	200002d4 	.word	0x200002d4
 800127c:	200002dc 	.word	0x200002dc

08001280 <ssd1306_DrawHorizontalLine>:
	}
}


void ssd1306_DrawHorizontalLine(int16_t x, int16_t y, int16_t length)
{
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	80fb      	strh	r3, [r7, #6]
 800128a:	460b      	mov	r3, r1
 800128c:	80bb      	strh	r3, [r7, #4]
 800128e:	4613      	mov	r3, r2
 8001290:	807b      	strh	r3, [r7, #2]
  if (y < 0 || y >= height()) { return; }
 8001292:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	f2c0 8086 	blt.w	80013a8 <ssd1306_DrawHorizontalLine+0x128>
 800129c:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80012a0:	f7ff fe8e 	bl	8000fc0 <height>
 80012a4:	4603      	mov	r3, r0
 80012a6:	429c      	cmp	r4, r3
 80012a8:	da7e      	bge.n	80013a8 <ssd1306_DrawHorizontalLine+0x128>


  if (x < 0)
 80012aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	da06      	bge.n	80012c0 <ssd1306_DrawHorizontalLine+0x40>
  {
    length += x;
 80012b2:	887a      	ldrh	r2, [r7, #2]
 80012b4:	88fb      	ldrh	r3, [r7, #6]
 80012b6:	4413      	add	r3, r2
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	807b      	strh	r3, [r7, #2]
    x = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	80fb      	strh	r3, [r7, #6]
  }


  if ( (x + length) > width())
 80012c0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80012c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80012c8:	18d4      	adds	r4, r2, r3
 80012ca:	f7ff fe72 	bl	8000fb2 <width>
 80012ce:	4603      	mov	r3, r0
 80012d0:	429c      	cmp	r4, r3
 80012d2:	dd07      	ble.n	80012e4 <ssd1306_DrawHorizontalLine+0x64>
  {
    length = (width() - x);
 80012d4:	f7ff fe6d 	bl	8000fb2 <width>
 80012d8:	4603      	mov	r3, r0
 80012da:	461a      	mov	r2, r3
 80012dc:	88fb      	ldrh	r3, [r7, #6]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	807b      	strh	r3, [r7, #2]
  }


  if (length <= 0) { return; }
 80012e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	dd5f      	ble.n	80013ac <ssd1306_DrawHorizontalLine+0x12c>


  uint8_t * bufferPtr = SSD1306_Buffer;
 80012ec:	4b31      	ldr	r3, [pc, #196]	; (80013b4 <ssd1306_DrawHorizontalLine+0x134>)
 80012ee:	60fb      	str	r3, [r7, #12]
  bufferPtr += (y >> 3) * width();
 80012f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80012f4:	10db      	asrs	r3, r3, #3
 80012f6:	b21b      	sxth	r3, r3
 80012f8:	461c      	mov	r4, r3
 80012fa:	f7ff fe5a 	bl	8000fb2 <width>
 80012fe:	4603      	mov	r3, r0
 8001300:	fb04 f303 	mul.w	r3, r4, r3
 8001304:	461a      	mov	r2, r3
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	4413      	add	r3, r2
 800130a:	60fb      	str	r3, [r7, #12]
  bufferPtr += x;
 800130c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001310:	68fa      	ldr	r2, [r7, #12]
 8001312:	4413      	add	r3, r2
 8001314:	60fb      	str	r3, [r7, #12]


  uint8_t drawBit = 1 << (y & 7);
 8001316:	88bb      	ldrh	r3, [r7, #4]
 8001318:	f003 0307 	and.w	r3, r3, #7
 800131c:	2201      	movs	r2, #1
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	72fb      	strb	r3, [r7, #11]


  switch (SSD1306.Color)
 8001324:	4b24      	ldr	r3, [pc, #144]	; (80013b8 <ssd1306_DrawHorizontalLine+0x138>)
 8001326:	795b      	ldrb	r3, [r3, #5]
 8001328:	2b02      	cmp	r3, #2
 800132a:	d034      	beq.n	8001396 <ssd1306_DrawHorizontalLine+0x116>
 800132c:	2b02      	cmp	r3, #2
 800132e:	dc3e      	bgt.n	80013ae <ssd1306_DrawHorizontalLine+0x12e>
 8001330:	2b00      	cmp	r3, #0
 8001332:	d013      	beq.n	800135c <ssd1306_DrawHorizontalLine+0xdc>
 8001334:	2b01      	cmp	r3, #1
 8001336:	d13a      	bne.n	80013ae <ssd1306_DrawHorizontalLine+0x12e>
  {
    case White:
    	while (length--)
 8001338:	e007      	b.n	800134a <ssd1306_DrawHorizontalLine+0xca>
    	{
    		*bufferPtr++ |= drawBit;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	1c5a      	adds	r2, r3, #1
 800133e:	60fa      	str	r2, [r7, #12]
 8001340:	7819      	ldrb	r1, [r3, #0]
 8001342:	7afa      	ldrb	r2, [r7, #11]
 8001344:	430a      	orrs	r2, r1
 8001346:	b2d2      	uxtb	r2, r2
 8001348:	701a      	strb	r2, [r3, #0]
    	while (length--)
 800134a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800134e:	b29a      	uxth	r2, r3
 8001350:	3a01      	subs	r2, #1
 8001352:	b292      	uxth	r2, r2
 8001354:	807a      	strh	r2, [r7, #2]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1ef      	bne.n	800133a <ssd1306_DrawHorizontalLine+0xba>
    	};
    	break;
 800135a:	e028      	b.n	80013ae <ssd1306_DrawHorizontalLine+0x12e>
    case Black:
    	drawBit = ~drawBit;
 800135c:	7afb      	ldrb	r3, [r7, #11]
 800135e:	43db      	mvns	r3, r3
 8001360:	72fb      	strb	r3, [r7, #11]
    	while (length--)
 8001362:	e007      	b.n	8001374 <ssd1306_DrawHorizontalLine+0xf4>
    	{
    		*bufferPtr++ &= drawBit;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	1c5a      	adds	r2, r3, #1
 8001368:	60fa      	str	r2, [r7, #12]
 800136a:	7819      	ldrb	r1, [r3, #0]
 800136c:	7afa      	ldrb	r2, [r7, #11]
 800136e:	400a      	ands	r2, r1
 8001370:	b2d2      	uxtb	r2, r2
 8001372:	701a      	strb	r2, [r3, #0]
    	while (length--)
 8001374:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001378:	b29a      	uxth	r2, r3
 800137a:	3a01      	subs	r2, #1
 800137c:	b292      	uxth	r2, r2
 800137e:	807a      	strh	r2, [r7, #2]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1ef      	bne.n	8001364 <ssd1306_DrawHorizontalLine+0xe4>
    	};
    	break;
 8001384:	e013      	b.n	80013ae <ssd1306_DrawHorizontalLine+0x12e>
    case Inverse:
    	while (length--)
    	{
    		*bufferPtr++ ^= drawBit;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	1c5a      	adds	r2, r3, #1
 800138a:	60fa      	str	r2, [r7, #12]
 800138c:	7819      	ldrb	r1, [r3, #0]
 800138e:	7afa      	ldrb	r2, [r7, #11]
 8001390:	404a      	eors	r2, r1
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	701a      	strb	r2, [r3, #0]
    	while (length--)
 8001396:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800139a:	b29a      	uxth	r2, r3
 800139c:	3a01      	subs	r2, #1
 800139e:	b292      	uxth	r2, r2
 80013a0:	807a      	strh	r2, [r7, #2]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1ef      	bne.n	8001386 <ssd1306_DrawHorizontalLine+0x106>
    	}; break;
 80013a6:	e002      	b.n	80013ae <ssd1306_DrawHorizontalLine+0x12e>
  if (y < 0 || y >= height()) { return; }
 80013a8:	bf00      	nop
 80013aa:	e000      	b.n	80013ae <ssd1306_DrawHorizontalLine+0x12e>
  if (length <= 0) { return; }
 80013ac:	bf00      	nop
  }
}
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd90      	pop	{r4, r7, pc}
 80013b4:	200002dc 	.word	0x200002dc
 80013b8:	200002d4 	.word	0x200002d4

080013bc <ssd1306_DrawVerticalLine>:


void ssd1306_DrawVerticalLine(int16_t x, int16_t y, int16_t length)
{
 80013bc:	b590      	push	{r4, r7, lr}
 80013be:	b087      	sub	sp, #28
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	80fb      	strh	r3, [r7, #6]
 80013c6:	460b      	mov	r3, r1
 80013c8:	80bb      	strh	r3, [r7, #4]
 80013ca:	4613      	mov	r3, r2
 80013cc:	807b      	strh	r3, [r7, #2]
  if (x < 0 || x >= width()) return;
 80013ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f2c0 8113 	blt.w	80015fe <ssd1306_DrawVerticalLine+0x242>
 80013d8:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 80013dc:	f7ff fde9 	bl	8000fb2 <width>
 80013e0:	4603      	mov	r3, r0
 80013e2:	429c      	cmp	r4, r3
 80013e4:	f280 810b 	bge.w	80015fe <ssd1306_DrawVerticalLine+0x242>


  if (y < 0)
 80013e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	da06      	bge.n	80013fe <ssd1306_DrawVerticalLine+0x42>
  {
    length += y;
 80013f0:	887a      	ldrh	r2, [r7, #2]
 80013f2:	88bb      	ldrh	r3, [r7, #4]
 80013f4:	4413      	add	r3, r2
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	807b      	strh	r3, [r7, #2]
    y = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	80bb      	strh	r3, [r7, #4]
  }


  if ( (y + length) > height())
 80013fe:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001402:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001406:	18d4      	adds	r4, r2, r3
 8001408:	f7ff fdda 	bl	8000fc0 <height>
 800140c:	4603      	mov	r3, r0
 800140e:	429c      	cmp	r4, r3
 8001410:	dd07      	ble.n	8001422 <ssd1306_DrawVerticalLine+0x66>
  {
    length = (height() - y);
 8001412:	f7ff fdd5 	bl	8000fc0 <height>
 8001416:	4603      	mov	r3, r0
 8001418:	461a      	mov	r2, r3
 800141a:	88bb      	ldrh	r3, [r7, #4]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	b29b      	uxth	r3, r3
 8001420:	807b      	strh	r3, [r7, #2]
  }


  if (length <= 0) return;
 8001422:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001426:	2b00      	cmp	r3, #0
 8001428:	f340 80eb 	ble.w	8001602 <ssd1306_DrawVerticalLine+0x246>




  uint8_t yOffset = y & 7;
 800142c:	88bb      	ldrh	r3, [r7, #4]
 800142e:	b2db      	uxtb	r3, r3
 8001430:	f003 0307 	and.w	r3, r3, #7
 8001434:	73fb      	strb	r3, [r7, #15]
  uint8_t drawBit;
  uint8_t *bufferPtr = SSD1306_Buffer;
 8001436:	4b76      	ldr	r3, [pc, #472]	; (8001610 <ssd1306_DrawVerticalLine+0x254>)
 8001438:	613b      	str	r3, [r7, #16]


  bufferPtr += (y >> 3) * width();
 800143a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800143e:	10db      	asrs	r3, r3, #3
 8001440:	b21b      	sxth	r3, r3
 8001442:	461c      	mov	r4, r3
 8001444:	f7ff fdb5 	bl	8000fb2 <width>
 8001448:	4603      	mov	r3, r0
 800144a:	fb04 f303 	mul.w	r3, r4, r3
 800144e:	461a      	mov	r2, r3
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	4413      	add	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
  bufferPtr += x;
 8001456:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	4413      	add	r3, r2
 800145e:	613b      	str	r3, [r7, #16]


  if (yOffset)
 8001460:	7bfb      	ldrb	r3, [r7, #15]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d056      	beq.n	8001514 <ssd1306_DrawVerticalLine+0x158>
  {
    yOffset = 8 - yOffset;
 8001466:	7bfb      	ldrb	r3, [r7, #15]
 8001468:	f1c3 0308 	rsb	r3, r3, #8
 800146c:	73fb      	strb	r3, [r7, #15]
    drawBit = ~(0xFF >> (yOffset));
 800146e:	7bfb      	ldrb	r3, [r7, #15]
 8001470:	22ff      	movs	r2, #255	; 0xff
 8001472:	fa42 f303 	asr.w	r3, r2, r3
 8001476:	b2db      	uxtb	r3, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	75fb      	strb	r3, [r7, #23]


    if (length < yOffset)
 800147c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	429a      	cmp	r2, r3
 8001484:	da0c      	bge.n	80014a0 <ssd1306_DrawVerticalLine+0xe4>
    {
      drawBit &= (0xFF >> (yOffset - length));
 8001486:	7bfa      	ldrb	r2, [r7, #15]
 8001488:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	22ff      	movs	r2, #255	; 0xff
 8001490:	fa42 f303 	asr.w	r3, r2, r3
 8001494:	b25a      	sxtb	r2, r3
 8001496:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800149a:	4013      	ands	r3, r2
 800149c:	b25b      	sxtb	r3, r3
 800149e:	75fb      	strb	r3, [r7, #23]
    }


    switch (SSD1306.Color)
 80014a0:	4b5c      	ldr	r3, [pc, #368]	; (8001614 <ssd1306_DrawVerticalLine+0x258>)
 80014a2:	795b      	ldrb	r3, [r3, #5]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d01a      	beq.n	80014de <ssd1306_DrawVerticalLine+0x122>
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	dc20      	bgt.n	80014ee <ssd1306_DrawVerticalLine+0x132>
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d009      	beq.n	80014c4 <ssd1306_DrawVerticalLine+0x108>
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d11c      	bne.n	80014ee <ssd1306_DrawVerticalLine+0x132>
    {
      case White:   *bufferPtr |=  drawBit; break;
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	781a      	ldrb	r2, [r3, #0]
 80014b8:	7dfb      	ldrb	r3, [r7, #23]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	701a      	strb	r2, [r3, #0]
 80014c2:	e014      	b.n	80014ee <ssd1306_DrawVerticalLine+0x132>
      case Black:   *bufferPtr &= ~drawBit; break;
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	b25a      	sxtb	r2, r3
 80014ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014ce:	43db      	mvns	r3, r3
 80014d0:	b25b      	sxtb	r3, r3
 80014d2:	4013      	ands	r3, r2
 80014d4:	b25b      	sxtb	r3, r3
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	701a      	strb	r2, [r3, #0]
 80014dc:	e007      	b.n	80014ee <ssd1306_DrawVerticalLine+0x132>
      case Inverse: *bufferPtr ^=  drawBit; break;
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	781a      	ldrb	r2, [r3, #0]
 80014e2:	7dfb      	ldrb	r3, [r7, #23]
 80014e4:	4053      	eors	r3, r2
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	701a      	strb	r2, [r3, #0]
 80014ec:	bf00      	nop
    }


    if (length < yOffset) return;
 80014ee:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80014f2:	7bfb      	ldrb	r3, [r7, #15]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	f2c0 8086 	blt.w	8001606 <ssd1306_DrawVerticalLine+0x24a>


    length -= yOffset;
 80014fa:	887a      	ldrh	r2, [r7, #2]
 80014fc:	7bfb      	ldrb	r3, [r7, #15]
 80014fe:	b29b      	uxth	r3, r3
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	b29b      	uxth	r3, r3
 8001504:	807b      	strh	r3, [r7, #2]
    bufferPtr += width();
 8001506:	f7ff fd54 	bl	8000fb2 <width>
 800150a:	4603      	mov	r3, r0
 800150c:	461a      	mov	r2, r3
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	4413      	add	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
  }


  if (length >= 8)
 8001514:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001518:	2b07      	cmp	r3, #7
 800151a:	dd3b      	ble.n	8001594 <ssd1306_DrawVerticalLine+0x1d8>
  {
    switch (SSD1306.Color)
 800151c:	4b3d      	ldr	r3, [pc, #244]	; (8001614 <ssd1306_DrawVerticalLine+0x258>)
 800151e:	795b      	ldrb	r3, [r3, #5]
 8001520:	2b01      	cmp	r3, #1
 8001522:	dc02      	bgt.n	800152a <ssd1306_DrawVerticalLine+0x16e>
 8001524:	2b00      	cmp	r3, #0
 8001526:	da03      	bge.n	8001530 <ssd1306_DrawVerticalLine+0x174>
 8001528:	e035      	b.n	8001596 <ssd1306_DrawVerticalLine+0x1da>
 800152a:	2b02      	cmp	r3, #2
 800152c:	d01c      	beq.n	8001568 <ssd1306_DrawVerticalLine+0x1ac>
 800152e:	e032      	b.n	8001596 <ssd1306_DrawVerticalLine+0x1da>
    {
      case White:
      case Black:
        drawBit = (SSD1306.Color == White) ? 0xFF : 0x00;
 8001530:	4b38      	ldr	r3, [pc, #224]	; (8001614 <ssd1306_DrawVerticalLine+0x258>)
 8001532:	795b      	ldrb	r3, [r3, #5]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d101      	bne.n	800153c <ssd1306_DrawVerticalLine+0x180>
 8001538:	23ff      	movs	r3, #255	; 0xff
 800153a:	e000      	b.n	800153e <ssd1306_DrawVerticalLine+0x182>
 800153c:	2300      	movs	r3, #0
 800153e:	75fb      	strb	r3, [r7, #23]
        do {
          *bufferPtr = drawBit;
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	7dfa      	ldrb	r2, [r7, #23]
 8001544:	701a      	strb	r2, [r3, #0]
          bufferPtr += width();
 8001546:	f7ff fd34 	bl	8000fb2 <width>
 800154a:	4603      	mov	r3, r0
 800154c:	461a      	mov	r2, r3
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	4413      	add	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
          length -= 8;
 8001554:	887b      	ldrh	r3, [r7, #2]
 8001556:	3b08      	subs	r3, #8
 8001558:	b29b      	uxth	r3, r3
 800155a:	807b      	strh	r3, [r7, #2]
        } while (length >= 8);
 800155c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001560:	2b07      	cmp	r3, #7
 8001562:	dced      	bgt.n	8001540 <ssd1306_DrawVerticalLine+0x184>
        break;
 8001564:	e017      	b.n	8001596 <ssd1306_DrawVerticalLine+0x1da>
      case Inverse:
 8001566:	bf00      	nop
        do {
          *bufferPtr = ~(*bufferPtr);
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	43db      	mvns	r3, r3
 800156e:	b2da      	uxtb	r2, r3
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	701a      	strb	r2, [r3, #0]
          bufferPtr += width();
 8001574:	f7ff fd1d 	bl	8000fb2 <width>
 8001578:	4603      	mov	r3, r0
 800157a:	461a      	mov	r2, r3
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	4413      	add	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
          length -= 8;
 8001582:	887b      	ldrh	r3, [r7, #2]
 8001584:	3b08      	subs	r3, #8
 8001586:	b29b      	uxth	r3, r3
 8001588:	807b      	strh	r3, [r7, #2]
        } while (length >= 8);
 800158a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800158e:	2b07      	cmp	r3, #7
 8001590:	dce9      	bgt.n	8001566 <ssd1306_DrawVerticalLine+0x1aa>
        break;
 8001592:	e000      	b.n	8001596 <ssd1306_DrawVerticalLine+0x1da>
    }
  }
 8001594:	bf00      	nop


  if (length > 0)
 8001596:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800159a:	2b00      	cmp	r3, #0
 800159c:	dd34      	ble.n	8001608 <ssd1306_DrawVerticalLine+0x24c>
  {
    drawBit = (1 << (length & 7)) - 1;
 800159e:	887b      	ldrh	r3, [r7, #2]
 80015a0:	f003 0307 	and.w	r3, r3, #7
 80015a4:	2201      	movs	r2, #1
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	3b01      	subs	r3, #1
 80015ae:	75fb      	strb	r3, [r7, #23]
    switch (SSD1306.Color)
 80015b0:	4b18      	ldr	r3, [pc, #96]	; (8001614 <ssd1306_DrawVerticalLine+0x258>)
 80015b2:	795b      	ldrb	r3, [r3, #5]
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d01a      	beq.n	80015ee <ssd1306_DrawVerticalLine+0x232>
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	dc25      	bgt.n	8001608 <ssd1306_DrawVerticalLine+0x24c>
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d009      	beq.n	80015d4 <ssd1306_DrawVerticalLine+0x218>
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d121      	bne.n	8001608 <ssd1306_DrawVerticalLine+0x24c>
    {
      case White:   *bufferPtr |=  drawBit; break;
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	781a      	ldrb	r2, [r3, #0]
 80015c8:	7dfb      	ldrb	r3, [r7, #23]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	701a      	strb	r2, [r3, #0]
 80015d2:	e019      	b.n	8001608 <ssd1306_DrawVerticalLine+0x24c>
      case Black:   *bufferPtr &= ~drawBit; break;
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	b25a      	sxtb	r2, r3
 80015da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015de:	43db      	mvns	r3, r3
 80015e0:	b25b      	sxtb	r3, r3
 80015e2:	4013      	ands	r3, r2
 80015e4:	b25b      	sxtb	r3, r3
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	701a      	strb	r2, [r3, #0]
 80015ec:	e00c      	b.n	8001608 <ssd1306_DrawVerticalLine+0x24c>
      case Inverse: *bufferPtr ^=  drawBit; break;
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	781a      	ldrb	r2, [r3, #0]
 80015f2:	7dfb      	ldrb	r3, [r7, #23]
 80015f4:	4053      	eors	r3, r2
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	701a      	strb	r2, [r3, #0]
 80015fc:	e004      	b.n	8001608 <ssd1306_DrawVerticalLine+0x24c>
  if (x < 0 || x >= width()) return;
 80015fe:	bf00      	nop
 8001600:	e002      	b.n	8001608 <ssd1306_DrawVerticalLine+0x24c>
  if (length <= 0) return;
 8001602:	bf00      	nop
 8001604:	e000      	b.n	8001608 <ssd1306_DrawVerticalLine+0x24c>
    if (length < yOffset) return;
 8001606:	bf00      	nop
    }
  }
}
 8001608:	371c      	adds	r7, #28
 800160a:	46bd      	mov	sp, r7
 800160c:	bd90      	pop	{r4, r7, pc}
 800160e:	bf00      	nop
 8001610:	200002dc 	.word	0x200002dc
 8001614:	200002d4 	.word	0x200002d4

08001618 <ssd1306_FillRect>:
	ssd1306_DrawHorizontalLine(x, y + height - 1, width);
}


void ssd1306_FillRect(int16_t xMove, int16_t yMove, int16_t width, int16_t height)
{
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	4604      	mov	r4, r0
 8001620:	4608      	mov	r0, r1
 8001622:	4611      	mov	r1, r2
 8001624:	461a      	mov	r2, r3
 8001626:	4623      	mov	r3, r4
 8001628:	80fb      	strh	r3, [r7, #6]
 800162a:	4603      	mov	r3, r0
 800162c:	80bb      	strh	r3, [r7, #4]
 800162e:	460b      	mov	r3, r1
 8001630:	807b      	strh	r3, [r7, #2]
 8001632:	4613      	mov	r3, r2
 8001634:	803b      	strh	r3, [r7, #0]
  for (int16_t x = xMove; x < xMove + width; x++)
 8001636:	88fb      	ldrh	r3, [r7, #6]
 8001638:	81fb      	strh	r3, [r7, #14]
 800163a:	e00e      	b.n	800165a <ssd1306_FillRect+0x42>
  {
    ssd1306_DrawVerticalLine(x, yMove, height);
 800163c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001640:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001644:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff feb7 	bl	80013bc <ssd1306_DrawVerticalLine>
  for (int16_t x = xMove; x < xMove + width; x++)
 800164e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001652:	b29b      	uxth	r3, r3
 8001654:	3301      	adds	r3, #1
 8001656:	b29b      	uxth	r3, r3
 8001658:	81fb      	strh	r3, [r7, #14]
 800165a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800165e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001662:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001666:	440b      	add	r3, r1
 8001668:	429a      	cmp	r2, r3
 800166a:	dbe7      	blt.n	800163c <ssd1306_FillRect+0x24>
  }
}
 800166c:	bf00      	nop
 800166e:	bf00      	nop
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	bd90      	pop	{r4, r7, pc}

08001676 <ssd1306_FillCircle>:
	ssd1306_DrawPixel(x0, y0 - radius);
}


void ssd1306_FillCircle(int16_t x0, int16_t y0, int16_t radius)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b084      	sub	sp, #16
 800167a:	af00      	add	r7, sp, #0
 800167c:	4603      	mov	r3, r0
 800167e:	80fb      	strh	r3, [r7, #6]
 8001680:	460b      	mov	r3, r1
 8001682:	80bb      	strh	r3, [r7, #4]
 8001684:	4613      	mov	r3, r2
 8001686:	807b      	strh	r3, [r7, #2]
  int16_t x = 0, y = radius;
 8001688:	2300      	movs	r3, #0
 800168a:	81fb      	strh	r3, [r7, #14]
 800168c:	887b      	ldrh	r3, [r7, #2]
 800168e:	81bb      	strh	r3, [r7, #12]
  int16_t dp = 1 - radius;
 8001690:	887b      	ldrh	r3, [r7, #2]
 8001692:	f1c3 0301 	rsb	r3, r3, #1
 8001696:	b29b      	uxth	r3, r3
 8001698:	817b      	strh	r3, [r7, #10]
  do
  {
	  if (dp < 0)
 800169a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	da0d      	bge.n	80016be <ssd1306_FillCircle+0x48>
	  {
		  dp = dp + 2 * (++x) + 3;
 80016a2:	89fb      	ldrh	r3, [r7, #14]
 80016a4:	3301      	adds	r3, #1
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	81fb      	strh	r3, [r7, #14]
 80016aa:	89fb      	ldrh	r3, [r7, #14]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	897b      	ldrh	r3, [r7, #10]
 80016b2:	4413      	add	r3, r2
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	3303      	adds	r3, #3
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	817b      	strh	r3, [r7, #10]
 80016bc:	e015      	b.n	80016ea <ssd1306_FillCircle+0x74>
	  }
	  else
	  {
		  dp = dp + 2 * (++x) - 2 * (--y) + 5;
 80016be:	89fb      	ldrh	r3, [r7, #14]
 80016c0:	3301      	adds	r3, #1
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	81fb      	strh	r3, [r7, #14]
 80016c6:	89fb      	ldrh	r3, [r7, #14]
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	897b      	ldrh	r3, [r7, #10]
 80016ce:	4413      	add	r3, r2
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	89bb      	ldrh	r3, [r7, #12]
 80016d4:	3b01      	subs	r3, #1
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	81bb      	strh	r3, [r7, #12]
 80016da:	89bb      	ldrh	r3, [r7, #12]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	b29b      	uxth	r3, r3
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	3305      	adds	r3, #5
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	817b      	strh	r3, [r7, #10]
	  }


    ssd1306_DrawHorizontalLine(x0 - x, y0 - y, 2*x);
 80016ea:	88fa      	ldrh	r2, [r7, #6]
 80016ec:	89fb      	ldrh	r3, [r7, #14]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	b218      	sxth	r0, r3
 80016f4:	88ba      	ldrh	r2, [r7, #4]
 80016f6:	89bb      	ldrh	r3, [r7, #12]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	b219      	sxth	r1, r3
 80016fe:	89fb      	ldrh	r3, [r7, #14]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	b29b      	uxth	r3, r3
 8001704:	b21b      	sxth	r3, r3
 8001706:	461a      	mov	r2, r3
 8001708:	f7ff fdba 	bl	8001280 <ssd1306_DrawHorizontalLine>
    ssd1306_DrawHorizontalLine(x0 - x, y0 + y, 2*x);
 800170c:	88fa      	ldrh	r2, [r7, #6]
 800170e:	89fb      	ldrh	r3, [r7, #14]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	b29b      	uxth	r3, r3
 8001714:	b218      	sxth	r0, r3
 8001716:	88ba      	ldrh	r2, [r7, #4]
 8001718:	89bb      	ldrh	r3, [r7, #12]
 800171a:	4413      	add	r3, r2
 800171c:	b29b      	uxth	r3, r3
 800171e:	b219      	sxth	r1, r3
 8001720:	89fb      	ldrh	r3, [r7, #14]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	b29b      	uxth	r3, r3
 8001726:	b21b      	sxth	r3, r3
 8001728:	461a      	mov	r2, r3
 800172a:	f7ff fda9 	bl	8001280 <ssd1306_DrawHorizontalLine>
    ssd1306_DrawHorizontalLine(x0 - y, y0 - x, 2*y);
 800172e:	88fa      	ldrh	r2, [r7, #6]
 8001730:	89bb      	ldrh	r3, [r7, #12]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	b29b      	uxth	r3, r3
 8001736:	b218      	sxth	r0, r3
 8001738:	88ba      	ldrh	r2, [r7, #4]
 800173a:	89fb      	ldrh	r3, [r7, #14]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	b29b      	uxth	r3, r3
 8001740:	b219      	sxth	r1, r3
 8001742:	89bb      	ldrh	r3, [r7, #12]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	b29b      	uxth	r3, r3
 8001748:	b21b      	sxth	r3, r3
 800174a:	461a      	mov	r2, r3
 800174c:	f7ff fd98 	bl	8001280 <ssd1306_DrawHorizontalLine>
    ssd1306_DrawHorizontalLine(x0 - y, y0 + x, 2*y);
 8001750:	88fa      	ldrh	r2, [r7, #6]
 8001752:	89bb      	ldrh	r3, [r7, #12]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	b29b      	uxth	r3, r3
 8001758:	b218      	sxth	r0, r3
 800175a:	88ba      	ldrh	r2, [r7, #4]
 800175c:	89fb      	ldrh	r3, [r7, #14]
 800175e:	4413      	add	r3, r2
 8001760:	b29b      	uxth	r3, r3
 8001762:	b219      	sxth	r1, r3
 8001764:	89bb      	ldrh	r3, [r7, #12]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	b29b      	uxth	r3, r3
 800176a:	b21b      	sxth	r3, r3
 800176c:	461a      	mov	r2, r3
 800176e:	f7ff fd87 	bl	8001280 <ssd1306_DrawHorizontalLine>




  } while (x < y);
 8001772:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001776:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800177a:	429a      	cmp	r2, r3
 800177c:	db8d      	blt.n	800169a <ssd1306_FillCircle+0x24>
  ssd1306_DrawHorizontalLine(x0 - radius, y0, 2 * radius);
 800177e:	88fa      	ldrh	r2, [r7, #6]
 8001780:	887b      	ldrh	r3, [r7, #2]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	b29b      	uxth	r3, r3
 8001786:	b218      	sxth	r0, r3
 8001788:	887b      	ldrh	r3, [r7, #2]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	b29b      	uxth	r3, r3
 800178e:	b21a      	sxth	r2, r3
 8001790:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001794:	4619      	mov	r1, r3
 8001796:	f7ff fd73 	bl	8001280 <ssd1306_DrawHorizontalLine>
}
 800179a:	bf00      	nop
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <ssd1306_DrawCircleQuads>:


void ssd1306_DrawCircleQuads(int16_t x0, int16_t y0, int16_t radius, uint8_t quads)
{
 80017a2:	b590      	push	{r4, r7, lr}
 80017a4:	b085      	sub	sp, #20
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	4604      	mov	r4, r0
 80017aa:	4608      	mov	r0, r1
 80017ac:	4611      	mov	r1, r2
 80017ae:	461a      	mov	r2, r3
 80017b0:	4623      	mov	r3, r4
 80017b2:	80fb      	strh	r3, [r7, #6]
 80017b4:	4603      	mov	r3, r0
 80017b6:	80bb      	strh	r3, [r7, #4]
 80017b8:	460b      	mov	r3, r1
 80017ba:	807b      	strh	r3, [r7, #2]
 80017bc:	4613      	mov	r3, r2
 80017be:	707b      	strb	r3, [r7, #1]
  int16_t x = 0, y = radius;
 80017c0:	2300      	movs	r3, #0
 80017c2:	81fb      	strh	r3, [r7, #14]
 80017c4:	887b      	ldrh	r3, [r7, #2]
 80017c6:	81bb      	strh	r3, [r7, #12]
  int16_t dp = 1 - radius;
 80017c8:	887b      	ldrh	r3, [r7, #2]
 80017ca:	f1c3 0301 	rsb	r3, r3, #1
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	817b      	strh	r3, [r7, #10]
  while (x < y)
 80017d2:	e0b3      	b.n	800193c <ssd1306_DrawCircleQuads+0x19a>
  {
    if (dp < 0)
 80017d4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	da0d      	bge.n	80017f8 <ssd1306_DrawCircleQuads+0x56>
      dp = dp + 2 * (++x) + 3;
 80017dc:	89fb      	ldrh	r3, [r7, #14]
 80017de:	3301      	adds	r3, #1
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	81fb      	strh	r3, [r7, #14]
 80017e4:	89fb      	ldrh	r3, [r7, #14]
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	897b      	ldrh	r3, [r7, #10]
 80017ec:	4413      	add	r3, r2
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	3303      	adds	r3, #3
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	817b      	strh	r3, [r7, #10]
 80017f6:	e015      	b.n	8001824 <ssd1306_DrawCircleQuads+0x82>
    else
      dp = dp + 2 * (++x) - 2 * (--y) + 5;
 80017f8:	89fb      	ldrh	r3, [r7, #14]
 80017fa:	3301      	adds	r3, #1
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	81fb      	strh	r3, [r7, #14]
 8001800:	89fb      	ldrh	r3, [r7, #14]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	b29a      	uxth	r2, r3
 8001806:	897b      	ldrh	r3, [r7, #10]
 8001808:	4413      	add	r3, r2
 800180a:	b29a      	uxth	r2, r3
 800180c:	89bb      	ldrh	r3, [r7, #12]
 800180e:	3b01      	subs	r3, #1
 8001810:	b29b      	uxth	r3, r3
 8001812:	81bb      	strh	r3, [r7, #12]
 8001814:	89bb      	ldrh	r3, [r7, #12]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	b29b      	uxth	r3, r3
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	b29b      	uxth	r3, r3
 800181e:	3305      	adds	r3, #5
 8001820:	b29b      	uxth	r3, r3
 8001822:	817b      	strh	r3, [r7, #10]
    if (quads & 0x1)
 8001824:	787b      	ldrb	r3, [r7, #1]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	d01d      	beq.n	800186a <ssd1306_DrawCircleQuads+0xc8>
    {
    	ssd1306_DrawPixel(x0 + x, y0 - y);
 800182e:	88fb      	ldrh	r3, [r7, #6]
 8001830:	b2da      	uxtb	r2, r3
 8001832:	89fb      	ldrh	r3, [r7, #14]
 8001834:	b2db      	uxtb	r3, r3
 8001836:	4413      	add	r3, r2
 8001838:	b2d8      	uxtb	r0, r3
 800183a:	88bb      	ldrh	r3, [r7, #4]
 800183c:	b2da      	uxtb	r2, r3
 800183e:	89bb      	ldrh	r3, [r7, #12]
 8001840:	b2db      	uxtb	r3, r3
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	b2db      	uxtb	r3, r3
 8001846:	4619      	mov	r1, r3
 8001848:	f7ff fca4 	bl	8001194 <ssd1306_DrawPixel>
    	ssd1306_DrawPixel(x0 + y, y0 - x);
 800184c:	88fb      	ldrh	r3, [r7, #6]
 800184e:	b2da      	uxtb	r2, r3
 8001850:	89bb      	ldrh	r3, [r7, #12]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	4413      	add	r3, r2
 8001856:	b2d8      	uxtb	r0, r3
 8001858:	88bb      	ldrh	r3, [r7, #4]
 800185a:	b2da      	uxtb	r2, r3
 800185c:	89fb      	ldrh	r3, [r7, #14]
 800185e:	b2db      	uxtb	r3, r3
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	b2db      	uxtb	r3, r3
 8001864:	4619      	mov	r1, r3
 8001866:	f7ff fc95 	bl	8001194 <ssd1306_DrawPixel>
    }
    if (quads & 0x2)
 800186a:	787b      	ldrb	r3, [r7, #1]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d01d      	beq.n	80018b0 <ssd1306_DrawCircleQuads+0x10e>
    {
    	ssd1306_DrawPixel(x0 - y, y0 - x);
 8001874:	88fb      	ldrh	r3, [r7, #6]
 8001876:	b2da      	uxtb	r2, r3
 8001878:	89bb      	ldrh	r3, [r7, #12]
 800187a:	b2db      	uxtb	r3, r3
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	b2d8      	uxtb	r0, r3
 8001880:	88bb      	ldrh	r3, [r7, #4]
 8001882:	b2da      	uxtb	r2, r3
 8001884:	89fb      	ldrh	r3, [r7, #14]
 8001886:	b2db      	uxtb	r3, r3
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	b2db      	uxtb	r3, r3
 800188c:	4619      	mov	r1, r3
 800188e:	f7ff fc81 	bl	8001194 <ssd1306_DrawPixel>
    	ssd1306_DrawPixel(x0 - x, y0 - y);
 8001892:	88fb      	ldrh	r3, [r7, #6]
 8001894:	b2da      	uxtb	r2, r3
 8001896:	89fb      	ldrh	r3, [r7, #14]
 8001898:	b2db      	uxtb	r3, r3
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	b2d8      	uxtb	r0, r3
 800189e:	88bb      	ldrh	r3, [r7, #4]
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	89bb      	ldrh	r3, [r7, #12]
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	4619      	mov	r1, r3
 80018ac:	f7ff fc72 	bl	8001194 <ssd1306_DrawPixel>
    }
    if (quads & 0x4)
 80018b0:	787b      	ldrb	r3, [r7, #1]
 80018b2:	f003 0304 	and.w	r3, r3, #4
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d01d      	beq.n	80018f6 <ssd1306_DrawCircleQuads+0x154>
    {
    	ssd1306_DrawPixel(x0 - y, y0 + x);
 80018ba:	88fb      	ldrh	r3, [r7, #6]
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	89bb      	ldrh	r3, [r7, #12]
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	b2d8      	uxtb	r0, r3
 80018c6:	88bb      	ldrh	r3, [r7, #4]
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	89fb      	ldrh	r3, [r7, #14]
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	4413      	add	r3, r2
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	4619      	mov	r1, r3
 80018d4:	f7ff fc5e 	bl	8001194 <ssd1306_DrawPixel>
    	ssd1306_DrawPixel(x0 - x, y0 + y);
 80018d8:	88fb      	ldrh	r3, [r7, #6]
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	89fb      	ldrh	r3, [r7, #14]
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	b2d8      	uxtb	r0, r3
 80018e4:	88bb      	ldrh	r3, [r7, #4]
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	89bb      	ldrh	r3, [r7, #12]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	4413      	add	r3, r2
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	4619      	mov	r1, r3
 80018f2:	f7ff fc4f 	bl	8001194 <ssd1306_DrawPixel>
    }
    if (quads & 0x8)
 80018f6:	787b      	ldrb	r3, [r7, #1]
 80018f8:	f003 0308 	and.w	r3, r3, #8
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d01d      	beq.n	800193c <ssd1306_DrawCircleQuads+0x19a>
    {
    	ssd1306_DrawPixel(x0 + x, y0 + y);
 8001900:	88fb      	ldrh	r3, [r7, #6]
 8001902:	b2da      	uxtb	r2, r3
 8001904:	89fb      	ldrh	r3, [r7, #14]
 8001906:	b2db      	uxtb	r3, r3
 8001908:	4413      	add	r3, r2
 800190a:	b2d8      	uxtb	r0, r3
 800190c:	88bb      	ldrh	r3, [r7, #4]
 800190e:	b2da      	uxtb	r2, r3
 8001910:	89bb      	ldrh	r3, [r7, #12]
 8001912:	b2db      	uxtb	r3, r3
 8001914:	4413      	add	r3, r2
 8001916:	b2db      	uxtb	r3, r3
 8001918:	4619      	mov	r1, r3
 800191a:	f7ff fc3b 	bl	8001194 <ssd1306_DrawPixel>
    	ssd1306_DrawPixel(x0 + y, y0 + x);
 800191e:	88fb      	ldrh	r3, [r7, #6]
 8001920:	b2da      	uxtb	r2, r3
 8001922:	89bb      	ldrh	r3, [r7, #12]
 8001924:	b2db      	uxtb	r3, r3
 8001926:	4413      	add	r3, r2
 8001928:	b2d8      	uxtb	r0, r3
 800192a:	88bb      	ldrh	r3, [r7, #4]
 800192c:	b2da      	uxtb	r2, r3
 800192e:	89fb      	ldrh	r3, [r7, #14]
 8001930:	b2db      	uxtb	r3, r3
 8001932:	4413      	add	r3, r2
 8001934:	b2db      	uxtb	r3, r3
 8001936:	4619      	mov	r1, r3
 8001938:	f7ff fc2c 	bl	8001194 <ssd1306_DrawPixel>
  while (x < y)
 800193c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001940:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001944:	429a      	cmp	r2, r3
 8001946:	f6ff af45 	blt.w	80017d4 <ssd1306_DrawCircleQuads+0x32>
    }
  }
  if (quads & 0x1 && quads & 0x8)
 800194a:	787b      	ldrb	r3, [r7, #1]
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	2b00      	cmp	r3, #0
 8001952:	d010      	beq.n	8001976 <ssd1306_DrawCircleQuads+0x1d4>
 8001954:	787b      	ldrb	r3, [r7, #1]
 8001956:	f003 0308 	and.w	r3, r3, #8
 800195a:	2b00      	cmp	r3, #0
 800195c:	d00b      	beq.n	8001976 <ssd1306_DrawCircleQuads+0x1d4>
  {
	  ssd1306_DrawPixel(x0 + radius, y0);
 800195e:	88fb      	ldrh	r3, [r7, #6]
 8001960:	b2da      	uxtb	r2, r3
 8001962:	887b      	ldrh	r3, [r7, #2]
 8001964:	b2db      	uxtb	r3, r3
 8001966:	4413      	add	r3, r2
 8001968:	b2db      	uxtb	r3, r3
 800196a:	88ba      	ldrh	r2, [r7, #4]
 800196c:	b2d2      	uxtb	r2, r2
 800196e:	4611      	mov	r1, r2
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff fc0f 	bl	8001194 <ssd1306_DrawPixel>
  }
  if (quads & 0x4 && quads & 0x8)
 8001976:	787b      	ldrb	r3, [r7, #1]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	2b00      	cmp	r3, #0
 800197e:	d00f      	beq.n	80019a0 <ssd1306_DrawCircleQuads+0x1fe>
 8001980:	787b      	ldrb	r3, [r7, #1]
 8001982:	f003 0308 	and.w	r3, r3, #8
 8001986:	2b00      	cmp	r3, #0
 8001988:	d00a      	beq.n	80019a0 <ssd1306_DrawCircleQuads+0x1fe>
  {
	  ssd1306_DrawPixel(x0, y0 + radius);
 800198a:	88fb      	ldrh	r3, [r7, #6]
 800198c:	b2d8      	uxtb	r0, r3
 800198e:	88bb      	ldrh	r3, [r7, #4]
 8001990:	b2da      	uxtb	r2, r3
 8001992:	887b      	ldrh	r3, [r7, #2]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	4413      	add	r3, r2
 8001998:	b2db      	uxtb	r3, r3
 800199a:	4619      	mov	r1, r3
 800199c:	f7ff fbfa 	bl	8001194 <ssd1306_DrawPixel>
  }
  if (quads & 0x2 && quads & 0x4)
 80019a0:	787b      	ldrb	r3, [r7, #1]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d010      	beq.n	80019cc <ssd1306_DrawCircleQuads+0x22a>
 80019aa:	787b      	ldrb	r3, [r7, #1]
 80019ac:	f003 0304 	and.w	r3, r3, #4
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d00b      	beq.n	80019cc <ssd1306_DrawCircleQuads+0x22a>
  {
	  ssd1306_DrawPixel(x0 - radius, y0);
 80019b4:	88fb      	ldrh	r3, [r7, #6]
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	887b      	ldrh	r3, [r7, #2]
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	88ba      	ldrh	r2, [r7, #4]
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	4611      	mov	r1, r2
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff fbe4 	bl	8001194 <ssd1306_DrawPixel>
  }
  if (quads & 0x1 && quads & 0x2)
 80019cc:	787b      	ldrb	r3, [r7, #1]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00f      	beq.n	80019f6 <ssd1306_DrawCircleQuads+0x254>
 80019d6:	787b      	ldrb	r3, [r7, #1]
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d00a      	beq.n	80019f6 <ssd1306_DrawCircleQuads+0x254>
  {
	  ssd1306_DrawPixel(x0, y0 - radius);
 80019e0:	88fb      	ldrh	r3, [r7, #6]
 80019e2:	b2d8      	uxtb	r0, r3
 80019e4:	88bb      	ldrh	r3, [r7, #4]
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	887b      	ldrh	r3, [r7, #2]
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	4619      	mov	r1, r3
 80019f2:	f7ff fbcf 	bl	8001194 <ssd1306_DrawPixel>
  }
}
 80019f6:	bf00      	nop
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd90      	pop	{r4, r7, pc}
	...

08001a00 <ssd1306_DrawProgressBar>:


void ssd1306_DrawProgressBar(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t progress)
{
 8001a00:	b590      	push	{r4, r7, lr}
 8001a02:	b087      	sub	sp, #28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4604      	mov	r4, r0
 8001a08:	4608      	mov	r0, r1
 8001a0a:	4611      	mov	r1, r2
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	4623      	mov	r3, r4
 8001a10:	80fb      	strh	r3, [r7, #6]
 8001a12:	4603      	mov	r3, r0
 8001a14:	80bb      	strh	r3, [r7, #4]
 8001a16:	460b      	mov	r3, r1
 8001a18:	807b      	strh	r3, [r7, #2]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	803b      	strh	r3, [r7, #0]
	uint16_t radius = height / 2;
 8001a1e:	883b      	ldrh	r3, [r7, #0]
 8001a20:	085b      	lsrs	r3, r3, #1
 8001a22:	82fb      	strh	r3, [r7, #22]
	uint16_t xRadius = x + radius;
 8001a24:	88fa      	ldrh	r2, [r7, #6]
 8001a26:	8afb      	ldrh	r3, [r7, #22]
 8001a28:	4413      	add	r3, r2
 8001a2a:	82bb      	strh	r3, [r7, #20]
	uint16_t yRadius = y + radius;
 8001a2c:	88ba      	ldrh	r2, [r7, #4]
 8001a2e:	8afb      	ldrh	r3, [r7, #22]
 8001a30:	4413      	add	r3, r2
 8001a32:	827b      	strh	r3, [r7, #18]
	uint16_t doubleRadius = 2 * radius;
 8001a34:	8afb      	ldrh	r3, [r7, #22]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	823b      	strh	r3, [r7, #16]
	uint16_t innerRadius = radius - 2;
 8001a3a:	8afb      	ldrh	r3, [r7, #22]
 8001a3c:	3b02      	subs	r3, #2
 8001a3e:	81fb      	strh	r3, [r7, #14]


	ssd1306_SetColor(White);
 8001a40:	2001      	movs	r0, #1
 8001a42:	f7ff fad3 	bl	8000fec <ssd1306_SetColor>
	ssd1306_DrawCircleQuads(xRadius, yRadius, radius, 0b00000110);
 8001a46:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8001a4a:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8001a4e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001a52:	2306      	movs	r3, #6
 8001a54:	f7ff fea5 	bl	80017a2 <ssd1306_DrawCircleQuads>
	ssd1306_DrawHorizontalLine(xRadius, y, width - doubleRadius + 1);
 8001a58:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8001a5c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001a60:	887a      	ldrh	r2, [r7, #2]
 8001a62:	8a3b      	ldrh	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	3301      	adds	r3, #1
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	b21b      	sxth	r3, r3
 8001a6e:	461a      	mov	r2, r3
 8001a70:	f7ff fc06 	bl	8001280 <ssd1306_DrawHorizontalLine>
	ssd1306_DrawHorizontalLine(xRadius, y + height, width - doubleRadius + 1);
 8001a74:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8001a78:	88ba      	ldrh	r2, [r7, #4]
 8001a7a:	883b      	ldrh	r3, [r7, #0]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	b219      	sxth	r1, r3
 8001a82:	887a      	ldrh	r2, [r7, #2]
 8001a84:	8a3b      	ldrh	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	b21b      	sxth	r3, r3
 8001a90:	461a      	mov	r2, r3
 8001a92:	f7ff fbf5 	bl	8001280 <ssd1306_DrawHorizontalLine>
	ssd1306_DrawCircleQuads(x + width - radius, yRadius, radius, 0b00001001);
 8001a96:	88fa      	ldrh	r2, [r7, #6]
 8001a98:	887b      	ldrh	r3, [r7, #2]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	8afb      	ldrh	r3, [r7, #22]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	b218      	sxth	r0, r3
 8001aa6:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8001aaa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001aae:	2309      	movs	r3, #9
 8001ab0:	f7ff fe77 	bl	80017a2 <ssd1306_DrawCircleQuads>


	uint16_t maxProgressWidth = (width - doubleRadius + 1) * progress / 100;
 8001ab4:	887a      	ldrh	r2, [r7, #2]
 8001ab6:	8a3b      	ldrh	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	3301      	adds	r3, #1
 8001abc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001ac0:	fb02 f303 	mul.w	r3, r2, r3
 8001ac4:	4a17      	ldr	r2, [pc, #92]	; (8001b24 <ssd1306_DrawProgressBar+0x124>)
 8001ac6:	fb82 1203 	smull	r1, r2, r2, r3
 8001aca:	1152      	asrs	r2, r2, #5
 8001acc:	17db      	asrs	r3, r3, #31
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	81bb      	strh	r3, [r7, #12]


	ssd1306_FillCircle(xRadius, yRadius, innerRadius);
 8001ad2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001ad6:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8001ada:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff fdc9 	bl	8001676 <ssd1306_FillCircle>
	ssd1306_FillRect(xRadius + 1, y + 2, maxProgressWidth, height - 3);
 8001ae4:	8abb      	ldrh	r3, [r7, #20]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	b218      	sxth	r0, r3
 8001aec:	88bb      	ldrh	r3, [r7, #4]
 8001aee:	3302      	adds	r3, #2
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	b219      	sxth	r1, r3
 8001af4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001af8:	883b      	ldrh	r3, [r7, #0]
 8001afa:	3b03      	subs	r3, #3
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	b21b      	sxth	r3, r3
 8001b00:	f7ff fd8a 	bl	8001618 <ssd1306_FillRect>
	ssd1306_FillCircle(xRadius + maxProgressWidth, yRadius, innerRadius);
 8001b04:	8aba      	ldrh	r2, [r7, #20]
 8001b06:	89bb      	ldrh	r3, [r7, #12]
 8001b08:	4413      	add	r3, r2
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	b21b      	sxth	r3, r3
 8001b0e:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8001b12:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff fdad 	bl	8001676 <ssd1306_FillCircle>
}
 8001b1c:	bf00      	nop
 8001b1e:	371c      	adds	r7, #28
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd90      	pop	{r4, r7, pc}
 8001b24:	51eb851f 	.word	0x51eb851f

08001b28 <ssd1306_WriteChar>:
	}
}


char ssd1306_WriteChar(char ch, FontDef Font)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b088      	sub	sp, #32
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	1d3b      	adds	r3, r7, #4
 8001b30:	e883 0006 	stmia.w	r3, {r1, r2}
 8001b34:	4603      	mov	r3, r0
 8001b36:	73fb      	strb	r3, [r7, #15]
	uint32_t i, b, j;


	// Check remaining space on current line
	if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001b38:	f7ff fa3b 	bl	8000fb2 <width>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	461a      	mov	r2, r3
 8001b40:	4b41      	ldr	r3, [pc, #260]	; (8001c48 <ssd1306_WriteChar+0x120>)
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	4619      	mov	r1, r3
 8001b46:	793b      	ldrb	r3, [r7, #4]
 8001b48:	440b      	add	r3, r1
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	dd0a      	ble.n	8001b64 <ssd1306_WriteChar+0x3c>
		height() <= (SSD1306.CurrentY + Font.FontHeight))
 8001b4e:	f7ff fa37 	bl	8000fc0 <height>
 8001b52:	4603      	mov	r3, r0
 8001b54:	461a      	mov	r2, r3
 8001b56:	4b3c      	ldr	r3, [pc, #240]	; (8001c48 <ssd1306_WriteChar+0x120>)
 8001b58:	885b      	ldrh	r3, [r3, #2]
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	797b      	ldrb	r3, [r7, #5]
 8001b5e:	440b      	add	r3, r1
	if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001b60:	429a      	cmp	r2, r3
 8001b62:	dc01      	bgt.n	8001b68 <ssd1306_WriteChar+0x40>
	{
		// Not enough space on current line
		return 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	e06a      	b.n	8001c3e <ssd1306_WriteChar+0x116>
	}


	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61fb      	str	r3, [r7, #28]
 8001b6c:	e059      	b.n	8001c22 <ssd1306_WriteChar+0xfa>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	3b20      	subs	r3, #32
 8001b74:	7979      	ldrb	r1, [r7, #5]
 8001b76:	fb01 f303 	mul.w	r3, r1, r3
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	440b      	add	r3, r1
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	4413      	add	r3, r2
 8001b84:	881b      	ldrh	r3, [r3, #0]
 8001b86:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61bb      	str	r3, [r7, #24]
 8001b8c:	e041      	b.n	8001c12 <ssd1306_WriteChar+0xea>
		{
			if ((b << j) & 0x8000)
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d011      	beq.n	8001bc2 <ssd1306_WriteChar+0x9a>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, SSD1306.CurrentY + i);
 8001b9e:	4b2a      	ldr	r3, [pc, #168]	; (8001c48 <ssd1306_WriteChar+0x120>)
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	4413      	add	r3, r2
 8001baa:	b2d8      	uxtb	r0, r3
 8001bac:	4b26      	ldr	r3, [pc, #152]	; (8001c48 <ssd1306_WriteChar+0x120>)
 8001bae:	885b      	ldrh	r3, [r3, #2]
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	4619      	mov	r1, r3
 8001bbc:	f7ff faea 	bl	8001194 <ssd1306_DrawPixel>
 8001bc0:	e024      	b.n	8001c0c <ssd1306_WriteChar+0xe4>
			}
			else
			{
				SSD1306.Color = !SSD1306.Color;
 8001bc2:	4b21      	ldr	r3, [pc, #132]	; (8001c48 <ssd1306_WriteChar+0x120>)
 8001bc4:	795b      	ldrb	r3, [r3, #5]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	bf0c      	ite	eq
 8001bca:	2301      	moveq	r3, #1
 8001bcc:	2300      	movne	r3, #0
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4b1d      	ldr	r3, [pc, #116]	; (8001c48 <ssd1306_WriteChar+0x120>)
 8001bd4:	715a      	strb	r2, [r3, #5]
				ssd1306_DrawPixel(SSD1306.CurrentX + j, SSD1306.CurrentY + i);
 8001bd6:	4b1c      	ldr	r3, [pc, #112]	; (8001c48 <ssd1306_WriteChar+0x120>)
 8001bd8:	881b      	ldrh	r3, [r3, #0]
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	4413      	add	r3, r2
 8001be2:	b2d8      	uxtb	r0, r3
 8001be4:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <ssd1306_WriteChar+0x120>)
 8001be6:	885b      	ldrh	r3, [r3, #2]
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	4413      	add	r3, r2
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f7ff face 	bl	8001194 <ssd1306_DrawPixel>
				SSD1306.Color = !SSD1306.Color;
 8001bf8:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <ssd1306_WriteChar+0x120>)
 8001bfa:	795b      	ldrb	r3, [r3, #5]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	bf0c      	ite	eq
 8001c00:	2301      	moveq	r3, #1
 8001c02:	2300      	movne	r3, #0
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	461a      	mov	r2, r3
 8001c08:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <ssd1306_WriteChar+0x120>)
 8001c0a:	715a      	strb	r2, [r3, #5]
		for (j = 0; j < Font.FontWidth; j++)
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	61bb      	str	r3, [r7, #24]
 8001c12:	793b      	ldrb	r3, [r7, #4]
 8001c14:	461a      	mov	r2, r3
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d3b8      	bcc.n	8001b8e <ssd1306_WriteChar+0x66>
	for (i = 0; i < Font.FontHeight; i++)
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	61fb      	str	r3, [r7, #28]
 8001c22:	797b      	ldrb	r3, [r7, #5]
 8001c24:	461a      	mov	r2, r3
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d3a0      	bcc.n	8001b6e <ssd1306_WriteChar+0x46>
		}
	}


	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <ssd1306_WriteChar+0x120>)
 8001c2e:	881a      	ldrh	r2, [r3, #0]
 8001c30:	793b      	ldrb	r3, [r7, #4]
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	4413      	add	r3, r2
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	4b03      	ldr	r3, [pc, #12]	; (8001c48 <ssd1306_WriteChar+0x120>)
 8001c3a:	801a      	strh	r2, [r3, #0]


	// Return written char for validation
	return ch;
 8001c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3720      	adds	r7, #32
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	200002d4 	.word	0x200002d4

08001c4c <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	1d3b      	adds	r3, r7, #4
 8001c56:	e883 0006 	stmia.w	r3, {r1, r2}
	// Write until null-byte
	while (*str)
 8001c5a:	e012      	b.n	8001c82 <ssd1306_WriteString+0x36>
	{
		if (ssd1306_WriteChar(*str, Font) != *str)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	7818      	ldrb	r0, [r3, #0]
 8001c60:	1d3b      	adds	r3, r7, #4
 8001c62:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001c66:	f7ff ff5f 	bl	8001b28 <ssd1306_WriteChar>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d002      	beq.n	8001c7c <ssd1306_WriteString+0x30>
		{
			// Char could not be written
			return *str;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	e008      	b.n	8001c8e <ssd1306_WriteString+0x42>
		}


		// Next char
		str++;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	60fb      	str	r3, [r7, #12]
	while (*str)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1e8      	bne.n	8001c5c <ssd1306_WriteString+0x10>
	}


	// Everything ok
	return *str;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	781b      	ldrb	r3, [r3, #0]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	460a      	mov	r2, r1
 8001ca2:	71fb      	strb	r3, [r7, #7]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <ssd1306_SetCursor+0x2c>)
 8001cae:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8001cb0:	79bb      	ldrb	r3, [r7, #6]
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	4b03      	ldr	r3, [pc, #12]	; (8001cc4 <ssd1306_SetCursor+0x2c>)
 8001cb6:	805a      	strh	r2, [r3, #2]
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	200002d4 	.word	0x200002d4

08001cc8 <ssd1306_DisplayOn>:


void ssd1306_DisplayOn(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
	ssd1306_WriteCommand(DISPLAYON);
 8001ccc:	20af      	movs	r0, #175	; 0xaf
 8001cce:	f000 f81f 	bl	8001d10 <ssd1306_WriteCommand>
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <ssd1306_DisplayOff>:


void ssd1306_DisplayOff(void)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	af00      	add	r7, sp, #0
	ssd1306_WriteCommand(DISPLAYOFF);
 8001cda:	20ae      	movs	r0, #174	; 0xae
 8001cdc:	f000 f818 	bl	8001d10 <ssd1306_WriteCommand>
}
 8001ce0:	bf00      	nop
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <ssd1306_FlipScreenVertically>:
	ssd1306_WriteCommand(COMSCANINC);           //Reset screen rotation or mirroring
}


void ssd1306_FlipScreenVertically()
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
	ssd1306_WriteCommand(SEGREMAP | 0x01);
 8001ce8:	20a1      	movs	r0, #161	; 0xa1
 8001cea:	f000 f811 	bl	8001d10 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(COMSCANDEC);           //Rotate screen 180 Deg
 8001cee:	20c8      	movs	r0, #200	; 0xc8
 8001cf0:	f000 f80e 	bl	8001d10 <ssd1306_WriteCommand>
}
 8001cf4:	bf00      	nop
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <ssd1306_Clear>:
	ssd1306_WriteCommand(COMSCANDEC);           //Mirror screen
}


void ssd1306_Clear()
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
	memset(SSD1306_Buffer, 0, SSD1306_BUFFER_SIZE);
 8001cfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d00:	2100      	movs	r1, #0
 8001d02:	4802      	ldr	r0, [pc, #8]	; (8001d0c <ssd1306_Clear+0x14>)
 8001d04:	f002 fede 	bl	8004ac4 <memset>
}
 8001d08:	bf00      	nop
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	200002dc 	.word	0x200002dc

08001d10 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af04      	add	r7, sp, #16
 8001d16:	4603      	mov	r3, r0
 8001d18:	71fb      	strb	r3, [r7, #7]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8001d1a:	230a      	movs	r3, #10
 8001d1c:	9302      	str	r3, [sp, #8]
 8001d1e:	2301      	movs	r3, #1
 8001d20:	9301      	str	r3, [sp, #4]
 8001d22:	1dfb      	adds	r3, r7, #7
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	2301      	movs	r3, #1
 8001d28:	2200      	movs	r2, #0
 8001d2a:	2178      	movs	r1, #120	; 0x78
 8001d2c:	4803      	ldr	r0, [pc, #12]	; (8001d3c <ssd1306_WriteCommand+0x2c>)
 8001d2e:	f001 fd57 	bl	80037e0 <HAL_I2C_Mem_Write>
#endif
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	2000027c 	.word	0x2000027c

08001d40 <ssd1306_WriteData>:


static void ssd1306_WriteData(uint8_t* data, uint16_t size)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af04      	add	r7, sp, #16
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	807b      	strh	r3, [r7, #2]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size);
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size, 100);
 8001d4c:	2364      	movs	r3, #100	; 0x64
 8001d4e:	9302      	str	r3, [sp, #8]
 8001d50:	887b      	ldrh	r3, [r7, #2]
 8001d52:	9301      	str	r3, [sp, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	2301      	movs	r3, #1
 8001d5a:	2240      	movs	r2, #64	; 0x40
 8001d5c:	2178      	movs	r1, #120	; 0x78
 8001d5e:	4803      	ldr	r0, [pc, #12]	; (8001d6c <ssd1306_WriteData+0x2c>)
 8001d60:	f001 fd3e 	bl	80037e0 <HAL_I2C_Mem_Write>
#endif
}
 8001d64:	bf00      	nop
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	2000027c 	.word	0x2000027c

08001d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d76:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <HAL_MspInit+0x40>)
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	4a0d      	ldr	r2, [pc, #52]	; (8001db0 <HAL_MspInit+0x40>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6193      	str	r3, [r2, #24]
 8001d82:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <HAL_MspInit+0x40>)
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d8e:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <HAL_MspInit+0x40>)
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	4a07      	ldr	r2, [pc, #28]	; (8001db0 <HAL_MspInit+0x40>)
 8001d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d98:	61d3      	str	r3, [r2, #28]
 8001d9a:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <HAL_MspInit+0x40>)
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da2:	603b      	str	r3, [r7, #0]
 8001da4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr
 8001db0:	40021000 	.word	0x40021000

08001db4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b088      	sub	sp, #32
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbc:	f107 0310 	add.w	r3, r7, #16
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a2c      	ldr	r2, [pc, #176]	; (8001e80 <HAL_ADC_MspInit+0xcc>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d151      	bne.n	8001e78 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dd4:	4b2b      	ldr	r3, [pc, #172]	; (8001e84 <HAL_ADC_MspInit+0xd0>)
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	4a2a      	ldr	r2, [pc, #168]	; (8001e84 <HAL_ADC_MspInit+0xd0>)
 8001dda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dde:	6193      	str	r3, [r2, #24]
 8001de0:	4b28      	ldr	r3, [pc, #160]	; (8001e84 <HAL_ADC_MspInit+0xd0>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dec:	4b25      	ldr	r3, [pc, #148]	; (8001e84 <HAL_ADC_MspInit+0xd0>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	4a24      	ldr	r2, [pc, #144]	; (8001e84 <HAL_ADC_MspInit+0xd0>)
 8001df2:	f043 0304 	orr.w	r3, r3, #4
 8001df6:	6193      	str	r3, [r2, #24]
 8001df8:	4b22      	ldr	r3, [pc, #136]	; (8001e84 <HAL_ADC_MspInit+0xd0>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	60bb      	str	r3, [r7, #8]
 8001e02:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = PHOTORESISTOR_Pin|POTENTIOMETER_Pin;
 8001e04:	2303      	movs	r3, #3
 8001e06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0c:	f107 0310 	add.w	r3, r7, #16
 8001e10:	4619      	mov	r1, r3
 8001e12:	481d      	ldr	r0, [pc, #116]	; (8001e88 <HAL_ADC_MspInit+0xd4>)
 8001e14:	f001 fa04 	bl	8003220 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001e18:	4b1c      	ldr	r3, [pc, #112]	; (8001e8c <HAL_ADC_MspInit+0xd8>)
 8001e1a:	4a1d      	ldr	r2, [pc, #116]	; (8001e90 <HAL_ADC_MspInit+0xdc>)
 8001e1c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e1e:	4b1b      	ldr	r3, [pc, #108]	; (8001e8c <HAL_ADC_MspInit+0xd8>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e24:	4b19      	ldr	r3, [pc, #100]	; (8001e8c <HAL_ADC_MspInit+0xd8>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e2a:	4b18      	ldr	r3, [pc, #96]	; (8001e8c <HAL_ADC_MspInit+0xd8>)
 8001e2c:	2280      	movs	r2, #128	; 0x80
 8001e2e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e30:	4b16      	ldr	r3, [pc, #88]	; (8001e8c <HAL_ADC_MspInit+0xd8>)
 8001e32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e36:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e38:	4b14      	ldr	r3, [pc, #80]	; (8001e8c <HAL_ADC_MspInit+0xd8>)
 8001e3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e3e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e40:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <HAL_ADC_MspInit+0xd8>)
 8001e42:	2220      	movs	r2, #32
 8001e44:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e46:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <HAL_ADC_MspInit+0xd8>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e4c:	480f      	ldr	r0, [pc, #60]	; (8001e8c <HAL_ADC_MspInit+0xd8>)
 8001e4e:	f000 fff9 	bl	8002e44 <HAL_DMA_Init>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001e58:	f7ff f8a6 	bl	8000fa8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a0b      	ldr	r2, [pc, #44]	; (8001e8c <HAL_ADC_MspInit+0xd8>)
 8001e60:	621a      	str	r2, [r3, #32]
 8001e62:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <HAL_ADC_MspInit+0xd8>)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	2012      	movs	r0, #18
 8001e6e:	f000 ffb2 	bl	8002dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001e72:	2012      	movs	r0, #18
 8001e74:	f000 ffcb 	bl	8002e0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e78:	bf00      	nop
 8001e7a:	3720      	adds	r7, #32
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40012400 	.word	0x40012400
 8001e84:	40021000 	.word	0x40021000
 8001e88:	40010800 	.word	0x40010800
 8001e8c:	20000238 	.word	0x20000238
 8001e90:	40020008 	.word	0x40020008

08001e94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b088      	sub	sp, #32
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9c:	f107 0310 	add.w	r3, r7, #16
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a15      	ldr	r2, [pc, #84]	; (8001f04 <HAL_I2C_MspInit+0x70>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d123      	bne.n	8001efc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb4:	4b14      	ldr	r3, [pc, #80]	; (8001f08 <HAL_I2C_MspInit+0x74>)
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	4a13      	ldr	r2, [pc, #76]	; (8001f08 <HAL_I2C_MspInit+0x74>)
 8001eba:	f043 0308 	orr.w	r3, r3, #8
 8001ebe:	6193      	str	r3, [r2, #24]
 8001ec0:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <HAL_I2C_MspInit+0x74>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	f003 0308 	and.w	r3, r3, #8
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ecc:	23c0      	movs	r3, #192	; 0xc0
 8001ece:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ed0:	2312      	movs	r3, #18
 8001ed2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed8:	f107 0310 	add.w	r3, r7, #16
 8001edc:	4619      	mov	r1, r3
 8001ede:	480b      	ldr	r0, [pc, #44]	; (8001f0c <HAL_I2C_MspInit+0x78>)
 8001ee0:	f001 f99e 	bl	8003220 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ee4:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <HAL_I2C_MspInit+0x74>)
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	4a07      	ldr	r2, [pc, #28]	; (8001f08 <HAL_I2C_MspInit+0x74>)
 8001eea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001eee:	61d3      	str	r3, [r2, #28]
 8001ef0:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <HAL_I2C_MspInit+0x74>)
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001efc:	bf00      	nop
 8001efe:	3720      	adds	r7, #32
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40005400 	.word	0x40005400
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40010c00 	.word	0x40010c00

08001f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f14:	e7fe      	b.n	8001f14 <NMI_Handler+0x4>

08001f16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f16:	b480      	push	{r7}
 8001f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f1a:	e7fe      	b.n	8001f1a <HardFault_Handler+0x4>

08001f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f20:	e7fe      	b.n	8001f20 <MemManage_Handler+0x4>

08001f22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f26:	e7fe      	b.n	8001f26 <BusFault_Handler+0x4>

08001f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f2c:	e7fe      	b.n	8001f2c <UsageFault_Handler+0x4>

08001f2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr

08001f3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr

08001f46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f46:	b480      	push	{r7}
 8001f48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr

08001f52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f56:	f000 f98b 	bl	8002270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f64:	4802      	ldr	r0, [pc, #8]	; (8001f70 <DMA1_Channel1_IRQHandler+0x10>)
 8001f66:	f001 f827 	bl	8002fb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000238 	.word	0x20000238

08001f74 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001f78:	4802      	ldr	r0, [pc, #8]	; (8001f84 <ADC1_2_IRQHandler+0x10>)
 8001f7a:	f000 fb6f 	bl	800265c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000208 	.word	0x20000208

08001f88 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ON_OFF_Pin);
 8001f8c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001f90:	f001 faca 	bl	8003528 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <Display_Change_State>:

/* USER CODE BEGIN 1 */

void Display_Change_State(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
	static DISPLAY_STATE display_state = DISPLAY_ON;
	display_state = !display_state;
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <Display_Change_State+0x34>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	bf0c      	ite	eq
 8001fa4:	2301      	moveq	r3, #1
 8001fa6:	2300      	movne	r3, #0
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	461a      	mov	r2, r3
 8001fac:	4b07      	ldr	r3, [pc, #28]	; (8001fcc <Display_Change_State+0x34>)
 8001fae:	701a      	strb	r2, [r3, #0]

	switch(display_state)
 8001fb0:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <Display_Change_State+0x34>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d004      	beq.n	8001fc2 <Display_Change_State+0x2a>
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d105      	bne.n	8001fc8 <Display_Change_State+0x30>
	{
		case DISPLAY_ON:
		{
			ssd1306_DisplayOn();
 8001fbc:	f7ff fe84 	bl	8001cc8 <ssd1306_DisplayOn>
			break;
 8001fc0:	e002      	b.n	8001fc8 <Display_Change_State+0x30>
		}
		case DISPLAY_OFF:
		{
			ssd1306_DisplayOff();
 8001fc2:	f7ff fe88 	bl	8001cd6 <ssd1306_DisplayOff>
			break;
 8001fc6:	bf00      	nop
		}
	}
}
 8001fc8:	bf00      	nop
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	20000008 	.word	0x20000008

08001fd0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	80fb      	strh	r3, [r7, #6]
    static uint32_t last_interrupt_time = 0;
    uint32_t current_time = HAL_GetTick();
 8001fda:	f000 f95b 	bl	8002294 <HAL_GetTick>
 8001fde:	60f8      	str	r0, [r7, #12]

    if (current_time - last_interrupt_time < 200) {
 8001fe0:	4b09      	ldr	r3, [pc, #36]	; (8002008 <HAL_GPIO_EXTI_Callback+0x38>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2bc7      	cmp	r3, #199	; 0xc7
 8001fea:	d909      	bls.n	8002000 <HAL_GPIO_EXTI_Callback+0x30>
        return;
    }
    last_interrupt_time = current_time;
 8001fec:	4a06      	ldr	r2, [pc, #24]	; (8002008 <HAL_GPIO_EXTI_Callback+0x38>)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6013      	str	r3, [r2, #0]

	switch(GPIO_Pin)
 8001ff2:	88fb      	ldrh	r3, [r7, #6]
 8001ff4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ff8:	d103      	bne.n	8002002 <HAL_GPIO_EXTI_Callback+0x32>
	{
		case GPIO_PIN_15:
		{
			Display_Change_State();
 8001ffa:	f7ff ffcd 	bl	8001f98 <Display_Change_State>
			break;
 8001ffe:	e000      	b.n	8002002 <HAL_GPIO_EXTI_Callback+0x32>
        return;
 8002000:	bf00      	nop
		}
	}
}
 8002002:	3710      	adds	r7, #16
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	200006e0 	.word	0x200006e0

0800200c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  return 1;
 8002010:	2301      	movs	r3, #1
}
 8002012:	4618      	mov	r0, r3
 8002014:	46bd      	mov	sp, r7
 8002016:	bc80      	pop	{r7}
 8002018:	4770      	bx	lr

0800201a <_kill>:

int _kill(int pid, int sig)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b082      	sub	sp, #8
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
 8002022:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002024:	f002 fd24 	bl	8004a70 <__errno>
 8002028:	4603      	mov	r3, r0
 800202a:	2216      	movs	r2, #22
 800202c:	601a      	str	r2, [r3, #0]
  return -1;
 800202e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <_exit>:

void _exit (int status)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b082      	sub	sp, #8
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002042:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7ff ffe7 	bl	800201a <_kill>
  while (1) {}    /* Make sure we hang here */
 800204c:	e7fe      	b.n	800204c <_exit+0x12>

0800204e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b086      	sub	sp, #24
 8002052:	af00      	add	r7, sp, #0
 8002054:	60f8      	str	r0, [r7, #12]
 8002056:	60b9      	str	r1, [r7, #8]
 8002058:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
 800205e:	e00a      	b.n	8002076 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002060:	f3af 8000 	nop.w
 8002064:	4601      	mov	r1, r0
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	1c5a      	adds	r2, r3, #1
 800206a:	60ba      	str	r2, [r7, #8]
 800206c:	b2ca      	uxtb	r2, r1
 800206e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	3301      	adds	r3, #1
 8002074:	617b      	str	r3, [r7, #20]
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	429a      	cmp	r2, r3
 800207c:	dbf0      	blt.n	8002060 <_read+0x12>
  }

  return len;
 800207e:	687b      	ldr	r3, [r7, #4]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]
 8002098:	e009      	b.n	80020ae <_write+0x26>
  {
    __io_putchar(*ptr++);
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	1c5a      	adds	r2, r3, #1
 800209e:	60ba      	str	r2, [r7, #8]
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	3301      	adds	r3, #1
 80020ac:	617b      	str	r3, [r7, #20]
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	dbf1      	blt.n	800209a <_write+0x12>
  }
  return len;
 80020b6:	687b      	ldr	r3, [r7, #4]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <_close>:

int _close(int file)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr

080020d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020e6:	605a      	str	r2, [r3, #4]
  return 0;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr

080020f4 <_isatty>:

int _isatty(int file)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020fc:	2301      	movs	r3, #1
}
 80020fe:	4618      	mov	r0, r3
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr

08002108 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr

08002120 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002128:	4a14      	ldr	r2, [pc, #80]	; (800217c <_sbrk+0x5c>)
 800212a:	4b15      	ldr	r3, [pc, #84]	; (8002180 <_sbrk+0x60>)
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002134:	4b13      	ldr	r3, [pc, #76]	; (8002184 <_sbrk+0x64>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d102      	bne.n	8002142 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800213c:	4b11      	ldr	r3, [pc, #68]	; (8002184 <_sbrk+0x64>)
 800213e:	4a12      	ldr	r2, [pc, #72]	; (8002188 <_sbrk+0x68>)
 8002140:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002142:	4b10      	ldr	r3, [pc, #64]	; (8002184 <_sbrk+0x64>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	429a      	cmp	r2, r3
 800214e:	d207      	bcs.n	8002160 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002150:	f002 fc8e 	bl	8004a70 <__errno>
 8002154:	4603      	mov	r3, r0
 8002156:	220c      	movs	r2, #12
 8002158:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800215a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800215e:	e009      	b.n	8002174 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002160:	4b08      	ldr	r3, [pc, #32]	; (8002184 <_sbrk+0x64>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002166:	4b07      	ldr	r3, [pc, #28]	; (8002184 <_sbrk+0x64>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4413      	add	r3, r2
 800216e:	4a05      	ldr	r2, [pc, #20]	; (8002184 <_sbrk+0x64>)
 8002170:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002172:	68fb      	ldr	r3, [r7, #12]
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20005000 	.word	0x20005000
 8002180:	00000400 	.word	0x00000400
 8002184:	200006e4 	.word	0x200006e4
 8002188:	20000700 	.word	0x20000700

0800218c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr

08002198 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002198:	f7ff fff8 	bl	800218c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800219c:	480b      	ldr	r0, [pc, #44]	; (80021cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800219e:	490c      	ldr	r1, [pc, #48]	; (80021d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80021a0:	4a0c      	ldr	r2, [pc, #48]	; (80021d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80021a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021a4:	e002      	b.n	80021ac <LoopCopyDataInit>

080021a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021aa:	3304      	adds	r3, #4

080021ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021b0:	d3f9      	bcc.n	80021a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021b2:	4a09      	ldr	r2, [pc, #36]	; (80021d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80021b4:	4c09      	ldr	r4, [pc, #36]	; (80021dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021b8:	e001      	b.n	80021be <LoopFillZerobss>

080021ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021bc:	3204      	adds	r2, #4

080021be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021c0:	d3fb      	bcc.n	80021ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021c2:	f002 fc5b 	bl	8004a7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021c6:	f7fe fd6f 	bl	8000ca8 <main>
  bx lr
 80021ca:	4770      	bx	lr
  ldr r0, =_sdata
 80021cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021d0:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80021d4:	08009fbc 	.word	0x08009fbc
  ldr r2, =_sbss
 80021d8:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80021dc:	200006fc 	.word	0x200006fc

080021e0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021e0:	e7fe      	b.n	80021e0 <CAN1_RX1_IRQHandler>
	...

080021e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021e8:	4b08      	ldr	r3, [pc, #32]	; (800220c <HAL_Init+0x28>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a07      	ldr	r2, [pc, #28]	; (800220c <HAL_Init+0x28>)
 80021ee:	f043 0310 	orr.w	r3, r3, #16
 80021f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021f4:	2003      	movs	r0, #3
 80021f6:	f000 fde3 	bl	8002dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021fa:	200f      	movs	r0, #15
 80021fc:	f000 f808 	bl	8002210 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002200:	f7ff fdb6 	bl	8001d70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40022000 	.word	0x40022000

08002210 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002218:	4b12      	ldr	r3, [pc, #72]	; (8002264 <HAL_InitTick+0x54>)
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	4b12      	ldr	r3, [pc, #72]	; (8002268 <HAL_InitTick+0x58>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	4619      	mov	r1, r3
 8002222:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002226:	fbb3 f3f1 	udiv	r3, r3, r1
 800222a:	fbb2 f3f3 	udiv	r3, r2, r3
 800222e:	4618      	mov	r0, r3
 8002230:	f000 fdfb 	bl	8002e2a <HAL_SYSTICK_Config>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e00e      	b.n	800225c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b0f      	cmp	r3, #15
 8002242:	d80a      	bhi.n	800225a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002244:	2200      	movs	r2, #0
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800224c:	f000 fdc3 	bl	8002dd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002250:	4a06      	ldr	r2, [pc, #24]	; (800226c <HAL_InitTick+0x5c>)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002256:	2300      	movs	r3, #0
 8002258:	e000      	b.n	800225c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
}
 800225c:	4618      	mov	r0, r3
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	2000000c 	.word	0x2000000c
 8002268:	20000014 	.word	0x20000014
 800226c:	20000010 	.word	0x20000010

08002270 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002274:	4b05      	ldr	r3, [pc, #20]	; (800228c <HAL_IncTick+0x1c>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	461a      	mov	r2, r3
 800227a:	4b05      	ldr	r3, [pc, #20]	; (8002290 <HAL_IncTick+0x20>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4413      	add	r3, r2
 8002280:	4a03      	ldr	r2, [pc, #12]	; (8002290 <HAL_IncTick+0x20>)
 8002282:	6013      	str	r3, [r2, #0]
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr
 800228c:	20000014 	.word	0x20000014
 8002290:	200006e8 	.word	0x200006e8

08002294 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  return uwTick;
 8002298:	4b02      	ldr	r3, [pc, #8]	; (80022a4 <HAL_GetTick+0x10>)
 800229a:	681b      	ldr	r3, [r3, #0]
}
 800229c:	4618      	mov	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr
 80022a4:	200006e8 	.word	0x200006e8

080022a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022b0:	f7ff fff0 	bl	8002294 <HAL_GetTick>
 80022b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022c0:	d005      	beq.n	80022ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022c2:	4b0a      	ldr	r3, [pc, #40]	; (80022ec <HAL_Delay+0x44>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	461a      	mov	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	4413      	add	r3, r2
 80022cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022ce:	bf00      	nop
 80022d0:	f7ff ffe0 	bl	8002294 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d8f7      	bhi.n	80022d0 <HAL_Delay+0x28>
  {
  }
}
 80022e0:	bf00      	nop
 80022e2:	bf00      	nop
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000014 	.word	0x20000014

080022f0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80022fc:	2300      	movs	r3, #0
 80022fe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002300:	2300      	movs	r3, #0
 8002302:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002304:	2300      	movs	r3, #0
 8002306:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e0be      	b.n	8002490 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231c:	2b00      	cmp	r3, #0
 800231e:	d109      	bne.n	8002334 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7ff fd40 	bl	8001db4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 fbc7 	bl	8002ac8 <ADC_ConversionStop_Disable>
 800233a:	4603      	mov	r3, r0
 800233c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002342:	f003 0310 	and.w	r3, r3, #16
 8002346:	2b00      	cmp	r3, #0
 8002348:	f040 8099 	bne.w	800247e <HAL_ADC_Init+0x18e>
 800234c:	7dfb      	ldrb	r3, [r7, #23]
 800234e:	2b00      	cmp	r3, #0
 8002350:	f040 8095 	bne.w	800247e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002358:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800235c:	f023 0302 	bic.w	r3, r3, #2
 8002360:	f043 0202 	orr.w	r2, r3, #2
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002370:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	7b1b      	ldrb	r3, [r3, #12]
 8002376:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002378:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	4313      	orrs	r3, r2
 800237e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002388:	d003      	beq.n	8002392 <HAL_ADC_Init+0xa2>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d102      	bne.n	8002398 <HAL_ADC_Init+0xa8>
 8002392:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002396:	e000      	b.n	800239a <HAL_ADC_Init+0xaa>
 8002398:	2300      	movs	r3, #0
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	4313      	orrs	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	7d1b      	ldrb	r3, [r3, #20]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d119      	bne.n	80023dc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	7b1b      	ldrb	r3, [r3, #12]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d109      	bne.n	80023c4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	3b01      	subs	r3, #1
 80023b6:	035a      	lsls	r2, r3, #13
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023c0:	613b      	str	r3, [r7, #16]
 80023c2:	e00b      	b.n	80023dc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c8:	f043 0220 	orr.w	r2, r3, #32
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d4:	f043 0201 	orr.w	r2, r3, #1
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	4b28      	ldr	r3, [pc, #160]	; (8002498 <HAL_ADC_Init+0x1a8>)
 80023f8:	4013      	ands	r3, r2
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6812      	ldr	r2, [r2, #0]
 80023fe:	68b9      	ldr	r1, [r7, #8]
 8002400:	430b      	orrs	r3, r1
 8002402:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800240c:	d003      	beq.n	8002416 <HAL_ADC_Init+0x126>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d104      	bne.n	8002420 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	3b01      	subs	r3, #1
 800241c:	051b      	lsls	r3, r3, #20
 800241e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002426:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	430a      	orrs	r2, r1
 8002432:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689a      	ldr	r2, [r3, #8]
 800243a:	4b18      	ldr	r3, [pc, #96]	; (800249c <HAL_ADC_Init+0x1ac>)
 800243c:	4013      	ands	r3, r2
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	429a      	cmp	r2, r3
 8002442:	d10b      	bne.n	800245c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244e:	f023 0303 	bic.w	r3, r3, #3
 8002452:	f043 0201 	orr.w	r2, r3, #1
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800245a:	e018      	b.n	800248e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002460:	f023 0312 	bic.w	r3, r3, #18
 8002464:	f043 0210 	orr.w	r2, r3, #16
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002470:	f043 0201 	orr.w	r2, r3, #1
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800247c:	e007      	b.n	800248e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002482:	f043 0210 	orr.w	r2, r3, #16
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800248e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	ffe1f7fd 	.word	0xffe1f7fd
 800249c:	ff1f0efe 	.word	0xff1f0efe

080024a0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024ac:	2300      	movs	r3, #0
 80024ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a64      	ldr	r2, [pc, #400]	; (8002648 <HAL_ADC_Start_DMA+0x1a8>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d004      	beq.n	80024c4 <HAL_ADC_Start_DMA+0x24>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a63      	ldr	r2, [pc, #396]	; (800264c <HAL_ADC_Start_DMA+0x1ac>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d106      	bne.n	80024d2 <HAL_ADC_Start_DMA+0x32>
 80024c4:	4b60      	ldr	r3, [pc, #384]	; (8002648 <HAL_ADC_Start_DMA+0x1a8>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f040 80b3 	bne.w	8002638 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d101      	bne.n	80024e0 <HAL_ADC_Start_DMA+0x40>
 80024dc:	2302      	movs	r3, #2
 80024de:	e0ae      	b.n	800263e <HAL_ADC_Start_DMA+0x19e>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f000 fa93 	bl	8002a14 <ADC_Enable>
 80024ee:	4603      	mov	r3, r0
 80024f0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80024f2:	7dfb      	ldrb	r3, [r7, #23]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f040 809a 	bne.w	800262e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002502:	f023 0301 	bic.w	r3, r3, #1
 8002506:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a4e      	ldr	r2, [pc, #312]	; (800264c <HAL_ADC_Start_DMA+0x1ac>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d105      	bne.n	8002524 <HAL_ADC_Start_DMA+0x84>
 8002518:	4b4b      	ldr	r3, [pc, #300]	; (8002648 <HAL_ADC_Start_DMA+0x1a8>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d115      	bne.n	8002550 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002528:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800253a:	2b00      	cmp	r3, #0
 800253c:	d026      	beq.n	800258c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002542:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002546:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800254e:	e01d      	b.n	800258c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002554:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a39      	ldr	r2, [pc, #228]	; (8002648 <HAL_ADC_Start_DMA+0x1a8>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d004      	beq.n	8002570 <HAL_ADC_Start_DMA+0xd0>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a38      	ldr	r2, [pc, #224]	; (800264c <HAL_ADC_Start_DMA+0x1ac>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d10d      	bne.n	800258c <HAL_ADC_Start_DMA+0xec>
 8002570:	4b35      	ldr	r3, [pc, #212]	; (8002648 <HAL_ADC_Start_DMA+0x1a8>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002578:	2b00      	cmp	r3, #0
 800257a:	d007      	beq.n	800258c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002580:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002584:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002590:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d006      	beq.n	80025a6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259c:	f023 0206 	bic.w	r2, r3, #6
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80025a4:	e002      	b.n	80025ac <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	4a25      	ldr	r2, [pc, #148]	; (8002650 <HAL_ADC_Start_DMA+0x1b0>)
 80025ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	4a24      	ldr	r2, [pc, #144]	; (8002654 <HAL_ADC_Start_DMA+0x1b4>)
 80025c2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	4a23      	ldr	r2, [pc, #140]	; (8002658 <HAL_ADC_Start_DMA+0x1b8>)
 80025ca:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f06f 0202 	mvn.w	r2, #2
 80025d4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025e4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6a18      	ldr	r0, [r3, #32]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	334c      	adds	r3, #76	; 0x4c
 80025f0:	4619      	mov	r1, r3
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f000 fc7f 	bl	8002ef8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002604:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002608:	d108      	bne.n	800261c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002618:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800261a:	e00f      	b.n	800263c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800262a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800262c:	e006      	b.n	800263c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002636:	e001      	b.n	800263c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800263c:	7dfb      	ldrb	r3, [r7, #23]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40012400 	.word	0x40012400
 800264c:	40012800 	.word	0x40012800
 8002650:	08002b4b 	.word	0x08002b4b
 8002654:	08002bc7 	.word	0x08002bc7
 8002658:	08002be3 	.word	0x08002be3

0800265c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	f003 0320 	and.w	r3, r3, #32
 800267a:	2b00      	cmp	r3, #0
 800267c:	d03e      	beq.n	80026fc <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d039      	beq.n	80026fc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268c:	f003 0310 	and.w	r3, r3, #16
 8002690:	2b00      	cmp	r3, #0
 8002692:	d105      	bne.n	80026a0 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002698:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80026aa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80026ae:	d11d      	bne.n	80026ec <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d119      	bne.n	80026ec <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	685a      	ldr	r2, [r3, #4]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 0220 	bic.w	r2, r2, #32
 80026c6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d105      	bne.n	80026ec <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e4:	f043 0201 	orr.w	r2, r3, #1
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 f874 	bl	80027da <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f06f 0212 	mvn.w	r2, #18
 80026fa:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002702:	2b00      	cmp	r3, #0
 8002704:	d04d      	beq.n	80027a2 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b00      	cmp	r3, #0
 800270e:	d048      	beq.n	80027a2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002714:	f003 0310 	and.w	r3, r3, #16
 8002718:	2b00      	cmp	r3, #0
 800271a:	d105      	bne.n	8002728 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002720:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8002732:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8002736:	d012      	beq.n	800275e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002742:	2b00      	cmp	r3, #0
 8002744:	d125      	bne.n	8002792 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002750:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002754:	d11d      	bne.n	8002792 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800275a:	2b00      	cmp	r3, #0
 800275c:	d119      	bne.n	8002792 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800276c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002772:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002782:	2b00      	cmp	r3, #0
 8002784:	d105      	bne.n	8002792 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278a:	f043 0201 	orr.w	r2, r3, #1
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 fa3f 	bl	8002c16 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f06f 020c 	mvn.w	r2, #12
 80027a0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d012      	beq.n	80027d2 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00d      	beq.n	80027d2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f81b 	bl	80027fe <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f06f 0201 	mvn.w	r2, #1
 80027d0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80027d2:	bf00      	nop
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr

080027ec <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr

080027fe <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr

08002810 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	bc80      	pop	{r7}
 8002820:	4770      	bx	lr
	...

08002824 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800282e:	2300      	movs	r3, #0
 8002830:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002832:	2300      	movs	r3, #0
 8002834:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800283c:	2b01      	cmp	r3, #1
 800283e:	d101      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x20>
 8002840:	2302      	movs	r3, #2
 8002842:	e0dc      	b.n	80029fe <HAL_ADC_ConfigChannel+0x1da>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	2b06      	cmp	r3, #6
 8002852:	d81c      	bhi.n	800288e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	3b05      	subs	r3, #5
 8002866:	221f      	movs	r2, #31
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	43db      	mvns	r3, r3
 800286e:	4019      	ands	r1, r3
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	6818      	ldr	r0, [r3, #0]
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	4613      	mov	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	3b05      	subs	r3, #5
 8002880:	fa00 f203 	lsl.w	r2, r0, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	430a      	orrs	r2, r1
 800288a:	635a      	str	r2, [r3, #52]	; 0x34
 800288c:	e03c      	b.n	8002908 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b0c      	cmp	r3, #12
 8002894:	d81c      	bhi.n	80028d0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	4613      	mov	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	3b23      	subs	r3, #35	; 0x23
 80028a8:	221f      	movs	r2, #31
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43db      	mvns	r3, r3
 80028b0:	4019      	ands	r1, r3
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	6818      	ldr	r0, [r3, #0]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	3b23      	subs	r3, #35	; 0x23
 80028c2:	fa00 f203 	lsl.w	r2, r0, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	631a      	str	r2, [r3, #48]	; 0x30
 80028ce:	e01b      	b.n	8002908 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	4613      	mov	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	3b41      	subs	r3, #65	; 0x41
 80028e2:	221f      	movs	r2, #31
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	4019      	ands	r1, r3
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	6818      	ldr	r0, [r3, #0]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	4613      	mov	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4413      	add	r3, r2
 80028fa:	3b41      	subs	r3, #65	; 0x41
 80028fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2b09      	cmp	r3, #9
 800290e:	d91c      	bls.n	800294a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68d9      	ldr	r1, [r3, #12]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	4613      	mov	r3, r2
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	4413      	add	r3, r2
 8002920:	3b1e      	subs	r3, #30
 8002922:	2207      	movs	r2, #7
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	4019      	ands	r1, r3
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	6898      	ldr	r0, [r3, #8]
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	4613      	mov	r3, r2
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	4413      	add	r3, r2
 800293a:	3b1e      	subs	r3, #30
 800293c:	fa00 f203 	lsl.w	r2, r0, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	430a      	orrs	r2, r1
 8002946:	60da      	str	r2, [r3, #12]
 8002948:	e019      	b.n	800297e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6919      	ldr	r1, [r3, #16]
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	4613      	mov	r3, r2
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	4413      	add	r3, r2
 800295a:	2207      	movs	r2, #7
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	43db      	mvns	r3, r3
 8002962:	4019      	ands	r1, r3
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	6898      	ldr	r0, [r3, #8]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	4613      	mov	r3, r2
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	4413      	add	r3, r2
 8002972:	fa00 f203 	lsl.w	r2, r0, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	430a      	orrs	r2, r1
 800297c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2b10      	cmp	r3, #16
 8002984:	d003      	beq.n	800298e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800298a:	2b11      	cmp	r3, #17
 800298c:	d132      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a1d      	ldr	r2, [pc, #116]	; (8002a08 <HAL_ADC_ConfigChannel+0x1e4>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d125      	bne.n	80029e4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d126      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80029b4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2b10      	cmp	r3, #16
 80029bc:	d11a      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029be:	4b13      	ldr	r3, [pc, #76]	; (8002a0c <HAL_ADC_ConfigChannel+0x1e8>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a13      	ldr	r2, [pc, #76]	; (8002a10 <HAL_ADC_ConfigChannel+0x1ec>)
 80029c4:	fba2 2303 	umull	r2, r3, r2, r3
 80029c8:	0c9a      	lsrs	r2, r3, #18
 80029ca:	4613      	mov	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029d4:	e002      	b.n	80029dc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	3b01      	subs	r3, #1
 80029da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1f9      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x1b2>
 80029e2:	e007      	b.n	80029f4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e8:	f043 0220 	orr.w	r2, r3, #32
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr
 8002a08:	40012400 	.word	0x40012400
 8002a0c:	2000000c 	.word	0x2000000c
 8002a10:	431bde83 	.word	0x431bde83

08002a14 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002a20:	2300      	movs	r3, #0
 8002a22:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d040      	beq.n	8002ab4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f042 0201 	orr.w	r2, r2, #1
 8002a40:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a42:	4b1f      	ldr	r3, [pc, #124]	; (8002ac0 <ADC_Enable+0xac>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a1f      	ldr	r2, [pc, #124]	; (8002ac4 <ADC_Enable+0xb0>)
 8002a48:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4c:	0c9b      	lsrs	r3, r3, #18
 8002a4e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002a50:	e002      	b.n	8002a58 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	3b01      	subs	r3, #1
 8002a56:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f9      	bne.n	8002a52 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a5e:	f7ff fc19 	bl	8002294 <HAL_GetTick>
 8002a62:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002a64:	e01f      	b.n	8002aa6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a66:	f7ff fc15 	bl	8002294 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d918      	bls.n	8002aa6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d011      	beq.n	8002aa6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a86:	f043 0210 	orr.w	r2, r3, #16
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a92:	f043 0201 	orr.w	r2, r3, #1
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e007      	b.n	8002ab6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d1d8      	bne.n	8002a66 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	2000000c 	.word	0x2000000c
 8002ac4:	431bde83 	.word	0x431bde83

08002ac8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d12e      	bne.n	8002b40 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 0201 	bic.w	r2, r2, #1
 8002af0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002af2:	f7ff fbcf 	bl	8002294 <HAL_GetTick>
 8002af6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002af8:	e01b      	b.n	8002b32 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002afa:	f7ff fbcb 	bl	8002294 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d914      	bls.n	8002b32 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d10d      	bne.n	8002b32 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1a:	f043 0210 	orr.w	r2, r3, #16
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b26:	f043 0201 	orr.w	r2, r3, #1
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e007      	b.n	8002b42 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d0dc      	beq.n	8002afa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b084      	sub	sp, #16
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b56:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d127      	bne.n	8002bb4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b68:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002b7a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002b7e:	d115      	bne.n	8002bac <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d111      	bne.n	8002bac <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d105      	bne.n	8002bac <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba4:	f043 0201 	orr.w	r2, r3, #1
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f7ff fe14 	bl	80027da <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002bb2:	e004      	b.n	8002bbe <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	4798      	blx	r3
}
 8002bbe:	bf00      	nop
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b084      	sub	sp, #16
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f7ff fe09 	bl	80027ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bda:	bf00      	nop
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b084      	sub	sp, #16
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bee:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c00:	f043 0204 	orr.w	r2, r3, #4
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f7ff fe01 	bl	8002810 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c0e:	bf00      	nop
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bc80      	pop	{r7}
 8002c26:	4770      	bx	lr

08002c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c38:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <__NVIC_SetPriorityGrouping+0x44>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c44:	4013      	ands	r3, r2
 8002c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c5a:	4a04      	ldr	r2, [pc, #16]	; (8002c6c <__NVIC_SetPriorityGrouping+0x44>)
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	60d3      	str	r3, [r2, #12]
}
 8002c60:	bf00      	nop
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bc80      	pop	{r7}
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	e000ed00 	.word	0xe000ed00

08002c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c74:	4b04      	ldr	r3, [pc, #16]	; (8002c88 <__NVIC_GetPriorityGrouping+0x18>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	0a1b      	lsrs	r3, r3, #8
 8002c7a:	f003 0307 	and.w	r3, r3, #7
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	e000ed00 	.word	0xe000ed00

08002c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	db0b      	blt.n	8002cb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	f003 021f 	and.w	r2, r3, #31
 8002ca4:	4906      	ldr	r1, [pc, #24]	; (8002cc0 <__NVIC_EnableIRQ+0x34>)
 8002ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002caa:	095b      	lsrs	r3, r3, #5
 8002cac:	2001      	movs	r0, #1
 8002cae:	fa00 f202 	lsl.w	r2, r0, r2
 8002cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr
 8002cc0:	e000e100 	.word	0xe000e100

08002cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	6039      	str	r1, [r7, #0]
 8002cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	db0a      	blt.n	8002cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	490c      	ldr	r1, [pc, #48]	; (8002d10 <__NVIC_SetPriority+0x4c>)
 8002cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce2:	0112      	lsls	r2, r2, #4
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cec:	e00a      	b.n	8002d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	4908      	ldr	r1, [pc, #32]	; (8002d14 <__NVIC_SetPriority+0x50>)
 8002cf4:	79fb      	ldrb	r3, [r7, #7]
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	3b04      	subs	r3, #4
 8002cfc:	0112      	lsls	r2, r2, #4
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	440b      	add	r3, r1
 8002d02:	761a      	strb	r2, [r3, #24]
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	e000e100 	.word	0xe000e100
 8002d14:	e000ed00 	.word	0xe000ed00

08002d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b089      	sub	sp, #36	; 0x24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	f1c3 0307 	rsb	r3, r3, #7
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	bf28      	it	cs
 8002d36:	2304      	movcs	r3, #4
 8002d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	2b06      	cmp	r3, #6
 8002d40:	d902      	bls.n	8002d48 <NVIC_EncodePriority+0x30>
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	3b03      	subs	r3, #3
 8002d46:	e000      	b.n	8002d4a <NVIC_EncodePriority+0x32>
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43da      	mvns	r2, r3
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	401a      	ands	r2, r3
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6a:	43d9      	mvns	r1, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d70:	4313      	orrs	r3, r2
         );
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3724      	adds	r7, #36	; 0x24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr

08002d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d8c:	d301      	bcc.n	8002d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e00f      	b.n	8002db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d92:	4a0a      	ldr	r2, [pc, #40]	; (8002dbc <SysTick_Config+0x40>)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d9a:	210f      	movs	r1, #15
 8002d9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002da0:	f7ff ff90 	bl	8002cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002da4:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <SysTick_Config+0x40>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002daa:	4b04      	ldr	r3, [pc, #16]	; (8002dbc <SysTick_Config+0x40>)
 8002dac:	2207      	movs	r2, #7
 8002dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	e000e010 	.word	0xe000e010

08002dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f7ff ff2d 	bl	8002c28 <__NVIC_SetPriorityGrouping>
}
 8002dce:	bf00      	nop
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b086      	sub	sp, #24
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	4603      	mov	r3, r0
 8002dde:	60b9      	str	r1, [r7, #8]
 8002de0:	607a      	str	r2, [r7, #4]
 8002de2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002de8:	f7ff ff42 	bl	8002c70 <__NVIC_GetPriorityGrouping>
 8002dec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	68b9      	ldr	r1, [r7, #8]
 8002df2:	6978      	ldr	r0, [r7, #20]
 8002df4:	f7ff ff90 	bl	8002d18 <NVIC_EncodePriority>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dfe:	4611      	mov	r1, r2
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff ff5f 	bl	8002cc4 <__NVIC_SetPriority>
}
 8002e06:	bf00      	nop
 8002e08:	3718      	adds	r7, #24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b082      	sub	sp, #8
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	4603      	mov	r3, r0
 8002e16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff ff35 	bl	8002c8c <__NVIC_EnableIRQ>
}
 8002e22:	bf00      	nop
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b082      	sub	sp, #8
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7ff ffa2 	bl	8002d7c <SysTick_Config>
 8002e38:	4603      	mov	r3, r0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
	...

08002e44 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e043      	b.n	8002ee2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	4b22      	ldr	r3, [pc, #136]	; (8002eec <HAL_DMA_Init+0xa8>)
 8002e62:	4413      	add	r3, r2
 8002e64:	4a22      	ldr	r2, [pc, #136]	; (8002ef0 <HAL_DMA_Init+0xac>)
 8002e66:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6a:	091b      	lsrs	r3, r3, #4
 8002e6c:	009a      	lsls	r2, r3, #2
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a1f      	ldr	r2, [pc, #124]	; (8002ef4 <HAL_DMA_Init+0xb0>)
 8002e76:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002e8e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002e92:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002e9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ea8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr
 8002eec:	bffdfff8 	.word	0xbffdfff8
 8002ef0:	cccccccd 	.word	0xcccccccd
 8002ef4:	40020000 	.word	0x40020000

08002ef8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
 8002f04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f06:	2300      	movs	r3, #0
 8002f08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d101      	bne.n	8002f18 <HAL_DMA_Start_IT+0x20>
 8002f14:	2302      	movs	r3, #2
 8002f16:	e04b      	b.n	8002fb0 <HAL_DMA_Start_IT+0xb8>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d13a      	bne.n	8002fa2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0201 	bic.w	r2, r2, #1
 8002f48:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	68b9      	ldr	r1, [r7, #8]
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f000 f937 	bl	80031c4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d008      	beq.n	8002f70 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f042 020e 	orr.w	r2, r2, #14
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	e00f      	b.n	8002f90 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0204 	bic.w	r2, r2, #4
 8002f7e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 020a 	orr.w	r2, r2, #10
 8002f8e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 0201 	orr.w	r2, r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	e005      	b.n	8002fae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002faa:	2302      	movs	r3, #2
 8002fac:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd4:	2204      	movs	r2, #4
 8002fd6:	409a      	lsls	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d04f      	beq.n	8003080 <HAL_DMA_IRQHandler+0xc8>
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	f003 0304 	and.w	r3, r3, #4
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d04a      	beq.n	8003080 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0320 	and.w	r3, r3, #32
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d107      	bne.n	8003008 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0204 	bic.w	r2, r2, #4
 8003006:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a66      	ldr	r2, [pc, #408]	; (80031a8 <HAL_DMA_IRQHandler+0x1f0>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d029      	beq.n	8003066 <HAL_DMA_IRQHandler+0xae>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a65      	ldr	r2, [pc, #404]	; (80031ac <HAL_DMA_IRQHandler+0x1f4>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d022      	beq.n	8003062 <HAL_DMA_IRQHandler+0xaa>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a63      	ldr	r2, [pc, #396]	; (80031b0 <HAL_DMA_IRQHandler+0x1f8>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d01a      	beq.n	800305c <HAL_DMA_IRQHandler+0xa4>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a62      	ldr	r2, [pc, #392]	; (80031b4 <HAL_DMA_IRQHandler+0x1fc>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d012      	beq.n	8003056 <HAL_DMA_IRQHandler+0x9e>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a60      	ldr	r2, [pc, #384]	; (80031b8 <HAL_DMA_IRQHandler+0x200>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d00a      	beq.n	8003050 <HAL_DMA_IRQHandler+0x98>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a5f      	ldr	r2, [pc, #380]	; (80031bc <HAL_DMA_IRQHandler+0x204>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d102      	bne.n	800304a <HAL_DMA_IRQHandler+0x92>
 8003044:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003048:	e00e      	b.n	8003068 <HAL_DMA_IRQHandler+0xb0>
 800304a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800304e:	e00b      	b.n	8003068 <HAL_DMA_IRQHandler+0xb0>
 8003050:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003054:	e008      	b.n	8003068 <HAL_DMA_IRQHandler+0xb0>
 8003056:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800305a:	e005      	b.n	8003068 <HAL_DMA_IRQHandler+0xb0>
 800305c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003060:	e002      	b.n	8003068 <HAL_DMA_IRQHandler+0xb0>
 8003062:	2340      	movs	r3, #64	; 0x40
 8003064:	e000      	b.n	8003068 <HAL_DMA_IRQHandler+0xb0>
 8003066:	2304      	movs	r3, #4
 8003068:	4a55      	ldr	r2, [pc, #340]	; (80031c0 <HAL_DMA_IRQHandler+0x208>)
 800306a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 8094 	beq.w	800319e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800307e:	e08e      	b.n	800319e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	2202      	movs	r2, #2
 8003086:	409a      	lsls	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4013      	ands	r3, r2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d056      	beq.n	800313e <HAL_DMA_IRQHandler+0x186>
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d051      	beq.n	800313e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0320 	and.w	r3, r3, #32
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d10b      	bne.n	80030c0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 020a 	bic.w	r2, r2, #10
 80030b6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a38      	ldr	r2, [pc, #224]	; (80031a8 <HAL_DMA_IRQHandler+0x1f0>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d029      	beq.n	800311e <HAL_DMA_IRQHandler+0x166>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a37      	ldr	r2, [pc, #220]	; (80031ac <HAL_DMA_IRQHandler+0x1f4>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d022      	beq.n	800311a <HAL_DMA_IRQHandler+0x162>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a35      	ldr	r2, [pc, #212]	; (80031b0 <HAL_DMA_IRQHandler+0x1f8>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d01a      	beq.n	8003114 <HAL_DMA_IRQHandler+0x15c>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a34      	ldr	r2, [pc, #208]	; (80031b4 <HAL_DMA_IRQHandler+0x1fc>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d012      	beq.n	800310e <HAL_DMA_IRQHandler+0x156>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a32      	ldr	r2, [pc, #200]	; (80031b8 <HAL_DMA_IRQHandler+0x200>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d00a      	beq.n	8003108 <HAL_DMA_IRQHandler+0x150>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a31      	ldr	r2, [pc, #196]	; (80031bc <HAL_DMA_IRQHandler+0x204>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d102      	bne.n	8003102 <HAL_DMA_IRQHandler+0x14a>
 80030fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003100:	e00e      	b.n	8003120 <HAL_DMA_IRQHandler+0x168>
 8003102:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003106:	e00b      	b.n	8003120 <HAL_DMA_IRQHandler+0x168>
 8003108:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800310c:	e008      	b.n	8003120 <HAL_DMA_IRQHandler+0x168>
 800310e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003112:	e005      	b.n	8003120 <HAL_DMA_IRQHandler+0x168>
 8003114:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003118:	e002      	b.n	8003120 <HAL_DMA_IRQHandler+0x168>
 800311a:	2320      	movs	r3, #32
 800311c:	e000      	b.n	8003120 <HAL_DMA_IRQHandler+0x168>
 800311e:	2302      	movs	r3, #2
 8003120:	4a27      	ldr	r2, [pc, #156]	; (80031c0 <HAL_DMA_IRQHandler+0x208>)
 8003122:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003130:	2b00      	cmp	r3, #0
 8003132:	d034      	beq.n	800319e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800313c:	e02f      	b.n	800319e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	2208      	movs	r2, #8
 8003144:	409a      	lsls	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	4013      	ands	r3, r2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d028      	beq.n	80031a0 <HAL_DMA_IRQHandler+0x1e8>
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	f003 0308 	and.w	r3, r3, #8
 8003154:	2b00      	cmp	r3, #0
 8003156:	d023      	beq.n	80031a0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 020e 	bic.w	r2, r2, #14
 8003166:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003170:	2101      	movs	r1, #1
 8003172:	fa01 f202 	lsl.w	r2, r1, r2
 8003176:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003192:	2b00      	cmp	r3, #0
 8003194:	d004      	beq.n	80031a0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	4798      	blx	r3
    }
  }
  return;
 800319e:	bf00      	nop
 80031a0:	bf00      	nop
}
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	40020008 	.word	0x40020008
 80031ac:	4002001c 	.word	0x4002001c
 80031b0:	40020030 	.word	0x40020030
 80031b4:	40020044 	.word	0x40020044
 80031b8:	40020058 	.word	0x40020058
 80031bc:	4002006c 	.word	0x4002006c
 80031c0:	40020000 	.word	0x40020000

080031c4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
 80031d0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031da:	2101      	movs	r1, #1
 80031dc:	fa01 f202 	lsl.w	r2, r1, r2
 80031e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b10      	cmp	r3, #16
 80031f0:	d108      	bne.n	8003204 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003202:	e007      	b.n	8003214 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	60da      	str	r2, [r3, #12]
}
 8003214:	bf00      	nop
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	bc80      	pop	{r7}
 800321c:	4770      	bx	lr
	...

08003220 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003220:	b480      	push	{r7}
 8003222:	b08b      	sub	sp, #44	; 0x2c
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800322a:	2300      	movs	r3, #0
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800322e:	2300      	movs	r3, #0
 8003230:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003232:	e169      	b.n	8003508 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003234:	2201      	movs	r2, #1
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	69fa      	ldr	r2, [r7, #28]
 8003244:	4013      	ands	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	429a      	cmp	r2, r3
 800324e:	f040 8158 	bne.w	8003502 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	4a9a      	ldr	r2, [pc, #616]	; (80034c0 <HAL_GPIO_Init+0x2a0>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d05e      	beq.n	800331a <HAL_GPIO_Init+0xfa>
 800325c:	4a98      	ldr	r2, [pc, #608]	; (80034c0 <HAL_GPIO_Init+0x2a0>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d875      	bhi.n	800334e <HAL_GPIO_Init+0x12e>
 8003262:	4a98      	ldr	r2, [pc, #608]	; (80034c4 <HAL_GPIO_Init+0x2a4>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d058      	beq.n	800331a <HAL_GPIO_Init+0xfa>
 8003268:	4a96      	ldr	r2, [pc, #600]	; (80034c4 <HAL_GPIO_Init+0x2a4>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d86f      	bhi.n	800334e <HAL_GPIO_Init+0x12e>
 800326e:	4a96      	ldr	r2, [pc, #600]	; (80034c8 <HAL_GPIO_Init+0x2a8>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d052      	beq.n	800331a <HAL_GPIO_Init+0xfa>
 8003274:	4a94      	ldr	r2, [pc, #592]	; (80034c8 <HAL_GPIO_Init+0x2a8>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d869      	bhi.n	800334e <HAL_GPIO_Init+0x12e>
 800327a:	4a94      	ldr	r2, [pc, #592]	; (80034cc <HAL_GPIO_Init+0x2ac>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d04c      	beq.n	800331a <HAL_GPIO_Init+0xfa>
 8003280:	4a92      	ldr	r2, [pc, #584]	; (80034cc <HAL_GPIO_Init+0x2ac>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d863      	bhi.n	800334e <HAL_GPIO_Init+0x12e>
 8003286:	4a92      	ldr	r2, [pc, #584]	; (80034d0 <HAL_GPIO_Init+0x2b0>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d046      	beq.n	800331a <HAL_GPIO_Init+0xfa>
 800328c:	4a90      	ldr	r2, [pc, #576]	; (80034d0 <HAL_GPIO_Init+0x2b0>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d85d      	bhi.n	800334e <HAL_GPIO_Init+0x12e>
 8003292:	2b12      	cmp	r3, #18
 8003294:	d82a      	bhi.n	80032ec <HAL_GPIO_Init+0xcc>
 8003296:	2b12      	cmp	r3, #18
 8003298:	d859      	bhi.n	800334e <HAL_GPIO_Init+0x12e>
 800329a:	a201      	add	r2, pc, #4	; (adr r2, 80032a0 <HAL_GPIO_Init+0x80>)
 800329c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a0:	0800331b 	.word	0x0800331b
 80032a4:	080032f5 	.word	0x080032f5
 80032a8:	08003307 	.word	0x08003307
 80032ac:	08003349 	.word	0x08003349
 80032b0:	0800334f 	.word	0x0800334f
 80032b4:	0800334f 	.word	0x0800334f
 80032b8:	0800334f 	.word	0x0800334f
 80032bc:	0800334f 	.word	0x0800334f
 80032c0:	0800334f 	.word	0x0800334f
 80032c4:	0800334f 	.word	0x0800334f
 80032c8:	0800334f 	.word	0x0800334f
 80032cc:	0800334f 	.word	0x0800334f
 80032d0:	0800334f 	.word	0x0800334f
 80032d4:	0800334f 	.word	0x0800334f
 80032d8:	0800334f 	.word	0x0800334f
 80032dc:	0800334f 	.word	0x0800334f
 80032e0:	0800334f 	.word	0x0800334f
 80032e4:	080032fd 	.word	0x080032fd
 80032e8:	08003311 	.word	0x08003311
 80032ec:	4a79      	ldr	r2, [pc, #484]	; (80034d4 <HAL_GPIO_Init+0x2b4>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d013      	beq.n	800331a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80032f2:	e02c      	b.n	800334e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	623b      	str	r3, [r7, #32]
          break;
 80032fa:	e029      	b.n	8003350 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	3304      	adds	r3, #4
 8003302:	623b      	str	r3, [r7, #32]
          break;
 8003304:	e024      	b.n	8003350 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	3308      	adds	r3, #8
 800330c:	623b      	str	r3, [r7, #32]
          break;
 800330e:	e01f      	b.n	8003350 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	330c      	adds	r3, #12
 8003316:	623b      	str	r3, [r7, #32]
          break;
 8003318:	e01a      	b.n	8003350 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d102      	bne.n	8003328 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003322:	2304      	movs	r3, #4
 8003324:	623b      	str	r3, [r7, #32]
          break;
 8003326:	e013      	b.n	8003350 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d105      	bne.n	800333c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003330:	2308      	movs	r3, #8
 8003332:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	69fa      	ldr	r2, [r7, #28]
 8003338:	611a      	str	r2, [r3, #16]
          break;
 800333a:	e009      	b.n	8003350 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800333c:	2308      	movs	r3, #8
 800333e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	69fa      	ldr	r2, [r7, #28]
 8003344:	615a      	str	r2, [r3, #20]
          break;
 8003346:	e003      	b.n	8003350 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003348:	2300      	movs	r3, #0
 800334a:	623b      	str	r3, [r7, #32]
          break;
 800334c:	e000      	b.n	8003350 <HAL_GPIO_Init+0x130>
          break;
 800334e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	2bff      	cmp	r3, #255	; 0xff
 8003354:	d801      	bhi.n	800335a <HAL_GPIO_Init+0x13a>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	e001      	b.n	800335e <HAL_GPIO_Init+0x13e>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	3304      	adds	r3, #4
 800335e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	2bff      	cmp	r3, #255	; 0xff
 8003364:	d802      	bhi.n	800336c <HAL_GPIO_Init+0x14c>
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	e002      	b.n	8003372 <HAL_GPIO_Init+0x152>
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	3b08      	subs	r3, #8
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	210f      	movs	r1, #15
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	fa01 f303 	lsl.w	r3, r1, r3
 8003380:	43db      	mvns	r3, r3
 8003382:	401a      	ands	r2, r3
 8003384:	6a39      	ldr	r1, [r7, #32]
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	fa01 f303 	lsl.w	r3, r1, r3
 800338c:	431a      	orrs	r2, r3
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 80b1 	beq.w	8003502 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80033a0:	4b4d      	ldr	r3, [pc, #308]	; (80034d8 <HAL_GPIO_Init+0x2b8>)
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	4a4c      	ldr	r2, [pc, #304]	; (80034d8 <HAL_GPIO_Init+0x2b8>)
 80033a6:	f043 0301 	orr.w	r3, r3, #1
 80033aa:	6193      	str	r3, [r2, #24]
 80033ac:	4b4a      	ldr	r3, [pc, #296]	; (80034d8 <HAL_GPIO_Init+0x2b8>)
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	60bb      	str	r3, [r7, #8]
 80033b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80033b8:	4a48      	ldr	r2, [pc, #288]	; (80034dc <HAL_GPIO_Init+0x2bc>)
 80033ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033bc:	089b      	lsrs	r3, r3, #2
 80033be:	3302      	adds	r3, #2
 80033c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	f003 0303 	and.w	r3, r3, #3
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	220f      	movs	r2, #15
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	43db      	mvns	r3, r3
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	4013      	ands	r3, r2
 80033da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a40      	ldr	r2, [pc, #256]	; (80034e0 <HAL_GPIO_Init+0x2c0>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d013      	beq.n	800340c <HAL_GPIO_Init+0x1ec>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a3f      	ldr	r2, [pc, #252]	; (80034e4 <HAL_GPIO_Init+0x2c4>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d00d      	beq.n	8003408 <HAL_GPIO_Init+0x1e8>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a3e      	ldr	r2, [pc, #248]	; (80034e8 <HAL_GPIO_Init+0x2c8>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d007      	beq.n	8003404 <HAL_GPIO_Init+0x1e4>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a3d      	ldr	r2, [pc, #244]	; (80034ec <HAL_GPIO_Init+0x2cc>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d101      	bne.n	8003400 <HAL_GPIO_Init+0x1e0>
 80033fc:	2303      	movs	r3, #3
 80033fe:	e006      	b.n	800340e <HAL_GPIO_Init+0x1ee>
 8003400:	2304      	movs	r3, #4
 8003402:	e004      	b.n	800340e <HAL_GPIO_Init+0x1ee>
 8003404:	2302      	movs	r3, #2
 8003406:	e002      	b.n	800340e <HAL_GPIO_Init+0x1ee>
 8003408:	2301      	movs	r3, #1
 800340a:	e000      	b.n	800340e <HAL_GPIO_Init+0x1ee>
 800340c:	2300      	movs	r3, #0
 800340e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003410:	f002 0203 	and.w	r2, r2, #3
 8003414:	0092      	lsls	r2, r2, #2
 8003416:	4093      	lsls	r3, r2
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	4313      	orrs	r3, r2
 800341c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800341e:	492f      	ldr	r1, [pc, #188]	; (80034dc <HAL_GPIO_Init+0x2bc>)
 8003420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003422:	089b      	lsrs	r3, r3, #2
 8003424:	3302      	adds	r3, #2
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d006      	beq.n	8003446 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003438:	4b2d      	ldr	r3, [pc, #180]	; (80034f0 <HAL_GPIO_Init+0x2d0>)
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	492c      	ldr	r1, [pc, #176]	; (80034f0 <HAL_GPIO_Init+0x2d0>)
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	4313      	orrs	r3, r2
 8003442:	608b      	str	r3, [r1, #8]
 8003444:	e006      	b.n	8003454 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003446:	4b2a      	ldr	r3, [pc, #168]	; (80034f0 <HAL_GPIO_Init+0x2d0>)
 8003448:	689a      	ldr	r2, [r3, #8]
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	43db      	mvns	r3, r3
 800344e:	4928      	ldr	r1, [pc, #160]	; (80034f0 <HAL_GPIO_Init+0x2d0>)
 8003450:	4013      	ands	r3, r2
 8003452:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d006      	beq.n	800346e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003460:	4b23      	ldr	r3, [pc, #140]	; (80034f0 <HAL_GPIO_Init+0x2d0>)
 8003462:	68da      	ldr	r2, [r3, #12]
 8003464:	4922      	ldr	r1, [pc, #136]	; (80034f0 <HAL_GPIO_Init+0x2d0>)
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	4313      	orrs	r3, r2
 800346a:	60cb      	str	r3, [r1, #12]
 800346c:	e006      	b.n	800347c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800346e:	4b20      	ldr	r3, [pc, #128]	; (80034f0 <HAL_GPIO_Init+0x2d0>)
 8003470:	68da      	ldr	r2, [r3, #12]
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	43db      	mvns	r3, r3
 8003476:	491e      	ldr	r1, [pc, #120]	; (80034f0 <HAL_GPIO_Init+0x2d0>)
 8003478:	4013      	ands	r3, r2
 800347a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d006      	beq.n	8003496 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003488:	4b19      	ldr	r3, [pc, #100]	; (80034f0 <HAL_GPIO_Init+0x2d0>)
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	4918      	ldr	r1, [pc, #96]	; (80034f0 <HAL_GPIO_Init+0x2d0>)
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	4313      	orrs	r3, r2
 8003492:	604b      	str	r3, [r1, #4]
 8003494:	e006      	b.n	80034a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003496:	4b16      	ldr	r3, [pc, #88]	; (80034f0 <HAL_GPIO_Init+0x2d0>)
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	43db      	mvns	r3, r3
 800349e:	4914      	ldr	r1, [pc, #80]	; (80034f0 <HAL_GPIO_Init+0x2d0>)
 80034a0:	4013      	ands	r3, r2
 80034a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d021      	beq.n	80034f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80034b0:	4b0f      	ldr	r3, [pc, #60]	; (80034f0 <HAL_GPIO_Init+0x2d0>)
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	490e      	ldr	r1, [pc, #56]	; (80034f0 <HAL_GPIO_Init+0x2d0>)
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	600b      	str	r3, [r1, #0]
 80034bc:	e021      	b.n	8003502 <HAL_GPIO_Init+0x2e2>
 80034be:	bf00      	nop
 80034c0:	10320000 	.word	0x10320000
 80034c4:	10310000 	.word	0x10310000
 80034c8:	10220000 	.word	0x10220000
 80034cc:	10210000 	.word	0x10210000
 80034d0:	10120000 	.word	0x10120000
 80034d4:	10110000 	.word	0x10110000
 80034d8:	40021000 	.word	0x40021000
 80034dc:	40010000 	.word	0x40010000
 80034e0:	40010800 	.word	0x40010800
 80034e4:	40010c00 	.word	0x40010c00
 80034e8:	40011000 	.word	0x40011000
 80034ec:	40011400 	.word	0x40011400
 80034f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80034f4:	4b0b      	ldr	r3, [pc, #44]	; (8003524 <HAL_GPIO_Init+0x304>)
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	43db      	mvns	r3, r3
 80034fc:	4909      	ldr	r1, [pc, #36]	; (8003524 <HAL_GPIO_Init+0x304>)
 80034fe:	4013      	ands	r3, r2
 8003500:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	3301      	adds	r3, #1
 8003506:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	fa22 f303 	lsr.w	r3, r2, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	f47f ae8e 	bne.w	8003234 <HAL_GPIO_Init+0x14>
  }
}
 8003518:	bf00      	nop
 800351a:	bf00      	nop
 800351c:	372c      	adds	r7, #44	; 0x2c
 800351e:	46bd      	mov	sp, r7
 8003520:	bc80      	pop	{r7}
 8003522:	4770      	bx	lr
 8003524:	40010400 	.word	0x40010400

08003528 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	4603      	mov	r3, r0
 8003530:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003532:	4b08      	ldr	r3, [pc, #32]	; (8003554 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003534:	695a      	ldr	r2, [r3, #20]
 8003536:	88fb      	ldrh	r3, [r7, #6]
 8003538:	4013      	ands	r3, r2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d006      	beq.n	800354c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800353e:	4a05      	ldr	r2, [pc, #20]	; (8003554 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003540:	88fb      	ldrh	r3, [r7, #6]
 8003542:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003544:	88fb      	ldrh	r3, [r7, #6]
 8003546:	4618      	mov	r0, r3
 8003548:	f7fe fd42 	bl	8001fd0 <HAL_GPIO_EXTI_Callback>
  }
}
 800354c:	bf00      	nop
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40010400 	.word	0x40010400

08003558 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e12b      	b.n	80037c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d106      	bne.n	8003584 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7fe fc88 	bl	8001e94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2224      	movs	r2, #36	; 0x24
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0201 	bic.w	r2, r2, #1
 800359a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035bc:	f001 f970 	bl	80048a0 <HAL_RCC_GetPCLK1Freq>
 80035c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	4a81      	ldr	r2, [pc, #516]	; (80037cc <HAL_I2C_Init+0x274>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d807      	bhi.n	80035dc <HAL_I2C_Init+0x84>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4a80      	ldr	r2, [pc, #512]	; (80037d0 <HAL_I2C_Init+0x278>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	bf94      	ite	ls
 80035d4:	2301      	movls	r3, #1
 80035d6:	2300      	movhi	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	e006      	b.n	80035ea <HAL_I2C_Init+0x92>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4a7d      	ldr	r2, [pc, #500]	; (80037d4 <HAL_I2C_Init+0x27c>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	bf94      	ite	ls
 80035e4:	2301      	movls	r3, #1
 80035e6:	2300      	movhi	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e0e7      	b.n	80037c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	4a78      	ldr	r2, [pc, #480]	; (80037d8 <HAL_I2C_Init+0x280>)
 80035f6:	fba2 2303 	umull	r2, r3, r2, r3
 80035fa:	0c9b      	lsrs	r3, r3, #18
 80035fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	430a      	orrs	r2, r1
 8003610:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	4a6a      	ldr	r2, [pc, #424]	; (80037cc <HAL_I2C_Init+0x274>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d802      	bhi.n	800362c <HAL_I2C_Init+0xd4>
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	3301      	adds	r3, #1
 800362a:	e009      	b.n	8003640 <HAL_I2C_Init+0xe8>
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003632:	fb02 f303 	mul.w	r3, r2, r3
 8003636:	4a69      	ldr	r2, [pc, #420]	; (80037dc <HAL_I2C_Init+0x284>)
 8003638:	fba2 2303 	umull	r2, r3, r2, r3
 800363c:	099b      	lsrs	r3, r3, #6
 800363e:	3301      	adds	r3, #1
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6812      	ldr	r2, [r2, #0]
 8003644:	430b      	orrs	r3, r1
 8003646:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003652:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	495c      	ldr	r1, [pc, #368]	; (80037cc <HAL_I2C_Init+0x274>)
 800365c:	428b      	cmp	r3, r1
 800365e:	d819      	bhi.n	8003694 <HAL_I2C_Init+0x13c>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	1e59      	subs	r1, r3, #1
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	fbb1 f3f3 	udiv	r3, r1, r3
 800366e:	1c59      	adds	r1, r3, #1
 8003670:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003674:	400b      	ands	r3, r1
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00a      	beq.n	8003690 <HAL_I2C_Init+0x138>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	1e59      	subs	r1, r3, #1
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	fbb1 f3f3 	udiv	r3, r1, r3
 8003688:	3301      	adds	r3, #1
 800368a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800368e:	e051      	b.n	8003734 <HAL_I2C_Init+0x1dc>
 8003690:	2304      	movs	r3, #4
 8003692:	e04f      	b.n	8003734 <HAL_I2C_Init+0x1dc>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d111      	bne.n	80036c0 <HAL_I2C_Init+0x168>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	1e58      	subs	r0, r3, #1
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6859      	ldr	r1, [r3, #4]
 80036a4:	460b      	mov	r3, r1
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	440b      	add	r3, r1
 80036aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ae:	3301      	adds	r3, #1
 80036b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	bf0c      	ite	eq
 80036b8:	2301      	moveq	r3, #1
 80036ba:	2300      	movne	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	e012      	b.n	80036e6 <HAL_I2C_Init+0x18e>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	1e58      	subs	r0, r3, #1
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6859      	ldr	r1, [r3, #4]
 80036c8:	460b      	mov	r3, r1
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	440b      	add	r3, r1
 80036ce:	0099      	lsls	r1, r3, #2
 80036d0:	440b      	add	r3, r1
 80036d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80036d6:	3301      	adds	r3, #1
 80036d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036dc:	2b00      	cmp	r3, #0
 80036de:	bf0c      	ite	eq
 80036e0:	2301      	moveq	r3, #1
 80036e2:	2300      	movne	r3, #0
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <HAL_I2C_Init+0x196>
 80036ea:	2301      	movs	r3, #1
 80036ec:	e022      	b.n	8003734 <HAL_I2C_Init+0x1dc>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10e      	bne.n	8003714 <HAL_I2C_Init+0x1bc>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	1e58      	subs	r0, r3, #1
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6859      	ldr	r1, [r3, #4]
 80036fe:	460b      	mov	r3, r1
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	440b      	add	r3, r1
 8003704:	fbb0 f3f3 	udiv	r3, r0, r3
 8003708:	3301      	adds	r3, #1
 800370a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800370e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003712:	e00f      	b.n	8003734 <HAL_I2C_Init+0x1dc>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	1e58      	subs	r0, r3, #1
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6859      	ldr	r1, [r3, #4]
 800371c:	460b      	mov	r3, r1
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	440b      	add	r3, r1
 8003722:	0099      	lsls	r1, r3, #2
 8003724:	440b      	add	r3, r1
 8003726:	fbb0 f3f3 	udiv	r3, r0, r3
 800372a:	3301      	adds	r3, #1
 800372c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003730:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003734:	6879      	ldr	r1, [r7, #4]
 8003736:	6809      	ldr	r1, [r1, #0]
 8003738:	4313      	orrs	r3, r2
 800373a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	69da      	ldr	r2, [r3, #28]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	431a      	orrs	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	430a      	orrs	r2, r1
 8003756:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003762:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6911      	ldr	r1, [r2, #16]
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	68d2      	ldr	r2, [r2, #12]
 800376e:	4311      	orrs	r1, r2
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	6812      	ldr	r2, [r2, #0]
 8003774:	430b      	orrs	r3, r1
 8003776:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	695a      	ldr	r2, [r3, #20]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	431a      	orrs	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0201 	orr.w	r2, r2, #1
 80037a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2220      	movs	r2, #32
 80037ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	000186a0 	.word	0x000186a0
 80037d0:	001e847f 	.word	0x001e847f
 80037d4:	003d08ff 	.word	0x003d08ff
 80037d8:	431bde83 	.word	0x431bde83
 80037dc:	10624dd3 	.word	0x10624dd3

080037e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b088      	sub	sp, #32
 80037e4:	af02      	add	r7, sp, #8
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	4608      	mov	r0, r1
 80037ea:	4611      	mov	r1, r2
 80037ec:	461a      	mov	r2, r3
 80037ee:	4603      	mov	r3, r0
 80037f0:	817b      	strh	r3, [r7, #10]
 80037f2:	460b      	mov	r3, r1
 80037f4:	813b      	strh	r3, [r7, #8]
 80037f6:	4613      	mov	r3, r2
 80037f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037fa:	f7fe fd4b 	bl	8002294 <HAL_GetTick>
 80037fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b20      	cmp	r3, #32
 800380a:	f040 80d9 	bne.w	80039c0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	2319      	movs	r3, #25
 8003814:	2201      	movs	r2, #1
 8003816:	496d      	ldr	r1, [pc, #436]	; (80039cc <HAL_I2C_Mem_Write+0x1ec>)
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 fa9f 	bl	8003d5c <I2C_WaitOnFlagUntilTimeout>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003824:	2302      	movs	r3, #2
 8003826:	e0cc      	b.n	80039c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800382e:	2b01      	cmp	r3, #1
 8003830:	d101      	bne.n	8003836 <HAL_I2C_Mem_Write+0x56>
 8003832:	2302      	movs	r3, #2
 8003834:	e0c5      	b.n	80039c2 <HAL_I2C_Mem_Write+0x1e2>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	2b01      	cmp	r3, #1
 800384a:	d007      	beq.n	800385c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0201 	orr.w	r2, r2, #1
 800385a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800386a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2221      	movs	r2, #33	; 0x21
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2240      	movs	r2, #64	; 0x40
 8003878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6a3a      	ldr	r2, [r7, #32]
 8003886:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800388c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003892:	b29a      	uxth	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4a4d      	ldr	r2, [pc, #308]	; (80039d0 <HAL_I2C_Mem_Write+0x1f0>)
 800389c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800389e:	88f8      	ldrh	r0, [r7, #6]
 80038a0:	893a      	ldrh	r2, [r7, #8]
 80038a2:	8979      	ldrh	r1, [r7, #10]
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	9301      	str	r3, [sp, #4]
 80038a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	4603      	mov	r3, r0
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f000 f9be 	bl	8003c30 <I2C_RequestMemoryWrite>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d052      	beq.n	8003960 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e081      	b.n	80039c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f000 fb64 	bl	8003f90 <I2C_WaitOnTXEFlagUntilTimeout>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00d      	beq.n	80038ea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d107      	bne.n	80038e6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e06b      	b.n	80039c2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	781a      	ldrb	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	1c5a      	adds	r2, r3, #1
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003904:	3b01      	subs	r3, #1
 8003906:	b29a      	uxth	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003910:	b29b      	uxth	r3, r3
 8003912:	3b01      	subs	r3, #1
 8003914:	b29a      	uxth	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b04      	cmp	r3, #4
 8003926:	d11b      	bne.n	8003960 <HAL_I2C_Mem_Write+0x180>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392c:	2b00      	cmp	r3, #0
 800392e:	d017      	beq.n	8003960 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	781a      	ldrb	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	1c5a      	adds	r2, r3, #1
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394a:	3b01      	subs	r3, #1
 800394c:	b29a      	uxth	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003956:	b29b      	uxth	r3, r3
 8003958:	3b01      	subs	r3, #1
 800395a:	b29a      	uxth	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1aa      	bne.n	80038be <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 fb57 	bl	8004020 <I2C_WaitOnBTFFlagUntilTimeout>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00d      	beq.n	8003994 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397c:	2b04      	cmp	r3, #4
 800397e:	d107      	bne.n	8003990 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800398e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e016      	b.n	80039c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039bc:	2300      	movs	r3, #0
 80039be:	e000      	b.n	80039c2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80039c0:	2302      	movs	r3, #2
  }
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3718      	adds	r7, #24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	00100002 	.word	0x00100002
 80039d0:	ffff0000 	.word	0xffff0000

080039d4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b08a      	sub	sp, #40	; 0x28
 80039d8:	af02      	add	r7, sp, #8
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	607a      	str	r2, [r7, #4]
 80039de:	603b      	str	r3, [r7, #0]
 80039e0:	460b      	mov	r3, r1
 80039e2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80039e4:	f7fe fc56 	bl	8002294 <HAL_GetTick>
 80039e8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80039ea:	2300      	movs	r3, #0
 80039ec:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b20      	cmp	r3, #32
 80039f8:	f040 8111 	bne.w	8003c1e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	2319      	movs	r3, #25
 8003a02:	2201      	movs	r2, #1
 8003a04:	4988      	ldr	r1, [pc, #544]	; (8003c28 <HAL_I2C_IsDeviceReady+0x254>)
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 f9a8 	bl	8003d5c <I2C_WaitOnFlagUntilTimeout>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003a12:	2302      	movs	r3, #2
 8003a14:	e104      	b.n	8003c20 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d101      	bne.n	8003a24 <HAL_I2C_IsDeviceReady+0x50>
 8003a20:	2302      	movs	r3, #2
 8003a22:	e0fd      	b.n	8003c20 <HAL_I2C_IsDeviceReady+0x24c>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d007      	beq.n	8003a4a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f042 0201 	orr.w	r2, r2, #1
 8003a48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2224      	movs	r2, #36	; 0x24
 8003a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4a70      	ldr	r2, [pc, #448]	; (8003c2c <HAL_I2C_IsDeviceReady+0x258>)
 8003a6c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a7c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 f966 	bl	8003d5c <I2C_WaitOnFlagUntilTimeout>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00d      	beq.n	8003ab2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aa4:	d103      	bne.n	8003aae <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aac:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e0b6      	b.n	8003c20 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ab2:	897b      	ldrh	r3, [r7, #10]
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ac0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003ac2:	f7fe fbe7 	bl	8002294 <HAL_GetTick>
 8003ac6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	bf0c      	ite	eq
 8003ad6:	2301      	moveq	r3, #1
 8003ad8:	2300      	movne	r3, #0
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aec:	bf0c      	ite	eq
 8003aee:	2301      	moveq	r3, #1
 8003af0:	2300      	movne	r3, #0
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003af6:	e025      	b.n	8003b44 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003af8:	f7fe fbcc 	bl	8002294 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	683a      	ldr	r2, [r7, #0]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d302      	bcc.n	8003b0e <HAL_I2C_IsDeviceReady+0x13a>
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d103      	bne.n	8003b16 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	22a0      	movs	r2, #160	; 0xa0
 8003b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	bf0c      	ite	eq
 8003b24:	2301      	moveq	r3, #1
 8003b26:	2300      	movne	r3, #0
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b3a:	bf0c      	ite	eq
 8003b3c:	2301      	moveq	r3, #1
 8003b3e:	2300      	movne	r3, #0
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2ba0      	cmp	r3, #160	; 0xa0
 8003b4e:	d005      	beq.n	8003b5c <HAL_I2C_IsDeviceReady+0x188>
 8003b50:	7dfb      	ldrb	r3, [r7, #23]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d102      	bne.n	8003b5c <HAL_I2C_IsDeviceReady+0x188>
 8003b56:	7dbb      	ldrb	r3, [r7, #22]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0cd      	beq.n	8003af8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d129      	bne.n	8003bc6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b80:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b82:	2300      	movs	r3, #0
 8003b84:	613b      	str	r3, [r7, #16]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	613b      	str	r3, [r7, #16]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	613b      	str	r3, [r7, #16]
 8003b96:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	9300      	str	r3, [sp, #0]
 8003b9c:	2319      	movs	r3, #25
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	4921      	ldr	r1, [pc, #132]	; (8003c28 <HAL_I2C_IsDeviceReady+0x254>)
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f000 f8da 	bl	8003d5c <I2C_WaitOnFlagUntilTimeout>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e036      	b.n	8003c20 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	e02c      	b.n	8003c20 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bd4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bde:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	2319      	movs	r3, #25
 8003be6:	2201      	movs	r2, #1
 8003be8:	490f      	ldr	r1, [pc, #60]	; (8003c28 <HAL_I2C_IsDeviceReady+0x254>)
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f000 f8b6 	bl	8003d5c <I2C_WaitOnFlagUntilTimeout>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e012      	b.n	8003c20 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	f4ff af32 	bcc.w	8003a6e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e000      	b.n	8003c20 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003c1e:	2302      	movs	r3, #2
  }
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3720      	adds	r7, #32
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	00100002 	.word	0x00100002
 8003c2c:	ffff0000 	.word	0xffff0000

08003c30 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b088      	sub	sp, #32
 8003c34:	af02      	add	r7, sp, #8
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	4608      	mov	r0, r1
 8003c3a:	4611      	mov	r1, r2
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	4603      	mov	r3, r0
 8003c40:	817b      	strh	r3, [r7, #10]
 8003c42:	460b      	mov	r3, r1
 8003c44:	813b      	strh	r3, [r7, #8]
 8003c46:	4613      	mov	r3, r2
 8003c48:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	6a3b      	ldr	r3, [r7, #32]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 f878 	bl	8003d5c <I2C_WaitOnFlagUntilTimeout>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00d      	beq.n	8003c8e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c80:	d103      	bne.n	8003c8a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c88:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e05f      	b.n	8003d4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c8e:	897b      	ldrh	r3, [r7, #10]
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	461a      	mov	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	6a3a      	ldr	r2, [r7, #32]
 8003ca2:	492d      	ldr	r1, [pc, #180]	; (8003d58 <I2C_RequestMemoryWrite+0x128>)
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f000 f8d3 	bl	8003e50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e04c      	b.n	8003d4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	617b      	str	r3, [r7, #20]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	617b      	str	r3, [r7, #20]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	617b      	str	r3, [r7, #20]
 8003cc8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ccc:	6a39      	ldr	r1, [r7, #32]
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 f95e 	bl	8003f90 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00d      	beq.n	8003cf6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cde:	2b04      	cmp	r3, #4
 8003ce0:	d107      	bne.n	8003cf2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cf0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e02b      	b.n	8003d4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cf6:	88fb      	ldrh	r3, [r7, #6]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d105      	bne.n	8003d08 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cfc:	893b      	ldrh	r3, [r7, #8]
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	611a      	str	r2, [r3, #16]
 8003d06:	e021      	b.n	8003d4c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d08:	893b      	ldrh	r3, [r7, #8]
 8003d0a:	0a1b      	lsrs	r3, r3, #8
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	b2da      	uxtb	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d18:	6a39      	ldr	r1, [r7, #32]
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f000 f938 	bl	8003f90 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00d      	beq.n	8003d42 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	d107      	bne.n	8003d3e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e005      	b.n	8003d4e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d42:	893b      	ldrh	r3, [r7, #8]
 8003d44:	b2da      	uxtb	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3718      	adds	r7, #24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	00010002 	.word	0x00010002

08003d5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	603b      	str	r3, [r7, #0]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d6c:	e048      	b.n	8003e00 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d74:	d044      	beq.n	8003e00 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d76:	f7fe fa8d 	bl	8002294 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d302      	bcc.n	8003d8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d139      	bne.n	8003e00 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	0c1b      	lsrs	r3, r3, #16
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d10d      	bne.n	8003db2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	43da      	mvns	r2, r3
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	4013      	ands	r3, r2
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	bf0c      	ite	eq
 8003da8:	2301      	moveq	r3, #1
 8003daa:	2300      	movne	r3, #0
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	461a      	mov	r2, r3
 8003db0:	e00c      	b.n	8003dcc <I2C_WaitOnFlagUntilTimeout+0x70>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	43da      	mvns	r2, r3
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	bf0c      	ite	eq
 8003dc4:	2301      	moveq	r3, #1
 8003dc6:	2300      	movne	r3, #0
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	461a      	mov	r2, r3
 8003dcc:	79fb      	ldrb	r3, [r7, #7]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d116      	bne.n	8003e00 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dec:	f043 0220 	orr.w	r2, r3, #32
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e023      	b.n	8003e48 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	0c1b      	lsrs	r3, r3, #16
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d10d      	bne.n	8003e26 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	43da      	mvns	r2, r3
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	4013      	ands	r3, r2
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	bf0c      	ite	eq
 8003e1c:	2301      	moveq	r3, #1
 8003e1e:	2300      	movne	r3, #0
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	461a      	mov	r2, r3
 8003e24:	e00c      	b.n	8003e40 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	43da      	mvns	r2, r3
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	4013      	ands	r3, r2
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	bf0c      	ite	eq
 8003e38:	2301      	moveq	r3, #1
 8003e3a:	2300      	movne	r3, #0
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	461a      	mov	r2, r3
 8003e40:	79fb      	ldrb	r3, [r7, #7]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d093      	beq.n	8003d6e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
 8003e5c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e5e:	e071      	b.n	8003f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e6e:	d123      	bne.n	8003eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e7e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2220      	movs	r2, #32
 8003e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea4:	f043 0204 	orr.w	r2, r3, #4
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e067      	b.n	8003f88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ebe:	d041      	beq.n	8003f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ec0:	f7fe f9e8 	bl	8002294 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d302      	bcc.n	8003ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d136      	bne.n	8003f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	0c1b      	lsrs	r3, r3, #16
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d10c      	bne.n	8003efa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	43da      	mvns	r2, r3
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	4013      	ands	r3, r2
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	bf14      	ite	ne
 8003ef2:	2301      	movne	r3, #1
 8003ef4:	2300      	moveq	r3, #0
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	e00b      	b.n	8003f12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	43da      	mvns	r2, r3
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	4013      	ands	r3, r2
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	bf14      	ite	ne
 8003f0c:	2301      	movne	r3, #1
 8003f0e:	2300      	moveq	r3, #0
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d016      	beq.n	8003f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f30:	f043 0220 	orr.w	r2, r3, #32
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e021      	b.n	8003f88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	0c1b      	lsrs	r3, r3, #16
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d10c      	bne.n	8003f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	43da      	mvns	r2, r3
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	bf14      	ite	ne
 8003f60:	2301      	movne	r3, #1
 8003f62:	2300      	moveq	r3, #0
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	e00b      	b.n	8003f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	43da      	mvns	r2, r3
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	4013      	ands	r3, r2
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	bf14      	ite	ne
 8003f7a:	2301      	movne	r3, #1
 8003f7c:	2300      	moveq	r3, #0
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f47f af6d 	bne.w	8003e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f9c:	e034      	b.n	8004008 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 f886 	bl	80040b0 <I2C_IsAcknowledgeFailed>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e034      	b.n	8004018 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fb4:	d028      	beq.n	8004008 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fb6:	f7fe f96d 	bl	8002294 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d302      	bcc.n	8003fcc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d11d      	bne.n	8004008 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd6:	2b80      	cmp	r3, #128	; 0x80
 8003fd8:	d016      	beq.n	8004008 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff4:	f043 0220 	orr.w	r2, r3, #32
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e007      	b.n	8004018 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004012:	2b80      	cmp	r3, #128	; 0x80
 8004014:	d1c3      	bne.n	8003f9e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800402c:	e034      	b.n	8004098 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 f83e 	bl	80040b0 <I2C_IsAcknowledgeFailed>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e034      	b.n	80040a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004044:	d028      	beq.n	8004098 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004046:	f7fe f925 	bl	8002294 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	429a      	cmp	r2, r3
 8004054:	d302      	bcc.n	800405c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d11d      	bne.n	8004098 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	f003 0304 	and.w	r3, r3, #4
 8004066:	2b04      	cmp	r3, #4
 8004068:	d016      	beq.n	8004098 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2220      	movs	r2, #32
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004084:	f043 0220 	orr.w	r2, r3, #32
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e007      	b.n	80040a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	f003 0304 	and.w	r3, r3, #4
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	d1c3      	bne.n	800402e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040c6:	d11b      	bne.n	8004100 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2220      	movs	r2, #32
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ec:	f043 0204 	orr.w	r2, r3, #4
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e000      	b.n	8004102 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	bc80      	pop	{r7}
 800410a:	4770      	bx	lr

0800410c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e272      	b.n	8004604 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 8087 	beq.w	800423a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800412c:	4b92      	ldr	r3, [pc, #584]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f003 030c 	and.w	r3, r3, #12
 8004134:	2b04      	cmp	r3, #4
 8004136:	d00c      	beq.n	8004152 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004138:	4b8f      	ldr	r3, [pc, #572]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f003 030c 	and.w	r3, r3, #12
 8004140:	2b08      	cmp	r3, #8
 8004142:	d112      	bne.n	800416a <HAL_RCC_OscConfig+0x5e>
 8004144:	4b8c      	ldr	r3, [pc, #560]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800414c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004150:	d10b      	bne.n	800416a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004152:	4b89      	ldr	r3, [pc, #548]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d06c      	beq.n	8004238 <HAL_RCC_OscConfig+0x12c>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d168      	bne.n	8004238 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e24c      	b.n	8004604 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004172:	d106      	bne.n	8004182 <HAL_RCC_OscConfig+0x76>
 8004174:	4b80      	ldr	r3, [pc, #512]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a7f      	ldr	r2, [pc, #508]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 800417a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800417e:	6013      	str	r3, [r2, #0]
 8004180:	e02e      	b.n	80041e0 <HAL_RCC_OscConfig+0xd4>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10c      	bne.n	80041a4 <HAL_RCC_OscConfig+0x98>
 800418a:	4b7b      	ldr	r3, [pc, #492]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a7a      	ldr	r2, [pc, #488]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 8004190:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004194:	6013      	str	r3, [r2, #0]
 8004196:	4b78      	ldr	r3, [pc, #480]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a77      	ldr	r2, [pc, #476]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 800419c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041a0:	6013      	str	r3, [r2, #0]
 80041a2:	e01d      	b.n	80041e0 <HAL_RCC_OscConfig+0xd4>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041ac:	d10c      	bne.n	80041c8 <HAL_RCC_OscConfig+0xbc>
 80041ae:	4b72      	ldr	r3, [pc, #456]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a71      	ldr	r2, [pc, #452]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 80041b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041b8:	6013      	str	r3, [r2, #0]
 80041ba:	4b6f      	ldr	r3, [pc, #444]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a6e      	ldr	r2, [pc, #440]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 80041c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041c4:	6013      	str	r3, [r2, #0]
 80041c6:	e00b      	b.n	80041e0 <HAL_RCC_OscConfig+0xd4>
 80041c8:	4b6b      	ldr	r3, [pc, #428]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a6a      	ldr	r2, [pc, #424]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 80041ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041d2:	6013      	str	r3, [r2, #0]
 80041d4:	4b68      	ldr	r3, [pc, #416]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a67      	ldr	r2, [pc, #412]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 80041da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d013      	beq.n	8004210 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e8:	f7fe f854 	bl	8002294 <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041f0:	f7fe f850 	bl	8002294 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b64      	cmp	r3, #100	; 0x64
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e200      	b.n	8004604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004202:	4b5d      	ldr	r3, [pc, #372]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d0f0      	beq.n	80041f0 <HAL_RCC_OscConfig+0xe4>
 800420e:	e014      	b.n	800423a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004210:	f7fe f840 	bl	8002294 <HAL_GetTick>
 8004214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004216:	e008      	b.n	800422a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004218:	f7fe f83c 	bl	8002294 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b64      	cmp	r3, #100	; 0x64
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e1ec      	b.n	8004604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800422a:	4b53      	ldr	r3, [pc, #332]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1f0      	bne.n	8004218 <HAL_RCC_OscConfig+0x10c>
 8004236:	e000      	b.n	800423a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004238:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d063      	beq.n	800430e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004246:	4b4c      	ldr	r3, [pc, #304]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f003 030c 	and.w	r3, r3, #12
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00b      	beq.n	800426a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004252:	4b49      	ldr	r3, [pc, #292]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f003 030c 	and.w	r3, r3, #12
 800425a:	2b08      	cmp	r3, #8
 800425c:	d11c      	bne.n	8004298 <HAL_RCC_OscConfig+0x18c>
 800425e:	4b46      	ldr	r3, [pc, #280]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d116      	bne.n	8004298 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800426a:	4b43      	ldr	r3, [pc, #268]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d005      	beq.n	8004282 <HAL_RCC_OscConfig+0x176>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d001      	beq.n	8004282 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e1c0      	b.n	8004604 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004282:	4b3d      	ldr	r3, [pc, #244]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	4939      	ldr	r1, [pc, #228]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 8004292:	4313      	orrs	r3, r2
 8004294:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004296:	e03a      	b.n	800430e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d020      	beq.n	80042e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042a0:	4b36      	ldr	r3, [pc, #216]	; (800437c <HAL_RCC_OscConfig+0x270>)
 80042a2:	2201      	movs	r2, #1
 80042a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a6:	f7fd fff5 	bl	8002294 <HAL_GetTick>
 80042aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ac:	e008      	b.n	80042c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042ae:	f7fd fff1 	bl	8002294 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d901      	bls.n	80042c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e1a1      	b.n	8004604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042c0:	4b2d      	ldr	r3, [pc, #180]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d0f0      	beq.n	80042ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042cc:	4b2a      	ldr	r3, [pc, #168]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	00db      	lsls	r3, r3, #3
 80042da:	4927      	ldr	r1, [pc, #156]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	600b      	str	r3, [r1, #0]
 80042e0:	e015      	b.n	800430e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042e2:	4b26      	ldr	r3, [pc, #152]	; (800437c <HAL_RCC_OscConfig+0x270>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e8:	f7fd ffd4 	bl	8002294 <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042f0:	f7fd ffd0 	bl	8002294 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e180      	b.n	8004604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004302:	4b1d      	ldr	r3, [pc, #116]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1f0      	bne.n	80042f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0308 	and.w	r3, r3, #8
 8004316:	2b00      	cmp	r3, #0
 8004318:	d03a      	beq.n	8004390 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d019      	beq.n	8004356 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004322:	4b17      	ldr	r3, [pc, #92]	; (8004380 <HAL_RCC_OscConfig+0x274>)
 8004324:	2201      	movs	r2, #1
 8004326:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004328:	f7fd ffb4 	bl	8002294 <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004330:	f7fd ffb0 	bl	8002294 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e160      	b.n	8004604 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004342:	4b0d      	ldr	r3, [pc, #52]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 8004344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0f0      	beq.n	8004330 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800434e:	2001      	movs	r0, #1
 8004350:	f000 faba 	bl	80048c8 <RCC_Delay>
 8004354:	e01c      	b.n	8004390 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004356:	4b0a      	ldr	r3, [pc, #40]	; (8004380 <HAL_RCC_OscConfig+0x274>)
 8004358:	2200      	movs	r2, #0
 800435a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800435c:	f7fd ff9a 	bl	8002294 <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004362:	e00f      	b.n	8004384 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004364:	f7fd ff96 	bl	8002294 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b02      	cmp	r3, #2
 8004370:	d908      	bls.n	8004384 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e146      	b.n	8004604 <HAL_RCC_OscConfig+0x4f8>
 8004376:	bf00      	nop
 8004378:	40021000 	.word	0x40021000
 800437c:	42420000 	.word	0x42420000
 8004380:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004384:	4b92      	ldr	r3, [pc, #584]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1e9      	bne.n	8004364 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0304 	and.w	r3, r3, #4
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 80a6 	beq.w	80044ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800439e:	2300      	movs	r3, #0
 80043a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043a2:	4b8b      	ldr	r3, [pc, #556]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10d      	bne.n	80043ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ae:	4b88      	ldr	r3, [pc, #544]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	4a87      	ldr	r2, [pc, #540]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 80043b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043b8:	61d3      	str	r3, [r2, #28]
 80043ba:	4b85      	ldr	r3, [pc, #532]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c2:	60bb      	str	r3, [r7, #8]
 80043c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043c6:	2301      	movs	r3, #1
 80043c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ca:	4b82      	ldr	r3, [pc, #520]	; (80045d4 <HAL_RCC_OscConfig+0x4c8>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d118      	bne.n	8004408 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043d6:	4b7f      	ldr	r3, [pc, #508]	; (80045d4 <HAL_RCC_OscConfig+0x4c8>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a7e      	ldr	r2, [pc, #504]	; (80045d4 <HAL_RCC_OscConfig+0x4c8>)
 80043dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043e2:	f7fd ff57 	bl	8002294 <HAL_GetTick>
 80043e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e8:	e008      	b.n	80043fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ea:	f7fd ff53 	bl	8002294 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	2b64      	cmp	r3, #100	; 0x64
 80043f6:	d901      	bls.n	80043fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e103      	b.n	8004604 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043fc:	4b75      	ldr	r3, [pc, #468]	; (80045d4 <HAL_RCC_OscConfig+0x4c8>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0f0      	beq.n	80043ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d106      	bne.n	800441e <HAL_RCC_OscConfig+0x312>
 8004410:	4b6f      	ldr	r3, [pc, #444]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 8004412:	6a1b      	ldr	r3, [r3, #32]
 8004414:	4a6e      	ldr	r2, [pc, #440]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 8004416:	f043 0301 	orr.w	r3, r3, #1
 800441a:	6213      	str	r3, [r2, #32]
 800441c:	e02d      	b.n	800447a <HAL_RCC_OscConfig+0x36e>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10c      	bne.n	8004440 <HAL_RCC_OscConfig+0x334>
 8004426:	4b6a      	ldr	r3, [pc, #424]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	4a69      	ldr	r2, [pc, #420]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 800442c:	f023 0301 	bic.w	r3, r3, #1
 8004430:	6213      	str	r3, [r2, #32]
 8004432:	4b67      	ldr	r3, [pc, #412]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	4a66      	ldr	r2, [pc, #408]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 8004438:	f023 0304 	bic.w	r3, r3, #4
 800443c:	6213      	str	r3, [r2, #32]
 800443e:	e01c      	b.n	800447a <HAL_RCC_OscConfig+0x36e>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	2b05      	cmp	r3, #5
 8004446:	d10c      	bne.n	8004462 <HAL_RCC_OscConfig+0x356>
 8004448:	4b61      	ldr	r3, [pc, #388]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	4a60      	ldr	r2, [pc, #384]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 800444e:	f043 0304 	orr.w	r3, r3, #4
 8004452:	6213      	str	r3, [r2, #32]
 8004454:	4b5e      	ldr	r3, [pc, #376]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	4a5d      	ldr	r2, [pc, #372]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 800445a:	f043 0301 	orr.w	r3, r3, #1
 800445e:	6213      	str	r3, [r2, #32]
 8004460:	e00b      	b.n	800447a <HAL_RCC_OscConfig+0x36e>
 8004462:	4b5b      	ldr	r3, [pc, #364]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	4a5a      	ldr	r2, [pc, #360]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 8004468:	f023 0301 	bic.w	r3, r3, #1
 800446c:	6213      	str	r3, [r2, #32]
 800446e:	4b58      	ldr	r3, [pc, #352]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	4a57      	ldr	r2, [pc, #348]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 8004474:	f023 0304 	bic.w	r3, r3, #4
 8004478:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d015      	beq.n	80044ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004482:	f7fd ff07 	bl	8002294 <HAL_GetTick>
 8004486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004488:	e00a      	b.n	80044a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800448a:	f7fd ff03 	bl	8002294 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	f241 3288 	movw	r2, #5000	; 0x1388
 8004498:	4293      	cmp	r3, r2
 800449a:	d901      	bls.n	80044a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e0b1      	b.n	8004604 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044a0:	4b4b      	ldr	r3, [pc, #300]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d0ee      	beq.n	800448a <HAL_RCC_OscConfig+0x37e>
 80044ac:	e014      	b.n	80044d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ae:	f7fd fef1 	bl	8002294 <HAL_GetTick>
 80044b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044b4:	e00a      	b.n	80044cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044b6:	f7fd feed 	bl	8002294 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d901      	bls.n	80044cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e09b      	b.n	8004604 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044cc:	4b40      	ldr	r3, [pc, #256]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1ee      	bne.n	80044b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80044d8:	7dfb      	ldrb	r3, [r7, #23]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d105      	bne.n	80044ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044de:	4b3c      	ldr	r3, [pc, #240]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	4a3b      	ldr	r2, [pc, #236]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 80044e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	69db      	ldr	r3, [r3, #28]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f000 8087 	beq.w	8004602 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044f4:	4b36      	ldr	r3, [pc, #216]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f003 030c 	and.w	r3, r3, #12
 80044fc:	2b08      	cmp	r3, #8
 80044fe:	d061      	beq.n	80045c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	69db      	ldr	r3, [r3, #28]
 8004504:	2b02      	cmp	r3, #2
 8004506:	d146      	bne.n	8004596 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004508:	4b33      	ldr	r3, [pc, #204]	; (80045d8 <HAL_RCC_OscConfig+0x4cc>)
 800450a:	2200      	movs	r2, #0
 800450c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800450e:	f7fd fec1 	bl	8002294 <HAL_GetTick>
 8004512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004514:	e008      	b.n	8004528 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004516:	f7fd febd 	bl	8002294 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e06d      	b.n	8004604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004528:	4b29      	ldr	r3, [pc, #164]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1f0      	bne.n	8004516 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800453c:	d108      	bne.n	8004550 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800453e:	4b24      	ldr	r3, [pc, #144]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	4921      	ldr	r1, [pc, #132]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 800454c:	4313      	orrs	r3, r2
 800454e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004550:	4b1f      	ldr	r3, [pc, #124]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a19      	ldr	r1, [r3, #32]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	430b      	orrs	r3, r1
 8004562:	491b      	ldr	r1, [pc, #108]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 8004564:	4313      	orrs	r3, r2
 8004566:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004568:	4b1b      	ldr	r3, [pc, #108]	; (80045d8 <HAL_RCC_OscConfig+0x4cc>)
 800456a:	2201      	movs	r2, #1
 800456c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800456e:	f7fd fe91 	bl	8002294 <HAL_GetTick>
 8004572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004574:	e008      	b.n	8004588 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004576:	f7fd fe8d 	bl	8002294 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d901      	bls.n	8004588 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e03d      	b.n	8004604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004588:	4b11      	ldr	r3, [pc, #68]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d0f0      	beq.n	8004576 <HAL_RCC_OscConfig+0x46a>
 8004594:	e035      	b.n	8004602 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004596:	4b10      	ldr	r3, [pc, #64]	; (80045d8 <HAL_RCC_OscConfig+0x4cc>)
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800459c:	f7fd fe7a 	bl	8002294 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045a4:	f7fd fe76 	bl	8002294 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e026      	b.n	8004604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045b6:	4b06      	ldr	r3, [pc, #24]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1f0      	bne.n	80045a4 <HAL_RCC_OscConfig+0x498>
 80045c2:	e01e      	b.n	8004602 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	69db      	ldr	r3, [r3, #28]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d107      	bne.n	80045dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e019      	b.n	8004604 <HAL_RCC_OscConfig+0x4f8>
 80045d0:	40021000 	.word	0x40021000
 80045d4:	40007000 	.word	0x40007000
 80045d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80045dc:	4b0b      	ldr	r3, [pc, #44]	; (800460c <HAL_RCC_OscConfig+0x500>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d106      	bne.n	80045fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d001      	beq.n	8004602 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e000      	b.n	8004604 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3718      	adds	r7, #24
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	40021000 	.word	0x40021000

08004610 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e0d0      	b.n	80047c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004624:	4b6a      	ldr	r3, [pc, #424]	; (80047d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0307 	and.w	r3, r3, #7
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	429a      	cmp	r2, r3
 8004630:	d910      	bls.n	8004654 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004632:	4b67      	ldr	r3, [pc, #412]	; (80047d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f023 0207 	bic.w	r2, r3, #7
 800463a:	4965      	ldr	r1, [pc, #404]	; (80047d0 <HAL_RCC_ClockConfig+0x1c0>)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	4313      	orrs	r3, r2
 8004640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004642:	4b63      	ldr	r3, [pc, #396]	; (80047d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0307 	and.w	r3, r3, #7
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	429a      	cmp	r2, r3
 800464e:	d001      	beq.n	8004654 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e0b8      	b.n	80047c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d020      	beq.n	80046a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0304 	and.w	r3, r3, #4
 8004668:	2b00      	cmp	r3, #0
 800466a:	d005      	beq.n	8004678 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800466c:	4b59      	ldr	r3, [pc, #356]	; (80047d4 <HAL_RCC_ClockConfig+0x1c4>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	4a58      	ldr	r2, [pc, #352]	; (80047d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004672:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004676:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0308 	and.w	r3, r3, #8
 8004680:	2b00      	cmp	r3, #0
 8004682:	d005      	beq.n	8004690 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004684:	4b53      	ldr	r3, [pc, #332]	; (80047d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	4a52      	ldr	r2, [pc, #328]	; (80047d4 <HAL_RCC_ClockConfig+0x1c4>)
 800468a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800468e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004690:	4b50      	ldr	r3, [pc, #320]	; (80047d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	494d      	ldr	r1, [pc, #308]	; (80047d4 <HAL_RCC_ClockConfig+0x1c4>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d040      	beq.n	8004730 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d107      	bne.n	80046c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046b6:	4b47      	ldr	r3, [pc, #284]	; (80047d4 <HAL_RCC_ClockConfig+0x1c4>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d115      	bne.n	80046ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e07f      	b.n	80047c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d107      	bne.n	80046de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ce:	4b41      	ldr	r3, [pc, #260]	; (80047d4 <HAL_RCC_ClockConfig+0x1c4>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d109      	bne.n	80046ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e073      	b.n	80047c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046de:	4b3d      	ldr	r3, [pc, #244]	; (80047d4 <HAL_RCC_ClockConfig+0x1c4>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e06b      	b.n	80047c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046ee:	4b39      	ldr	r3, [pc, #228]	; (80047d4 <HAL_RCC_ClockConfig+0x1c4>)
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f023 0203 	bic.w	r2, r3, #3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	4936      	ldr	r1, [pc, #216]	; (80047d4 <HAL_RCC_ClockConfig+0x1c4>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004700:	f7fd fdc8 	bl	8002294 <HAL_GetTick>
 8004704:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004706:	e00a      	b.n	800471e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004708:	f7fd fdc4 	bl	8002294 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	f241 3288 	movw	r2, #5000	; 0x1388
 8004716:	4293      	cmp	r3, r2
 8004718:	d901      	bls.n	800471e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e053      	b.n	80047c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800471e:	4b2d      	ldr	r3, [pc, #180]	; (80047d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f003 020c 	and.w	r2, r3, #12
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	429a      	cmp	r2, r3
 800472e:	d1eb      	bne.n	8004708 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004730:	4b27      	ldr	r3, [pc, #156]	; (80047d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0307 	and.w	r3, r3, #7
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	429a      	cmp	r2, r3
 800473c:	d210      	bcs.n	8004760 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800473e:	4b24      	ldr	r3, [pc, #144]	; (80047d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f023 0207 	bic.w	r2, r3, #7
 8004746:	4922      	ldr	r1, [pc, #136]	; (80047d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	4313      	orrs	r3, r2
 800474c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800474e:	4b20      	ldr	r3, [pc, #128]	; (80047d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0307 	and.w	r3, r3, #7
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	429a      	cmp	r2, r3
 800475a:	d001      	beq.n	8004760 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e032      	b.n	80047c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0304 	and.w	r3, r3, #4
 8004768:	2b00      	cmp	r3, #0
 800476a:	d008      	beq.n	800477e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800476c:	4b19      	ldr	r3, [pc, #100]	; (80047d4 <HAL_RCC_ClockConfig+0x1c4>)
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	4916      	ldr	r1, [pc, #88]	; (80047d4 <HAL_RCC_ClockConfig+0x1c4>)
 800477a:	4313      	orrs	r3, r2
 800477c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0308 	and.w	r3, r3, #8
 8004786:	2b00      	cmp	r3, #0
 8004788:	d009      	beq.n	800479e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800478a:	4b12      	ldr	r3, [pc, #72]	; (80047d4 <HAL_RCC_ClockConfig+0x1c4>)
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	00db      	lsls	r3, r3, #3
 8004798:	490e      	ldr	r1, [pc, #56]	; (80047d4 <HAL_RCC_ClockConfig+0x1c4>)
 800479a:	4313      	orrs	r3, r2
 800479c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800479e:	f000 f821 	bl	80047e4 <HAL_RCC_GetSysClockFreq>
 80047a2:	4602      	mov	r2, r0
 80047a4:	4b0b      	ldr	r3, [pc, #44]	; (80047d4 <HAL_RCC_ClockConfig+0x1c4>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	091b      	lsrs	r3, r3, #4
 80047aa:	f003 030f 	and.w	r3, r3, #15
 80047ae:	490a      	ldr	r1, [pc, #40]	; (80047d8 <HAL_RCC_ClockConfig+0x1c8>)
 80047b0:	5ccb      	ldrb	r3, [r1, r3]
 80047b2:	fa22 f303 	lsr.w	r3, r2, r3
 80047b6:	4a09      	ldr	r2, [pc, #36]	; (80047dc <HAL_RCC_ClockConfig+0x1cc>)
 80047b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80047ba:	4b09      	ldr	r3, [pc, #36]	; (80047e0 <HAL_RCC_ClockConfig+0x1d0>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4618      	mov	r0, r3
 80047c0:	f7fd fd26 	bl	8002210 <HAL_InitTick>

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	40022000 	.word	0x40022000
 80047d4:	40021000 	.word	0x40021000
 80047d8:	08009ae4 	.word	0x08009ae4
 80047dc:	2000000c 	.word	0x2000000c
 80047e0:	20000010 	.word	0x20000010

080047e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80047ea:	2300      	movs	r3, #0
 80047ec:	60fb      	str	r3, [r7, #12]
 80047ee:	2300      	movs	r3, #0
 80047f0:	60bb      	str	r3, [r7, #8]
 80047f2:	2300      	movs	r3, #0
 80047f4:	617b      	str	r3, [r7, #20]
 80047f6:	2300      	movs	r3, #0
 80047f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80047fa:	2300      	movs	r3, #0
 80047fc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80047fe:	4b1e      	ldr	r3, [pc, #120]	; (8004878 <HAL_RCC_GetSysClockFreq+0x94>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f003 030c 	and.w	r3, r3, #12
 800480a:	2b04      	cmp	r3, #4
 800480c:	d002      	beq.n	8004814 <HAL_RCC_GetSysClockFreq+0x30>
 800480e:	2b08      	cmp	r3, #8
 8004810:	d003      	beq.n	800481a <HAL_RCC_GetSysClockFreq+0x36>
 8004812:	e027      	b.n	8004864 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004814:	4b19      	ldr	r3, [pc, #100]	; (800487c <HAL_RCC_GetSysClockFreq+0x98>)
 8004816:	613b      	str	r3, [r7, #16]
      break;
 8004818:	e027      	b.n	800486a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	0c9b      	lsrs	r3, r3, #18
 800481e:	f003 030f 	and.w	r3, r3, #15
 8004822:	4a17      	ldr	r2, [pc, #92]	; (8004880 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004824:	5cd3      	ldrb	r3, [r2, r3]
 8004826:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d010      	beq.n	8004854 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004832:	4b11      	ldr	r3, [pc, #68]	; (8004878 <HAL_RCC_GetSysClockFreq+0x94>)
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	0c5b      	lsrs	r3, r3, #17
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	4a11      	ldr	r2, [pc, #68]	; (8004884 <HAL_RCC_GetSysClockFreq+0xa0>)
 800483e:	5cd3      	ldrb	r3, [r2, r3]
 8004840:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a0d      	ldr	r2, [pc, #52]	; (800487c <HAL_RCC_GetSysClockFreq+0x98>)
 8004846:	fb03 f202 	mul.w	r2, r3, r2
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004850:	617b      	str	r3, [r7, #20]
 8004852:	e004      	b.n	800485e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a0c      	ldr	r2, [pc, #48]	; (8004888 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004858:	fb02 f303 	mul.w	r3, r2, r3
 800485c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	613b      	str	r3, [r7, #16]
      break;
 8004862:	e002      	b.n	800486a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004864:	4b05      	ldr	r3, [pc, #20]	; (800487c <HAL_RCC_GetSysClockFreq+0x98>)
 8004866:	613b      	str	r3, [r7, #16]
      break;
 8004868:	bf00      	nop
    }
  }
  return sysclockfreq;
 800486a:	693b      	ldr	r3, [r7, #16]
}
 800486c:	4618      	mov	r0, r3
 800486e:	371c      	adds	r7, #28
 8004870:	46bd      	mov	sp, r7
 8004872:	bc80      	pop	{r7}
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	40021000 	.word	0x40021000
 800487c:	007a1200 	.word	0x007a1200
 8004880:	08009afc 	.word	0x08009afc
 8004884:	08009b0c 	.word	0x08009b0c
 8004888:	003d0900 	.word	0x003d0900

0800488c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004890:	4b02      	ldr	r3, [pc, #8]	; (800489c <HAL_RCC_GetHCLKFreq+0x10>)
 8004892:	681b      	ldr	r3, [r3, #0]
}
 8004894:	4618      	mov	r0, r3
 8004896:	46bd      	mov	sp, r7
 8004898:	bc80      	pop	{r7}
 800489a:	4770      	bx	lr
 800489c:	2000000c 	.word	0x2000000c

080048a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048a4:	f7ff fff2 	bl	800488c <HAL_RCC_GetHCLKFreq>
 80048a8:	4602      	mov	r2, r0
 80048aa:	4b05      	ldr	r3, [pc, #20]	; (80048c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	0a1b      	lsrs	r3, r3, #8
 80048b0:	f003 0307 	and.w	r3, r3, #7
 80048b4:	4903      	ldr	r1, [pc, #12]	; (80048c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048b6:	5ccb      	ldrb	r3, [r1, r3]
 80048b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048bc:	4618      	mov	r0, r3
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	40021000 	.word	0x40021000
 80048c4:	08009af4 	.word	0x08009af4

080048c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80048d0:	4b0a      	ldr	r3, [pc, #40]	; (80048fc <RCC_Delay+0x34>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a0a      	ldr	r2, [pc, #40]	; (8004900 <RCC_Delay+0x38>)
 80048d6:	fba2 2303 	umull	r2, r3, r2, r3
 80048da:	0a5b      	lsrs	r3, r3, #9
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	fb02 f303 	mul.w	r3, r2, r3
 80048e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80048e4:	bf00      	nop
  }
  while (Delay --);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	1e5a      	subs	r2, r3, #1
 80048ea:	60fa      	str	r2, [r7, #12]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1f9      	bne.n	80048e4 <RCC_Delay+0x1c>
}
 80048f0:	bf00      	nop
 80048f2:	bf00      	nop
 80048f4:	3714      	adds	r7, #20
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bc80      	pop	{r7}
 80048fa:	4770      	bx	lr
 80048fc:	2000000c 	.word	0x2000000c
 8004900:	10624dd3 	.word	0x10624dd3

08004904 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b086      	sub	sp, #24
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800490c:	2300      	movs	r3, #0
 800490e:	613b      	str	r3, [r7, #16]
 8004910:	2300      	movs	r3, #0
 8004912:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	2b00      	cmp	r3, #0
 800491e:	d07d      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004920:	2300      	movs	r3, #0
 8004922:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004924:	4b4f      	ldr	r3, [pc, #316]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004926:	69db      	ldr	r3, [r3, #28]
 8004928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d10d      	bne.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004930:	4b4c      	ldr	r3, [pc, #304]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004932:	69db      	ldr	r3, [r3, #28]
 8004934:	4a4b      	ldr	r2, [pc, #300]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800493a:	61d3      	str	r3, [r2, #28]
 800493c:	4b49      	ldr	r3, [pc, #292]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800493e:	69db      	ldr	r3, [r3, #28]
 8004940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004944:	60bb      	str	r3, [r7, #8]
 8004946:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004948:	2301      	movs	r3, #1
 800494a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800494c:	4b46      	ldr	r3, [pc, #280]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004954:	2b00      	cmp	r3, #0
 8004956:	d118      	bne.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004958:	4b43      	ldr	r3, [pc, #268]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a42      	ldr	r2, [pc, #264]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800495e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004962:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004964:	f7fd fc96 	bl	8002294 <HAL_GetTick>
 8004968:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800496a:	e008      	b.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800496c:	f7fd fc92 	bl	8002294 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b64      	cmp	r3, #100	; 0x64
 8004978:	d901      	bls.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e06d      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800497e:	4b3a      	ldr	r3, [pc, #232]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004986:	2b00      	cmp	r3, #0
 8004988:	d0f0      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800498a:	4b36      	ldr	r3, [pc, #216]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004992:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d02e      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d027      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049a8:	4b2e      	ldr	r3, [pc, #184]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049aa:	6a1b      	ldr	r3, [r3, #32]
 80049ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049b0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049b2:	4b2e      	ldr	r3, [pc, #184]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80049b4:	2201      	movs	r2, #1
 80049b6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049b8:	4b2c      	ldr	r3, [pc, #176]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80049ba:	2200      	movs	r2, #0
 80049bc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80049be:	4a29      	ldr	r2, [pc, #164]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d014      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ce:	f7fd fc61 	bl	8002294 <HAL_GetTick>
 80049d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049d4:	e00a      	b.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049d6:	f7fd fc5d 	bl	8002294 <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d901      	bls.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e036      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ec:	4b1d      	ldr	r3, [pc, #116]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049ee:	6a1b      	ldr	r3, [r3, #32]
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d0ee      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049f8:	4b1a      	ldr	r3, [pc, #104]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	4917      	ldr	r1, [pc, #92]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a0a:	7dfb      	ldrb	r3, [r7, #23]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d105      	bne.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a10:	4b14      	ldr	r3, [pc, #80]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a12:	69db      	ldr	r3, [r3, #28]
 8004a14:	4a13      	ldr	r2, [pc, #76]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a1a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d008      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a28:	4b0e      	ldr	r3, [pc, #56]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	490b      	ldr	r1, [pc, #44]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0310 	and.w	r3, r3, #16
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d008      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a46:	4b07      	ldr	r3, [pc, #28]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	4904      	ldr	r1, [pc, #16]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3718      	adds	r7, #24
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	40021000 	.word	0x40021000
 8004a68:	40007000 	.word	0x40007000
 8004a6c:	42420440 	.word	0x42420440

08004a70 <__errno>:
 8004a70:	4b01      	ldr	r3, [pc, #4]	; (8004a78 <__errno+0x8>)
 8004a72:	6818      	ldr	r0, [r3, #0]
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	20000018 	.word	0x20000018

08004a7c <__libc_init_array>:
 8004a7c:	b570      	push	{r4, r5, r6, lr}
 8004a7e:	2600      	movs	r6, #0
 8004a80:	4d0c      	ldr	r5, [pc, #48]	; (8004ab4 <__libc_init_array+0x38>)
 8004a82:	4c0d      	ldr	r4, [pc, #52]	; (8004ab8 <__libc_init_array+0x3c>)
 8004a84:	1b64      	subs	r4, r4, r5
 8004a86:	10a4      	asrs	r4, r4, #2
 8004a88:	42a6      	cmp	r6, r4
 8004a8a:	d109      	bne.n	8004aa0 <__libc_init_array+0x24>
 8004a8c:	f004 fc52 	bl	8009334 <_init>
 8004a90:	2600      	movs	r6, #0
 8004a92:	4d0a      	ldr	r5, [pc, #40]	; (8004abc <__libc_init_array+0x40>)
 8004a94:	4c0a      	ldr	r4, [pc, #40]	; (8004ac0 <__libc_init_array+0x44>)
 8004a96:	1b64      	subs	r4, r4, r5
 8004a98:	10a4      	asrs	r4, r4, #2
 8004a9a:	42a6      	cmp	r6, r4
 8004a9c:	d105      	bne.n	8004aaa <__libc_init_array+0x2e>
 8004a9e:	bd70      	pop	{r4, r5, r6, pc}
 8004aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aa4:	4798      	blx	r3
 8004aa6:	3601      	adds	r6, #1
 8004aa8:	e7ee      	b.n	8004a88 <__libc_init_array+0xc>
 8004aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aae:	4798      	blx	r3
 8004ab0:	3601      	adds	r6, #1
 8004ab2:	e7f2      	b.n	8004a9a <__libc_init_array+0x1e>
 8004ab4:	08009fb4 	.word	0x08009fb4
 8004ab8:	08009fb4 	.word	0x08009fb4
 8004abc:	08009fb4 	.word	0x08009fb4
 8004ac0:	08009fb8 	.word	0x08009fb8

08004ac4 <memset>:
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	4402      	add	r2, r0
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d100      	bne.n	8004ace <memset+0xa>
 8004acc:	4770      	bx	lr
 8004ace:	f803 1b01 	strb.w	r1, [r3], #1
 8004ad2:	e7f9      	b.n	8004ac8 <memset+0x4>

08004ad4 <__cvt>:
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ada:	461f      	mov	r7, r3
 8004adc:	bfbb      	ittet	lt
 8004ade:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004ae2:	461f      	movlt	r7, r3
 8004ae4:	2300      	movge	r3, #0
 8004ae6:	232d      	movlt	r3, #45	; 0x2d
 8004ae8:	b088      	sub	sp, #32
 8004aea:	4614      	mov	r4, r2
 8004aec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004aee:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004af0:	7013      	strb	r3, [r2, #0]
 8004af2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004af4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004af8:	f023 0820 	bic.w	r8, r3, #32
 8004afc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004b00:	d005      	beq.n	8004b0e <__cvt+0x3a>
 8004b02:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004b06:	d100      	bne.n	8004b0a <__cvt+0x36>
 8004b08:	3501      	adds	r5, #1
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	e000      	b.n	8004b10 <__cvt+0x3c>
 8004b0e:	2303      	movs	r3, #3
 8004b10:	aa07      	add	r2, sp, #28
 8004b12:	9204      	str	r2, [sp, #16]
 8004b14:	aa06      	add	r2, sp, #24
 8004b16:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004b1a:	e9cd 3500 	strd	r3, r5, [sp]
 8004b1e:	4622      	mov	r2, r4
 8004b20:	463b      	mov	r3, r7
 8004b22:	f001 fd85 	bl	8006630 <_dtoa_r>
 8004b26:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004b2a:	4606      	mov	r6, r0
 8004b2c:	d102      	bne.n	8004b34 <__cvt+0x60>
 8004b2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004b30:	07db      	lsls	r3, r3, #31
 8004b32:	d522      	bpl.n	8004b7a <__cvt+0xa6>
 8004b34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004b38:	eb06 0905 	add.w	r9, r6, r5
 8004b3c:	d110      	bne.n	8004b60 <__cvt+0x8c>
 8004b3e:	7833      	ldrb	r3, [r6, #0]
 8004b40:	2b30      	cmp	r3, #48	; 0x30
 8004b42:	d10a      	bne.n	8004b5a <__cvt+0x86>
 8004b44:	2200      	movs	r2, #0
 8004b46:	2300      	movs	r3, #0
 8004b48:	4620      	mov	r0, r4
 8004b4a:	4639      	mov	r1, r7
 8004b4c:	f7fb ff2c 	bl	80009a8 <__aeabi_dcmpeq>
 8004b50:	b918      	cbnz	r0, 8004b5a <__cvt+0x86>
 8004b52:	f1c5 0501 	rsb	r5, r5, #1
 8004b56:	f8ca 5000 	str.w	r5, [sl]
 8004b5a:	f8da 3000 	ldr.w	r3, [sl]
 8004b5e:	4499      	add	r9, r3
 8004b60:	2200      	movs	r2, #0
 8004b62:	2300      	movs	r3, #0
 8004b64:	4620      	mov	r0, r4
 8004b66:	4639      	mov	r1, r7
 8004b68:	f7fb ff1e 	bl	80009a8 <__aeabi_dcmpeq>
 8004b6c:	b108      	cbz	r0, 8004b72 <__cvt+0x9e>
 8004b6e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004b72:	2230      	movs	r2, #48	; 0x30
 8004b74:	9b07      	ldr	r3, [sp, #28]
 8004b76:	454b      	cmp	r3, r9
 8004b78:	d307      	bcc.n	8004b8a <__cvt+0xb6>
 8004b7a:	4630      	mov	r0, r6
 8004b7c:	9b07      	ldr	r3, [sp, #28]
 8004b7e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004b80:	1b9b      	subs	r3, r3, r6
 8004b82:	6013      	str	r3, [r2, #0]
 8004b84:	b008      	add	sp, #32
 8004b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b8a:	1c59      	adds	r1, r3, #1
 8004b8c:	9107      	str	r1, [sp, #28]
 8004b8e:	701a      	strb	r2, [r3, #0]
 8004b90:	e7f0      	b.n	8004b74 <__cvt+0xa0>

08004b92 <__exponent>:
 8004b92:	4603      	mov	r3, r0
 8004b94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b96:	2900      	cmp	r1, #0
 8004b98:	f803 2b02 	strb.w	r2, [r3], #2
 8004b9c:	bfb6      	itet	lt
 8004b9e:	222d      	movlt	r2, #45	; 0x2d
 8004ba0:	222b      	movge	r2, #43	; 0x2b
 8004ba2:	4249      	neglt	r1, r1
 8004ba4:	2909      	cmp	r1, #9
 8004ba6:	7042      	strb	r2, [r0, #1]
 8004ba8:	dd2b      	ble.n	8004c02 <__exponent+0x70>
 8004baa:	f10d 0407 	add.w	r4, sp, #7
 8004bae:	46a4      	mov	ip, r4
 8004bb0:	270a      	movs	r7, #10
 8004bb2:	fb91 f6f7 	sdiv	r6, r1, r7
 8004bb6:	460a      	mov	r2, r1
 8004bb8:	46a6      	mov	lr, r4
 8004bba:	fb07 1516 	mls	r5, r7, r6, r1
 8004bbe:	2a63      	cmp	r2, #99	; 0x63
 8004bc0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004bc4:	4631      	mov	r1, r6
 8004bc6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8004bca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004bce:	dcf0      	bgt.n	8004bb2 <__exponent+0x20>
 8004bd0:	3130      	adds	r1, #48	; 0x30
 8004bd2:	f1ae 0502 	sub.w	r5, lr, #2
 8004bd6:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004bda:	4629      	mov	r1, r5
 8004bdc:	1c44      	adds	r4, r0, #1
 8004bde:	4561      	cmp	r1, ip
 8004be0:	d30a      	bcc.n	8004bf8 <__exponent+0x66>
 8004be2:	f10d 0209 	add.w	r2, sp, #9
 8004be6:	eba2 020e 	sub.w	r2, r2, lr
 8004bea:	4565      	cmp	r5, ip
 8004bec:	bf88      	it	hi
 8004bee:	2200      	movhi	r2, #0
 8004bf0:	4413      	add	r3, r2
 8004bf2:	1a18      	subs	r0, r3, r0
 8004bf4:	b003      	add	sp, #12
 8004bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bf8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bfc:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004c00:	e7ed      	b.n	8004bde <__exponent+0x4c>
 8004c02:	2330      	movs	r3, #48	; 0x30
 8004c04:	3130      	adds	r1, #48	; 0x30
 8004c06:	7083      	strb	r3, [r0, #2]
 8004c08:	70c1      	strb	r1, [r0, #3]
 8004c0a:	1d03      	adds	r3, r0, #4
 8004c0c:	e7f1      	b.n	8004bf2 <__exponent+0x60>
	...

08004c10 <_printf_float>:
 8004c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c14:	b091      	sub	sp, #68	; 0x44
 8004c16:	460c      	mov	r4, r1
 8004c18:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004c1c:	4616      	mov	r6, r2
 8004c1e:	461f      	mov	r7, r3
 8004c20:	4605      	mov	r5, r0
 8004c22:	f002 fe59 	bl	80078d8 <_localeconv_r>
 8004c26:	6803      	ldr	r3, [r0, #0]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	9309      	str	r3, [sp, #36]	; 0x24
 8004c2c:	f7fb fa90 	bl	8000150 <strlen>
 8004c30:	2300      	movs	r3, #0
 8004c32:	930e      	str	r3, [sp, #56]	; 0x38
 8004c34:	f8d8 3000 	ldr.w	r3, [r8]
 8004c38:	900a      	str	r0, [sp, #40]	; 0x28
 8004c3a:	3307      	adds	r3, #7
 8004c3c:	f023 0307 	bic.w	r3, r3, #7
 8004c40:	f103 0208 	add.w	r2, r3, #8
 8004c44:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004c48:	f8d4 b000 	ldr.w	fp, [r4]
 8004c4c:	f8c8 2000 	str.w	r2, [r8]
 8004c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c54:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004c58:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004c5c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004c60:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c66:	4640      	mov	r0, r8
 8004c68:	4b9c      	ldr	r3, [pc, #624]	; (8004edc <_printf_float+0x2cc>)
 8004c6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c6c:	f7fb fece 	bl	8000a0c <__aeabi_dcmpun>
 8004c70:	bb70      	cbnz	r0, 8004cd0 <_printf_float+0xc0>
 8004c72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c76:	4640      	mov	r0, r8
 8004c78:	4b98      	ldr	r3, [pc, #608]	; (8004edc <_printf_float+0x2cc>)
 8004c7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c7c:	f7fb fea8 	bl	80009d0 <__aeabi_dcmple>
 8004c80:	bb30      	cbnz	r0, 8004cd0 <_printf_float+0xc0>
 8004c82:	2200      	movs	r2, #0
 8004c84:	2300      	movs	r3, #0
 8004c86:	4640      	mov	r0, r8
 8004c88:	4651      	mov	r1, sl
 8004c8a:	f7fb fe97 	bl	80009bc <__aeabi_dcmplt>
 8004c8e:	b110      	cbz	r0, 8004c96 <_printf_float+0x86>
 8004c90:	232d      	movs	r3, #45	; 0x2d
 8004c92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c96:	4b92      	ldr	r3, [pc, #584]	; (8004ee0 <_printf_float+0x2d0>)
 8004c98:	4892      	ldr	r0, [pc, #584]	; (8004ee4 <_printf_float+0x2d4>)
 8004c9a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004c9e:	bf94      	ite	ls
 8004ca0:	4698      	movls	r8, r3
 8004ca2:	4680      	movhi	r8, r0
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	f04f 0a00 	mov.w	sl, #0
 8004caa:	6123      	str	r3, [r4, #16]
 8004cac:	f02b 0304 	bic.w	r3, fp, #4
 8004cb0:	6023      	str	r3, [r4, #0]
 8004cb2:	4633      	mov	r3, r6
 8004cb4:	4621      	mov	r1, r4
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	9700      	str	r7, [sp, #0]
 8004cba:	aa0f      	add	r2, sp, #60	; 0x3c
 8004cbc:	f000 f9d4 	bl	8005068 <_printf_common>
 8004cc0:	3001      	adds	r0, #1
 8004cc2:	f040 8090 	bne.w	8004de6 <_printf_float+0x1d6>
 8004cc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cca:	b011      	add	sp, #68	; 0x44
 8004ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cd0:	4642      	mov	r2, r8
 8004cd2:	4653      	mov	r3, sl
 8004cd4:	4640      	mov	r0, r8
 8004cd6:	4651      	mov	r1, sl
 8004cd8:	f7fb fe98 	bl	8000a0c <__aeabi_dcmpun>
 8004cdc:	b148      	cbz	r0, 8004cf2 <_printf_float+0xe2>
 8004cde:	f1ba 0f00 	cmp.w	sl, #0
 8004ce2:	bfb8      	it	lt
 8004ce4:	232d      	movlt	r3, #45	; 0x2d
 8004ce6:	4880      	ldr	r0, [pc, #512]	; (8004ee8 <_printf_float+0x2d8>)
 8004ce8:	bfb8      	it	lt
 8004cea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004cee:	4b7f      	ldr	r3, [pc, #508]	; (8004eec <_printf_float+0x2dc>)
 8004cf0:	e7d3      	b.n	8004c9a <_printf_float+0x8a>
 8004cf2:	6863      	ldr	r3, [r4, #4]
 8004cf4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004cf8:	1c5a      	adds	r2, r3, #1
 8004cfa:	d142      	bne.n	8004d82 <_printf_float+0x172>
 8004cfc:	2306      	movs	r3, #6
 8004cfe:	6063      	str	r3, [r4, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	9206      	str	r2, [sp, #24]
 8004d04:	aa0e      	add	r2, sp, #56	; 0x38
 8004d06:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004d0a:	aa0d      	add	r2, sp, #52	; 0x34
 8004d0c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004d10:	9203      	str	r2, [sp, #12]
 8004d12:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004d16:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004d1a:	6023      	str	r3, [r4, #0]
 8004d1c:	6863      	ldr	r3, [r4, #4]
 8004d1e:	4642      	mov	r2, r8
 8004d20:	9300      	str	r3, [sp, #0]
 8004d22:	4628      	mov	r0, r5
 8004d24:	4653      	mov	r3, sl
 8004d26:	910b      	str	r1, [sp, #44]	; 0x2c
 8004d28:	f7ff fed4 	bl	8004ad4 <__cvt>
 8004d2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004d2e:	4680      	mov	r8, r0
 8004d30:	2947      	cmp	r1, #71	; 0x47
 8004d32:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004d34:	d108      	bne.n	8004d48 <_printf_float+0x138>
 8004d36:	1cc8      	adds	r0, r1, #3
 8004d38:	db02      	blt.n	8004d40 <_printf_float+0x130>
 8004d3a:	6863      	ldr	r3, [r4, #4]
 8004d3c:	4299      	cmp	r1, r3
 8004d3e:	dd40      	ble.n	8004dc2 <_printf_float+0x1b2>
 8004d40:	f1a9 0902 	sub.w	r9, r9, #2
 8004d44:	fa5f f989 	uxtb.w	r9, r9
 8004d48:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004d4c:	d81f      	bhi.n	8004d8e <_printf_float+0x17e>
 8004d4e:	464a      	mov	r2, r9
 8004d50:	3901      	subs	r1, #1
 8004d52:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004d56:	910d      	str	r1, [sp, #52]	; 0x34
 8004d58:	f7ff ff1b 	bl	8004b92 <__exponent>
 8004d5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d5e:	4682      	mov	sl, r0
 8004d60:	1813      	adds	r3, r2, r0
 8004d62:	2a01      	cmp	r2, #1
 8004d64:	6123      	str	r3, [r4, #16]
 8004d66:	dc02      	bgt.n	8004d6e <_printf_float+0x15e>
 8004d68:	6822      	ldr	r2, [r4, #0]
 8004d6a:	07d2      	lsls	r2, r2, #31
 8004d6c:	d501      	bpl.n	8004d72 <_printf_float+0x162>
 8004d6e:	3301      	adds	r3, #1
 8004d70:	6123      	str	r3, [r4, #16]
 8004d72:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d09b      	beq.n	8004cb2 <_printf_float+0xa2>
 8004d7a:	232d      	movs	r3, #45	; 0x2d
 8004d7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d80:	e797      	b.n	8004cb2 <_printf_float+0xa2>
 8004d82:	2947      	cmp	r1, #71	; 0x47
 8004d84:	d1bc      	bne.n	8004d00 <_printf_float+0xf0>
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1ba      	bne.n	8004d00 <_printf_float+0xf0>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e7b7      	b.n	8004cfe <_printf_float+0xee>
 8004d8e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004d92:	d118      	bne.n	8004dc6 <_printf_float+0x1b6>
 8004d94:	2900      	cmp	r1, #0
 8004d96:	6863      	ldr	r3, [r4, #4]
 8004d98:	dd0b      	ble.n	8004db2 <_printf_float+0x1a2>
 8004d9a:	6121      	str	r1, [r4, #16]
 8004d9c:	b913      	cbnz	r3, 8004da4 <_printf_float+0x194>
 8004d9e:	6822      	ldr	r2, [r4, #0]
 8004da0:	07d0      	lsls	r0, r2, #31
 8004da2:	d502      	bpl.n	8004daa <_printf_float+0x19a>
 8004da4:	3301      	adds	r3, #1
 8004da6:	440b      	add	r3, r1
 8004da8:	6123      	str	r3, [r4, #16]
 8004daa:	f04f 0a00 	mov.w	sl, #0
 8004dae:	65a1      	str	r1, [r4, #88]	; 0x58
 8004db0:	e7df      	b.n	8004d72 <_printf_float+0x162>
 8004db2:	b913      	cbnz	r3, 8004dba <_printf_float+0x1aa>
 8004db4:	6822      	ldr	r2, [r4, #0]
 8004db6:	07d2      	lsls	r2, r2, #31
 8004db8:	d501      	bpl.n	8004dbe <_printf_float+0x1ae>
 8004dba:	3302      	adds	r3, #2
 8004dbc:	e7f4      	b.n	8004da8 <_printf_float+0x198>
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e7f2      	b.n	8004da8 <_printf_float+0x198>
 8004dc2:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004dc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004dc8:	4299      	cmp	r1, r3
 8004dca:	db05      	blt.n	8004dd8 <_printf_float+0x1c8>
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	6121      	str	r1, [r4, #16]
 8004dd0:	07d8      	lsls	r0, r3, #31
 8004dd2:	d5ea      	bpl.n	8004daa <_printf_float+0x19a>
 8004dd4:	1c4b      	adds	r3, r1, #1
 8004dd6:	e7e7      	b.n	8004da8 <_printf_float+0x198>
 8004dd8:	2900      	cmp	r1, #0
 8004dda:	bfcc      	ite	gt
 8004ddc:	2201      	movgt	r2, #1
 8004dde:	f1c1 0202 	rsble	r2, r1, #2
 8004de2:	4413      	add	r3, r2
 8004de4:	e7e0      	b.n	8004da8 <_printf_float+0x198>
 8004de6:	6823      	ldr	r3, [r4, #0]
 8004de8:	055a      	lsls	r2, r3, #21
 8004dea:	d407      	bmi.n	8004dfc <_printf_float+0x1ec>
 8004dec:	6923      	ldr	r3, [r4, #16]
 8004dee:	4642      	mov	r2, r8
 8004df0:	4631      	mov	r1, r6
 8004df2:	4628      	mov	r0, r5
 8004df4:	47b8      	blx	r7
 8004df6:	3001      	adds	r0, #1
 8004df8:	d12b      	bne.n	8004e52 <_printf_float+0x242>
 8004dfa:	e764      	b.n	8004cc6 <_printf_float+0xb6>
 8004dfc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004e00:	f240 80dd 	bls.w	8004fbe <_printf_float+0x3ae>
 8004e04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e08:	2200      	movs	r2, #0
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	f7fb fdcc 	bl	80009a8 <__aeabi_dcmpeq>
 8004e10:	2800      	cmp	r0, #0
 8004e12:	d033      	beq.n	8004e7c <_printf_float+0x26c>
 8004e14:	2301      	movs	r3, #1
 8004e16:	4631      	mov	r1, r6
 8004e18:	4628      	mov	r0, r5
 8004e1a:	4a35      	ldr	r2, [pc, #212]	; (8004ef0 <_printf_float+0x2e0>)
 8004e1c:	47b8      	blx	r7
 8004e1e:	3001      	adds	r0, #1
 8004e20:	f43f af51 	beq.w	8004cc6 <_printf_float+0xb6>
 8004e24:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	db02      	blt.n	8004e32 <_printf_float+0x222>
 8004e2c:	6823      	ldr	r3, [r4, #0]
 8004e2e:	07d8      	lsls	r0, r3, #31
 8004e30:	d50f      	bpl.n	8004e52 <_printf_float+0x242>
 8004e32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e36:	4631      	mov	r1, r6
 8004e38:	4628      	mov	r0, r5
 8004e3a:	47b8      	blx	r7
 8004e3c:	3001      	adds	r0, #1
 8004e3e:	f43f af42 	beq.w	8004cc6 <_printf_float+0xb6>
 8004e42:	f04f 0800 	mov.w	r8, #0
 8004e46:	f104 091a 	add.w	r9, r4, #26
 8004e4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	4543      	cmp	r3, r8
 8004e50:	dc09      	bgt.n	8004e66 <_printf_float+0x256>
 8004e52:	6823      	ldr	r3, [r4, #0]
 8004e54:	079b      	lsls	r3, r3, #30
 8004e56:	f100 8102 	bmi.w	800505e <_printf_float+0x44e>
 8004e5a:	68e0      	ldr	r0, [r4, #12]
 8004e5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e5e:	4298      	cmp	r0, r3
 8004e60:	bfb8      	it	lt
 8004e62:	4618      	movlt	r0, r3
 8004e64:	e731      	b.n	8004cca <_printf_float+0xba>
 8004e66:	2301      	movs	r3, #1
 8004e68:	464a      	mov	r2, r9
 8004e6a:	4631      	mov	r1, r6
 8004e6c:	4628      	mov	r0, r5
 8004e6e:	47b8      	blx	r7
 8004e70:	3001      	adds	r0, #1
 8004e72:	f43f af28 	beq.w	8004cc6 <_printf_float+0xb6>
 8004e76:	f108 0801 	add.w	r8, r8, #1
 8004e7a:	e7e6      	b.n	8004e4a <_printf_float+0x23a>
 8004e7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	dc38      	bgt.n	8004ef4 <_printf_float+0x2e4>
 8004e82:	2301      	movs	r3, #1
 8004e84:	4631      	mov	r1, r6
 8004e86:	4628      	mov	r0, r5
 8004e88:	4a19      	ldr	r2, [pc, #100]	; (8004ef0 <_printf_float+0x2e0>)
 8004e8a:	47b8      	blx	r7
 8004e8c:	3001      	adds	r0, #1
 8004e8e:	f43f af1a 	beq.w	8004cc6 <_printf_float+0xb6>
 8004e92:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004e96:	4313      	orrs	r3, r2
 8004e98:	d102      	bne.n	8004ea0 <_printf_float+0x290>
 8004e9a:	6823      	ldr	r3, [r4, #0]
 8004e9c:	07d9      	lsls	r1, r3, #31
 8004e9e:	d5d8      	bpl.n	8004e52 <_printf_float+0x242>
 8004ea0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ea4:	4631      	mov	r1, r6
 8004ea6:	4628      	mov	r0, r5
 8004ea8:	47b8      	blx	r7
 8004eaa:	3001      	adds	r0, #1
 8004eac:	f43f af0b 	beq.w	8004cc6 <_printf_float+0xb6>
 8004eb0:	f04f 0900 	mov.w	r9, #0
 8004eb4:	f104 0a1a 	add.w	sl, r4, #26
 8004eb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004eba:	425b      	negs	r3, r3
 8004ebc:	454b      	cmp	r3, r9
 8004ebe:	dc01      	bgt.n	8004ec4 <_printf_float+0x2b4>
 8004ec0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ec2:	e794      	b.n	8004dee <_printf_float+0x1de>
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	4652      	mov	r2, sl
 8004ec8:	4631      	mov	r1, r6
 8004eca:	4628      	mov	r0, r5
 8004ecc:	47b8      	blx	r7
 8004ece:	3001      	adds	r0, #1
 8004ed0:	f43f aef9 	beq.w	8004cc6 <_printf_float+0xb6>
 8004ed4:	f109 0901 	add.w	r9, r9, #1
 8004ed8:	e7ee      	b.n	8004eb8 <_printf_float+0x2a8>
 8004eda:	bf00      	nop
 8004edc:	7fefffff 	.word	0x7fefffff
 8004ee0:	08009b14 	.word	0x08009b14
 8004ee4:	08009b18 	.word	0x08009b18
 8004ee8:	08009b20 	.word	0x08009b20
 8004eec:	08009b1c 	.word	0x08009b1c
 8004ef0:	08009b24 	.word	0x08009b24
 8004ef4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ef6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	bfa8      	it	ge
 8004efc:	461a      	movge	r2, r3
 8004efe:	2a00      	cmp	r2, #0
 8004f00:	4691      	mov	r9, r2
 8004f02:	dc37      	bgt.n	8004f74 <_printf_float+0x364>
 8004f04:	f04f 0b00 	mov.w	fp, #0
 8004f08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f0c:	f104 021a 	add.w	r2, r4, #26
 8004f10:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004f14:	ebaa 0309 	sub.w	r3, sl, r9
 8004f18:	455b      	cmp	r3, fp
 8004f1a:	dc33      	bgt.n	8004f84 <_printf_float+0x374>
 8004f1c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004f20:	429a      	cmp	r2, r3
 8004f22:	db3b      	blt.n	8004f9c <_printf_float+0x38c>
 8004f24:	6823      	ldr	r3, [r4, #0]
 8004f26:	07da      	lsls	r2, r3, #31
 8004f28:	d438      	bmi.n	8004f9c <_printf_float+0x38c>
 8004f2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f2c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004f2e:	eba3 020a 	sub.w	r2, r3, sl
 8004f32:	eba3 0901 	sub.w	r9, r3, r1
 8004f36:	4591      	cmp	r9, r2
 8004f38:	bfa8      	it	ge
 8004f3a:	4691      	movge	r9, r2
 8004f3c:	f1b9 0f00 	cmp.w	r9, #0
 8004f40:	dc34      	bgt.n	8004fac <_printf_float+0x39c>
 8004f42:	f04f 0800 	mov.w	r8, #0
 8004f46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f4a:	f104 0a1a 	add.w	sl, r4, #26
 8004f4e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004f52:	1a9b      	subs	r3, r3, r2
 8004f54:	eba3 0309 	sub.w	r3, r3, r9
 8004f58:	4543      	cmp	r3, r8
 8004f5a:	f77f af7a 	ble.w	8004e52 <_printf_float+0x242>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	4652      	mov	r2, sl
 8004f62:	4631      	mov	r1, r6
 8004f64:	4628      	mov	r0, r5
 8004f66:	47b8      	blx	r7
 8004f68:	3001      	adds	r0, #1
 8004f6a:	f43f aeac 	beq.w	8004cc6 <_printf_float+0xb6>
 8004f6e:	f108 0801 	add.w	r8, r8, #1
 8004f72:	e7ec      	b.n	8004f4e <_printf_float+0x33e>
 8004f74:	4613      	mov	r3, r2
 8004f76:	4631      	mov	r1, r6
 8004f78:	4642      	mov	r2, r8
 8004f7a:	4628      	mov	r0, r5
 8004f7c:	47b8      	blx	r7
 8004f7e:	3001      	adds	r0, #1
 8004f80:	d1c0      	bne.n	8004f04 <_printf_float+0x2f4>
 8004f82:	e6a0      	b.n	8004cc6 <_printf_float+0xb6>
 8004f84:	2301      	movs	r3, #1
 8004f86:	4631      	mov	r1, r6
 8004f88:	4628      	mov	r0, r5
 8004f8a:	920b      	str	r2, [sp, #44]	; 0x2c
 8004f8c:	47b8      	blx	r7
 8004f8e:	3001      	adds	r0, #1
 8004f90:	f43f ae99 	beq.w	8004cc6 <_printf_float+0xb6>
 8004f94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f96:	f10b 0b01 	add.w	fp, fp, #1
 8004f9a:	e7b9      	b.n	8004f10 <_printf_float+0x300>
 8004f9c:	4631      	mov	r1, r6
 8004f9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fa2:	4628      	mov	r0, r5
 8004fa4:	47b8      	blx	r7
 8004fa6:	3001      	adds	r0, #1
 8004fa8:	d1bf      	bne.n	8004f2a <_printf_float+0x31a>
 8004faa:	e68c      	b.n	8004cc6 <_printf_float+0xb6>
 8004fac:	464b      	mov	r3, r9
 8004fae:	4631      	mov	r1, r6
 8004fb0:	4628      	mov	r0, r5
 8004fb2:	eb08 020a 	add.w	r2, r8, sl
 8004fb6:	47b8      	blx	r7
 8004fb8:	3001      	adds	r0, #1
 8004fba:	d1c2      	bne.n	8004f42 <_printf_float+0x332>
 8004fbc:	e683      	b.n	8004cc6 <_printf_float+0xb6>
 8004fbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004fc0:	2a01      	cmp	r2, #1
 8004fc2:	dc01      	bgt.n	8004fc8 <_printf_float+0x3b8>
 8004fc4:	07db      	lsls	r3, r3, #31
 8004fc6:	d537      	bpl.n	8005038 <_printf_float+0x428>
 8004fc8:	2301      	movs	r3, #1
 8004fca:	4642      	mov	r2, r8
 8004fcc:	4631      	mov	r1, r6
 8004fce:	4628      	mov	r0, r5
 8004fd0:	47b8      	blx	r7
 8004fd2:	3001      	adds	r0, #1
 8004fd4:	f43f ae77 	beq.w	8004cc6 <_printf_float+0xb6>
 8004fd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fdc:	4631      	mov	r1, r6
 8004fde:	4628      	mov	r0, r5
 8004fe0:	47b8      	blx	r7
 8004fe2:	3001      	adds	r0, #1
 8004fe4:	f43f ae6f 	beq.w	8004cc6 <_printf_float+0xb6>
 8004fe8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004fec:	2200      	movs	r2, #0
 8004fee:	2300      	movs	r3, #0
 8004ff0:	f7fb fcda 	bl	80009a8 <__aeabi_dcmpeq>
 8004ff4:	b9d8      	cbnz	r0, 800502e <_printf_float+0x41e>
 8004ff6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ff8:	f108 0201 	add.w	r2, r8, #1
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	4631      	mov	r1, r6
 8005000:	4628      	mov	r0, r5
 8005002:	47b8      	blx	r7
 8005004:	3001      	adds	r0, #1
 8005006:	d10e      	bne.n	8005026 <_printf_float+0x416>
 8005008:	e65d      	b.n	8004cc6 <_printf_float+0xb6>
 800500a:	2301      	movs	r3, #1
 800500c:	464a      	mov	r2, r9
 800500e:	4631      	mov	r1, r6
 8005010:	4628      	mov	r0, r5
 8005012:	47b8      	blx	r7
 8005014:	3001      	adds	r0, #1
 8005016:	f43f ae56 	beq.w	8004cc6 <_printf_float+0xb6>
 800501a:	f108 0801 	add.w	r8, r8, #1
 800501e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005020:	3b01      	subs	r3, #1
 8005022:	4543      	cmp	r3, r8
 8005024:	dcf1      	bgt.n	800500a <_printf_float+0x3fa>
 8005026:	4653      	mov	r3, sl
 8005028:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800502c:	e6e0      	b.n	8004df0 <_printf_float+0x1e0>
 800502e:	f04f 0800 	mov.w	r8, #0
 8005032:	f104 091a 	add.w	r9, r4, #26
 8005036:	e7f2      	b.n	800501e <_printf_float+0x40e>
 8005038:	2301      	movs	r3, #1
 800503a:	4642      	mov	r2, r8
 800503c:	e7df      	b.n	8004ffe <_printf_float+0x3ee>
 800503e:	2301      	movs	r3, #1
 8005040:	464a      	mov	r2, r9
 8005042:	4631      	mov	r1, r6
 8005044:	4628      	mov	r0, r5
 8005046:	47b8      	blx	r7
 8005048:	3001      	adds	r0, #1
 800504a:	f43f ae3c 	beq.w	8004cc6 <_printf_float+0xb6>
 800504e:	f108 0801 	add.w	r8, r8, #1
 8005052:	68e3      	ldr	r3, [r4, #12]
 8005054:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005056:	1a5b      	subs	r3, r3, r1
 8005058:	4543      	cmp	r3, r8
 800505a:	dcf0      	bgt.n	800503e <_printf_float+0x42e>
 800505c:	e6fd      	b.n	8004e5a <_printf_float+0x24a>
 800505e:	f04f 0800 	mov.w	r8, #0
 8005062:	f104 0919 	add.w	r9, r4, #25
 8005066:	e7f4      	b.n	8005052 <_printf_float+0x442>

08005068 <_printf_common>:
 8005068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800506c:	4616      	mov	r6, r2
 800506e:	4699      	mov	r9, r3
 8005070:	688a      	ldr	r2, [r1, #8]
 8005072:	690b      	ldr	r3, [r1, #16]
 8005074:	4607      	mov	r7, r0
 8005076:	4293      	cmp	r3, r2
 8005078:	bfb8      	it	lt
 800507a:	4613      	movlt	r3, r2
 800507c:	6033      	str	r3, [r6, #0]
 800507e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005082:	460c      	mov	r4, r1
 8005084:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005088:	b10a      	cbz	r2, 800508e <_printf_common+0x26>
 800508a:	3301      	adds	r3, #1
 800508c:	6033      	str	r3, [r6, #0]
 800508e:	6823      	ldr	r3, [r4, #0]
 8005090:	0699      	lsls	r1, r3, #26
 8005092:	bf42      	ittt	mi
 8005094:	6833      	ldrmi	r3, [r6, #0]
 8005096:	3302      	addmi	r3, #2
 8005098:	6033      	strmi	r3, [r6, #0]
 800509a:	6825      	ldr	r5, [r4, #0]
 800509c:	f015 0506 	ands.w	r5, r5, #6
 80050a0:	d106      	bne.n	80050b0 <_printf_common+0x48>
 80050a2:	f104 0a19 	add.w	sl, r4, #25
 80050a6:	68e3      	ldr	r3, [r4, #12]
 80050a8:	6832      	ldr	r2, [r6, #0]
 80050aa:	1a9b      	subs	r3, r3, r2
 80050ac:	42ab      	cmp	r3, r5
 80050ae:	dc28      	bgt.n	8005102 <_printf_common+0x9a>
 80050b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80050b4:	1e13      	subs	r3, r2, #0
 80050b6:	6822      	ldr	r2, [r4, #0]
 80050b8:	bf18      	it	ne
 80050ba:	2301      	movne	r3, #1
 80050bc:	0692      	lsls	r2, r2, #26
 80050be:	d42d      	bmi.n	800511c <_printf_common+0xb4>
 80050c0:	4649      	mov	r1, r9
 80050c2:	4638      	mov	r0, r7
 80050c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050c8:	47c0      	blx	r8
 80050ca:	3001      	adds	r0, #1
 80050cc:	d020      	beq.n	8005110 <_printf_common+0xa8>
 80050ce:	6823      	ldr	r3, [r4, #0]
 80050d0:	68e5      	ldr	r5, [r4, #12]
 80050d2:	f003 0306 	and.w	r3, r3, #6
 80050d6:	2b04      	cmp	r3, #4
 80050d8:	bf18      	it	ne
 80050da:	2500      	movne	r5, #0
 80050dc:	6832      	ldr	r2, [r6, #0]
 80050de:	f04f 0600 	mov.w	r6, #0
 80050e2:	68a3      	ldr	r3, [r4, #8]
 80050e4:	bf08      	it	eq
 80050e6:	1aad      	subeq	r5, r5, r2
 80050e8:	6922      	ldr	r2, [r4, #16]
 80050ea:	bf08      	it	eq
 80050ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050f0:	4293      	cmp	r3, r2
 80050f2:	bfc4      	itt	gt
 80050f4:	1a9b      	subgt	r3, r3, r2
 80050f6:	18ed      	addgt	r5, r5, r3
 80050f8:	341a      	adds	r4, #26
 80050fa:	42b5      	cmp	r5, r6
 80050fc:	d11a      	bne.n	8005134 <_printf_common+0xcc>
 80050fe:	2000      	movs	r0, #0
 8005100:	e008      	b.n	8005114 <_printf_common+0xac>
 8005102:	2301      	movs	r3, #1
 8005104:	4652      	mov	r2, sl
 8005106:	4649      	mov	r1, r9
 8005108:	4638      	mov	r0, r7
 800510a:	47c0      	blx	r8
 800510c:	3001      	adds	r0, #1
 800510e:	d103      	bne.n	8005118 <_printf_common+0xb0>
 8005110:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005118:	3501      	adds	r5, #1
 800511a:	e7c4      	b.n	80050a6 <_printf_common+0x3e>
 800511c:	2030      	movs	r0, #48	; 0x30
 800511e:	18e1      	adds	r1, r4, r3
 8005120:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005124:	1c5a      	adds	r2, r3, #1
 8005126:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800512a:	4422      	add	r2, r4
 800512c:	3302      	adds	r3, #2
 800512e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005132:	e7c5      	b.n	80050c0 <_printf_common+0x58>
 8005134:	2301      	movs	r3, #1
 8005136:	4622      	mov	r2, r4
 8005138:	4649      	mov	r1, r9
 800513a:	4638      	mov	r0, r7
 800513c:	47c0      	blx	r8
 800513e:	3001      	adds	r0, #1
 8005140:	d0e6      	beq.n	8005110 <_printf_common+0xa8>
 8005142:	3601      	adds	r6, #1
 8005144:	e7d9      	b.n	80050fa <_printf_common+0x92>
	...

08005148 <_printf_i>:
 8005148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800514c:	7e0f      	ldrb	r7, [r1, #24]
 800514e:	4691      	mov	r9, r2
 8005150:	2f78      	cmp	r7, #120	; 0x78
 8005152:	4680      	mov	r8, r0
 8005154:	460c      	mov	r4, r1
 8005156:	469a      	mov	sl, r3
 8005158:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800515a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800515e:	d807      	bhi.n	8005170 <_printf_i+0x28>
 8005160:	2f62      	cmp	r7, #98	; 0x62
 8005162:	d80a      	bhi.n	800517a <_printf_i+0x32>
 8005164:	2f00      	cmp	r7, #0
 8005166:	f000 80d9 	beq.w	800531c <_printf_i+0x1d4>
 800516a:	2f58      	cmp	r7, #88	; 0x58
 800516c:	f000 80a4 	beq.w	80052b8 <_printf_i+0x170>
 8005170:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005174:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005178:	e03a      	b.n	80051f0 <_printf_i+0xa8>
 800517a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800517e:	2b15      	cmp	r3, #21
 8005180:	d8f6      	bhi.n	8005170 <_printf_i+0x28>
 8005182:	a101      	add	r1, pc, #4	; (adr r1, 8005188 <_printf_i+0x40>)
 8005184:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005188:	080051e1 	.word	0x080051e1
 800518c:	080051f5 	.word	0x080051f5
 8005190:	08005171 	.word	0x08005171
 8005194:	08005171 	.word	0x08005171
 8005198:	08005171 	.word	0x08005171
 800519c:	08005171 	.word	0x08005171
 80051a0:	080051f5 	.word	0x080051f5
 80051a4:	08005171 	.word	0x08005171
 80051a8:	08005171 	.word	0x08005171
 80051ac:	08005171 	.word	0x08005171
 80051b0:	08005171 	.word	0x08005171
 80051b4:	08005303 	.word	0x08005303
 80051b8:	08005225 	.word	0x08005225
 80051bc:	080052e5 	.word	0x080052e5
 80051c0:	08005171 	.word	0x08005171
 80051c4:	08005171 	.word	0x08005171
 80051c8:	08005325 	.word	0x08005325
 80051cc:	08005171 	.word	0x08005171
 80051d0:	08005225 	.word	0x08005225
 80051d4:	08005171 	.word	0x08005171
 80051d8:	08005171 	.word	0x08005171
 80051dc:	080052ed 	.word	0x080052ed
 80051e0:	682b      	ldr	r3, [r5, #0]
 80051e2:	1d1a      	adds	r2, r3, #4
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	602a      	str	r2, [r5, #0]
 80051e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051f0:	2301      	movs	r3, #1
 80051f2:	e0a4      	b.n	800533e <_printf_i+0x1f6>
 80051f4:	6820      	ldr	r0, [r4, #0]
 80051f6:	6829      	ldr	r1, [r5, #0]
 80051f8:	0606      	lsls	r6, r0, #24
 80051fa:	f101 0304 	add.w	r3, r1, #4
 80051fe:	d50a      	bpl.n	8005216 <_printf_i+0xce>
 8005200:	680e      	ldr	r6, [r1, #0]
 8005202:	602b      	str	r3, [r5, #0]
 8005204:	2e00      	cmp	r6, #0
 8005206:	da03      	bge.n	8005210 <_printf_i+0xc8>
 8005208:	232d      	movs	r3, #45	; 0x2d
 800520a:	4276      	negs	r6, r6
 800520c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005210:	230a      	movs	r3, #10
 8005212:	485e      	ldr	r0, [pc, #376]	; (800538c <_printf_i+0x244>)
 8005214:	e019      	b.n	800524a <_printf_i+0x102>
 8005216:	680e      	ldr	r6, [r1, #0]
 8005218:	f010 0f40 	tst.w	r0, #64	; 0x40
 800521c:	602b      	str	r3, [r5, #0]
 800521e:	bf18      	it	ne
 8005220:	b236      	sxthne	r6, r6
 8005222:	e7ef      	b.n	8005204 <_printf_i+0xbc>
 8005224:	682b      	ldr	r3, [r5, #0]
 8005226:	6820      	ldr	r0, [r4, #0]
 8005228:	1d19      	adds	r1, r3, #4
 800522a:	6029      	str	r1, [r5, #0]
 800522c:	0601      	lsls	r1, r0, #24
 800522e:	d501      	bpl.n	8005234 <_printf_i+0xec>
 8005230:	681e      	ldr	r6, [r3, #0]
 8005232:	e002      	b.n	800523a <_printf_i+0xf2>
 8005234:	0646      	lsls	r6, r0, #25
 8005236:	d5fb      	bpl.n	8005230 <_printf_i+0xe8>
 8005238:	881e      	ldrh	r6, [r3, #0]
 800523a:	2f6f      	cmp	r7, #111	; 0x6f
 800523c:	bf0c      	ite	eq
 800523e:	2308      	moveq	r3, #8
 8005240:	230a      	movne	r3, #10
 8005242:	4852      	ldr	r0, [pc, #328]	; (800538c <_printf_i+0x244>)
 8005244:	2100      	movs	r1, #0
 8005246:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800524a:	6865      	ldr	r5, [r4, #4]
 800524c:	2d00      	cmp	r5, #0
 800524e:	bfa8      	it	ge
 8005250:	6821      	ldrge	r1, [r4, #0]
 8005252:	60a5      	str	r5, [r4, #8]
 8005254:	bfa4      	itt	ge
 8005256:	f021 0104 	bicge.w	r1, r1, #4
 800525a:	6021      	strge	r1, [r4, #0]
 800525c:	b90e      	cbnz	r6, 8005262 <_printf_i+0x11a>
 800525e:	2d00      	cmp	r5, #0
 8005260:	d04d      	beq.n	80052fe <_printf_i+0x1b6>
 8005262:	4615      	mov	r5, r2
 8005264:	fbb6 f1f3 	udiv	r1, r6, r3
 8005268:	fb03 6711 	mls	r7, r3, r1, r6
 800526c:	5dc7      	ldrb	r7, [r0, r7]
 800526e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005272:	4637      	mov	r7, r6
 8005274:	42bb      	cmp	r3, r7
 8005276:	460e      	mov	r6, r1
 8005278:	d9f4      	bls.n	8005264 <_printf_i+0x11c>
 800527a:	2b08      	cmp	r3, #8
 800527c:	d10b      	bne.n	8005296 <_printf_i+0x14e>
 800527e:	6823      	ldr	r3, [r4, #0]
 8005280:	07de      	lsls	r6, r3, #31
 8005282:	d508      	bpl.n	8005296 <_printf_i+0x14e>
 8005284:	6923      	ldr	r3, [r4, #16]
 8005286:	6861      	ldr	r1, [r4, #4]
 8005288:	4299      	cmp	r1, r3
 800528a:	bfde      	ittt	le
 800528c:	2330      	movle	r3, #48	; 0x30
 800528e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005292:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005296:	1b52      	subs	r2, r2, r5
 8005298:	6122      	str	r2, [r4, #16]
 800529a:	464b      	mov	r3, r9
 800529c:	4621      	mov	r1, r4
 800529e:	4640      	mov	r0, r8
 80052a0:	f8cd a000 	str.w	sl, [sp]
 80052a4:	aa03      	add	r2, sp, #12
 80052a6:	f7ff fedf 	bl	8005068 <_printf_common>
 80052aa:	3001      	adds	r0, #1
 80052ac:	d14c      	bne.n	8005348 <_printf_i+0x200>
 80052ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052b2:	b004      	add	sp, #16
 80052b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052b8:	4834      	ldr	r0, [pc, #208]	; (800538c <_printf_i+0x244>)
 80052ba:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80052be:	6829      	ldr	r1, [r5, #0]
 80052c0:	6823      	ldr	r3, [r4, #0]
 80052c2:	f851 6b04 	ldr.w	r6, [r1], #4
 80052c6:	6029      	str	r1, [r5, #0]
 80052c8:	061d      	lsls	r5, r3, #24
 80052ca:	d514      	bpl.n	80052f6 <_printf_i+0x1ae>
 80052cc:	07df      	lsls	r7, r3, #31
 80052ce:	bf44      	itt	mi
 80052d0:	f043 0320 	orrmi.w	r3, r3, #32
 80052d4:	6023      	strmi	r3, [r4, #0]
 80052d6:	b91e      	cbnz	r6, 80052e0 <_printf_i+0x198>
 80052d8:	6823      	ldr	r3, [r4, #0]
 80052da:	f023 0320 	bic.w	r3, r3, #32
 80052de:	6023      	str	r3, [r4, #0]
 80052e0:	2310      	movs	r3, #16
 80052e2:	e7af      	b.n	8005244 <_printf_i+0xfc>
 80052e4:	6823      	ldr	r3, [r4, #0]
 80052e6:	f043 0320 	orr.w	r3, r3, #32
 80052ea:	6023      	str	r3, [r4, #0]
 80052ec:	2378      	movs	r3, #120	; 0x78
 80052ee:	4828      	ldr	r0, [pc, #160]	; (8005390 <_printf_i+0x248>)
 80052f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052f4:	e7e3      	b.n	80052be <_printf_i+0x176>
 80052f6:	0659      	lsls	r1, r3, #25
 80052f8:	bf48      	it	mi
 80052fa:	b2b6      	uxthmi	r6, r6
 80052fc:	e7e6      	b.n	80052cc <_printf_i+0x184>
 80052fe:	4615      	mov	r5, r2
 8005300:	e7bb      	b.n	800527a <_printf_i+0x132>
 8005302:	682b      	ldr	r3, [r5, #0]
 8005304:	6826      	ldr	r6, [r4, #0]
 8005306:	1d18      	adds	r0, r3, #4
 8005308:	6961      	ldr	r1, [r4, #20]
 800530a:	6028      	str	r0, [r5, #0]
 800530c:	0635      	lsls	r5, r6, #24
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	d501      	bpl.n	8005316 <_printf_i+0x1ce>
 8005312:	6019      	str	r1, [r3, #0]
 8005314:	e002      	b.n	800531c <_printf_i+0x1d4>
 8005316:	0670      	lsls	r0, r6, #25
 8005318:	d5fb      	bpl.n	8005312 <_printf_i+0x1ca>
 800531a:	8019      	strh	r1, [r3, #0]
 800531c:	2300      	movs	r3, #0
 800531e:	4615      	mov	r5, r2
 8005320:	6123      	str	r3, [r4, #16]
 8005322:	e7ba      	b.n	800529a <_printf_i+0x152>
 8005324:	682b      	ldr	r3, [r5, #0]
 8005326:	2100      	movs	r1, #0
 8005328:	1d1a      	adds	r2, r3, #4
 800532a:	602a      	str	r2, [r5, #0]
 800532c:	681d      	ldr	r5, [r3, #0]
 800532e:	6862      	ldr	r2, [r4, #4]
 8005330:	4628      	mov	r0, r5
 8005332:	f002 faef 	bl	8007914 <memchr>
 8005336:	b108      	cbz	r0, 800533c <_printf_i+0x1f4>
 8005338:	1b40      	subs	r0, r0, r5
 800533a:	6060      	str	r0, [r4, #4]
 800533c:	6863      	ldr	r3, [r4, #4]
 800533e:	6123      	str	r3, [r4, #16]
 8005340:	2300      	movs	r3, #0
 8005342:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005346:	e7a8      	b.n	800529a <_printf_i+0x152>
 8005348:	462a      	mov	r2, r5
 800534a:	4649      	mov	r1, r9
 800534c:	4640      	mov	r0, r8
 800534e:	6923      	ldr	r3, [r4, #16]
 8005350:	47d0      	blx	sl
 8005352:	3001      	adds	r0, #1
 8005354:	d0ab      	beq.n	80052ae <_printf_i+0x166>
 8005356:	6823      	ldr	r3, [r4, #0]
 8005358:	079b      	lsls	r3, r3, #30
 800535a:	d413      	bmi.n	8005384 <_printf_i+0x23c>
 800535c:	68e0      	ldr	r0, [r4, #12]
 800535e:	9b03      	ldr	r3, [sp, #12]
 8005360:	4298      	cmp	r0, r3
 8005362:	bfb8      	it	lt
 8005364:	4618      	movlt	r0, r3
 8005366:	e7a4      	b.n	80052b2 <_printf_i+0x16a>
 8005368:	2301      	movs	r3, #1
 800536a:	4632      	mov	r2, r6
 800536c:	4649      	mov	r1, r9
 800536e:	4640      	mov	r0, r8
 8005370:	47d0      	blx	sl
 8005372:	3001      	adds	r0, #1
 8005374:	d09b      	beq.n	80052ae <_printf_i+0x166>
 8005376:	3501      	adds	r5, #1
 8005378:	68e3      	ldr	r3, [r4, #12]
 800537a:	9903      	ldr	r1, [sp, #12]
 800537c:	1a5b      	subs	r3, r3, r1
 800537e:	42ab      	cmp	r3, r5
 8005380:	dcf2      	bgt.n	8005368 <_printf_i+0x220>
 8005382:	e7eb      	b.n	800535c <_printf_i+0x214>
 8005384:	2500      	movs	r5, #0
 8005386:	f104 0619 	add.w	r6, r4, #25
 800538a:	e7f5      	b.n	8005378 <_printf_i+0x230>
 800538c:	08009b26 	.word	0x08009b26
 8005390:	08009b37 	.word	0x08009b37

08005394 <_scanf_float>:
 8005394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005398:	b087      	sub	sp, #28
 800539a:	9303      	str	r3, [sp, #12]
 800539c:	688b      	ldr	r3, [r1, #8]
 800539e:	4617      	mov	r7, r2
 80053a0:	1e5a      	subs	r2, r3, #1
 80053a2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80053a6:	bf85      	ittet	hi
 80053a8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80053ac:	195b      	addhi	r3, r3, r5
 80053ae:	2300      	movls	r3, #0
 80053b0:	9302      	strhi	r3, [sp, #8]
 80053b2:	bf88      	it	hi
 80053b4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80053b8:	468b      	mov	fp, r1
 80053ba:	f04f 0500 	mov.w	r5, #0
 80053be:	bf8c      	ite	hi
 80053c0:	608b      	strhi	r3, [r1, #8]
 80053c2:	9302      	strls	r3, [sp, #8]
 80053c4:	680b      	ldr	r3, [r1, #0]
 80053c6:	4680      	mov	r8, r0
 80053c8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80053cc:	f84b 3b1c 	str.w	r3, [fp], #28
 80053d0:	460c      	mov	r4, r1
 80053d2:	465e      	mov	r6, fp
 80053d4:	46aa      	mov	sl, r5
 80053d6:	46a9      	mov	r9, r5
 80053d8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80053dc:	9501      	str	r5, [sp, #4]
 80053de:	68a2      	ldr	r2, [r4, #8]
 80053e0:	b152      	cbz	r2, 80053f8 <_scanf_float+0x64>
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	2b4e      	cmp	r3, #78	; 0x4e
 80053e8:	d864      	bhi.n	80054b4 <_scanf_float+0x120>
 80053ea:	2b40      	cmp	r3, #64	; 0x40
 80053ec:	d83c      	bhi.n	8005468 <_scanf_float+0xd4>
 80053ee:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80053f2:	b2c8      	uxtb	r0, r1
 80053f4:	280e      	cmp	r0, #14
 80053f6:	d93a      	bls.n	800546e <_scanf_float+0xda>
 80053f8:	f1b9 0f00 	cmp.w	r9, #0
 80053fc:	d003      	beq.n	8005406 <_scanf_float+0x72>
 80053fe:	6823      	ldr	r3, [r4, #0]
 8005400:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005404:	6023      	str	r3, [r4, #0]
 8005406:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800540a:	f1ba 0f01 	cmp.w	sl, #1
 800540e:	f200 8113 	bhi.w	8005638 <_scanf_float+0x2a4>
 8005412:	455e      	cmp	r6, fp
 8005414:	f200 8105 	bhi.w	8005622 <_scanf_float+0x28e>
 8005418:	2501      	movs	r5, #1
 800541a:	4628      	mov	r0, r5
 800541c:	b007      	add	sp, #28
 800541e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005422:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005426:	2a0d      	cmp	r2, #13
 8005428:	d8e6      	bhi.n	80053f8 <_scanf_float+0x64>
 800542a:	a101      	add	r1, pc, #4	; (adr r1, 8005430 <_scanf_float+0x9c>)
 800542c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005430:	0800556f 	.word	0x0800556f
 8005434:	080053f9 	.word	0x080053f9
 8005438:	080053f9 	.word	0x080053f9
 800543c:	080053f9 	.word	0x080053f9
 8005440:	080055cf 	.word	0x080055cf
 8005444:	080055a7 	.word	0x080055a7
 8005448:	080053f9 	.word	0x080053f9
 800544c:	080053f9 	.word	0x080053f9
 8005450:	0800557d 	.word	0x0800557d
 8005454:	080053f9 	.word	0x080053f9
 8005458:	080053f9 	.word	0x080053f9
 800545c:	080053f9 	.word	0x080053f9
 8005460:	080053f9 	.word	0x080053f9
 8005464:	08005535 	.word	0x08005535
 8005468:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800546c:	e7db      	b.n	8005426 <_scanf_float+0x92>
 800546e:	290e      	cmp	r1, #14
 8005470:	d8c2      	bhi.n	80053f8 <_scanf_float+0x64>
 8005472:	a001      	add	r0, pc, #4	; (adr r0, 8005478 <_scanf_float+0xe4>)
 8005474:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005478:	08005527 	.word	0x08005527
 800547c:	080053f9 	.word	0x080053f9
 8005480:	08005527 	.word	0x08005527
 8005484:	080055bb 	.word	0x080055bb
 8005488:	080053f9 	.word	0x080053f9
 800548c:	080054d5 	.word	0x080054d5
 8005490:	08005511 	.word	0x08005511
 8005494:	08005511 	.word	0x08005511
 8005498:	08005511 	.word	0x08005511
 800549c:	08005511 	.word	0x08005511
 80054a0:	08005511 	.word	0x08005511
 80054a4:	08005511 	.word	0x08005511
 80054a8:	08005511 	.word	0x08005511
 80054ac:	08005511 	.word	0x08005511
 80054b0:	08005511 	.word	0x08005511
 80054b4:	2b6e      	cmp	r3, #110	; 0x6e
 80054b6:	d809      	bhi.n	80054cc <_scanf_float+0x138>
 80054b8:	2b60      	cmp	r3, #96	; 0x60
 80054ba:	d8b2      	bhi.n	8005422 <_scanf_float+0x8e>
 80054bc:	2b54      	cmp	r3, #84	; 0x54
 80054be:	d077      	beq.n	80055b0 <_scanf_float+0x21c>
 80054c0:	2b59      	cmp	r3, #89	; 0x59
 80054c2:	d199      	bne.n	80053f8 <_scanf_float+0x64>
 80054c4:	2d07      	cmp	r5, #7
 80054c6:	d197      	bne.n	80053f8 <_scanf_float+0x64>
 80054c8:	2508      	movs	r5, #8
 80054ca:	e029      	b.n	8005520 <_scanf_float+0x18c>
 80054cc:	2b74      	cmp	r3, #116	; 0x74
 80054ce:	d06f      	beq.n	80055b0 <_scanf_float+0x21c>
 80054d0:	2b79      	cmp	r3, #121	; 0x79
 80054d2:	e7f6      	b.n	80054c2 <_scanf_float+0x12e>
 80054d4:	6821      	ldr	r1, [r4, #0]
 80054d6:	05c8      	lsls	r0, r1, #23
 80054d8:	d51a      	bpl.n	8005510 <_scanf_float+0x17c>
 80054da:	9b02      	ldr	r3, [sp, #8]
 80054dc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80054e0:	6021      	str	r1, [r4, #0]
 80054e2:	f109 0901 	add.w	r9, r9, #1
 80054e6:	b11b      	cbz	r3, 80054f0 <_scanf_float+0x15c>
 80054e8:	3b01      	subs	r3, #1
 80054ea:	3201      	adds	r2, #1
 80054ec:	9302      	str	r3, [sp, #8]
 80054ee:	60a2      	str	r2, [r4, #8]
 80054f0:	68a3      	ldr	r3, [r4, #8]
 80054f2:	3b01      	subs	r3, #1
 80054f4:	60a3      	str	r3, [r4, #8]
 80054f6:	6923      	ldr	r3, [r4, #16]
 80054f8:	3301      	adds	r3, #1
 80054fa:	6123      	str	r3, [r4, #16]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	3b01      	subs	r3, #1
 8005500:	2b00      	cmp	r3, #0
 8005502:	607b      	str	r3, [r7, #4]
 8005504:	f340 8084 	ble.w	8005610 <_scanf_float+0x27c>
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	3301      	adds	r3, #1
 800550c:	603b      	str	r3, [r7, #0]
 800550e:	e766      	b.n	80053de <_scanf_float+0x4a>
 8005510:	eb1a 0f05 	cmn.w	sl, r5
 8005514:	f47f af70 	bne.w	80053f8 <_scanf_float+0x64>
 8005518:	6822      	ldr	r2, [r4, #0]
 800551a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800551e:	6022      	str	r2, [r4, #0]
 8005520:	f806 3b01 	strb.w	r3, [r6], #1
 8005524:	e7e4      	b.n	80054f0 <_scanf_float+0x15c>
 8005526:	6822      	ldr	r2, [r4, #0]
 8005528:	0610      	lsls	r0, r2, #24
 800552a:	f57f af65 	bpl.w	80053f8 <_scanf_float+0x64>
 800552e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005532:	e7f4      	b.n	800551e <_scanf_float+0x18a>
 8005534:	f1ba 0f00 	cmp.w	sl, #0
 8005538:	d10e      	bne.n	8005558 <_scanf_float+0x1c4>
 800553a:	f1b9 0f00 	cmp.w	r9, #0
 800553e:	d10e      	bne.n	800555e <_scanf_float+0x1ca>
 8005540:	6822      	ldr	r2, [r4, #0]
 8005542:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005546:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800554a:	d108      	bne.n	800555e <_scanf_float+0x1ca>
 800554c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005550:	f04f 0a01 	mov.w	sl, #1
 8005554:	6022      	str	r2, [r4, #0]
 8005556:	e7e3      	b.n	8005520 <_scanf_float+0x18c>
 8005558:	f1ba 0f02 	cmp.w	sl, #2
 800555c:	d055      	beq.n	800560a <_scanf_float+0x276>
 800555e:	2d01      	cmp	r5, #1
 8005560:	d002      	beq.n	8005568 <_scanf_float+0x1d4>
 8005562:	2d04      	cmp	r5, #4
 8005564:	f47f af48 	bne.w	80053f8 <_scanf_float+0x64>
 8005568:	3501      	adds	r5, #1
 800556a:	b2ed      	uxtb	r5, r5
 800556c:	e7d8      	b.n	8005520 <_scanf_float+0x18c>
 800556e:	f1ba 0f01 	cmp.w	sl, #1
 8005572:	f47f af41 	bne.w	80053f8 <_scanf_float+0x64>
 8005576:	f04f 0a02 	mov.w	sl, #2
 800557a:	e7d1      	b.n	8005520 <_scanf_float+0x18c>
 800557c:	b97d      	cbnz	r5, 800559e <_scanf_float+0x20a>
 800557e:	f1b9 0f00 	cmp.w	r9, #0
 8005582:	f47f af3c 	bne.w	80053fe <_scanf_float+0x6a>
 8005586:	6822      	ldr	r2, [r4, #0]
 8005588:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800558c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005590:	f47f af39 	bne.w	8005406 <_scanf_float+0x72>
 8005594:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005598:	2501      	movs	r5, #1
 800559a:	6022      	str	r2, [r4, #0]
 800559c:	e7c0      	b.n	8005520 <_scanf_float+0x18c>
 800559e:	2d03      	cmp	r5, #3
 80055a0:	d0e2      	beq.n	8005568 <_scanf_float+0x1d4>
 80055a2:	2d05      	cmp	r5, #5
 80055a4:	e7de      	b.n	8005564 <_scanf_float+0x1d0>
 80055a6:	2d02      	cmp	r5, #2
 80055a8:	f47f af26 	bne.w	80053f8 <_scanf_float+0x64>
 80055ac:	2503      	movs	r5, #3
 80055ae:	e7b7      	b.n	8005520 <_scanf_float+0x18c>
 80055b0:	2d06      	cmp	r5, #6
 80055b2:	f47f af21 	bne.w	80053f8 <_scanf_float+0x64>
 80055b6:	2507      	movs	r5, #7
 80055b8:	e7b2      	b.n	8005520 <_scanf_float+0x18c>
 80055ba:	6822      	ldr	r2, [r4, #0]
 80055bc:	0591      	lsls	r1, r2, #22
 80055be:	f57f af1b 	bpl.w	80053f8 <_scanf_float+0x64>
 80055c2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80055c6:	6022      	str	r2, [r4, #0]
 80055c8:	f8cd 9004 	str.w	r9, [sp, #4]
 80055cc:	e7a8      	b.n	8005520 <_scanf_float+0x18c>
 80055ce:	6822      	ldr	r2, [r4, #0]
 80055d0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80055d4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80055d8:	d006      	beq.n	80055e8 <_scanf_float+0x254>
 80055da:	0550      	lsls	r0, r2, #21
 80055dc:	f57f af0c 	bpl.w	80053f8 <_scanf_float+0x64>
 80055e0:	f1b9 0f00 	cmp.w	r9, #0
 80055e4:	f43f af0f 	beq.w	8005406 <_scanf_float+0x72>
 80055e8:	0591      	lsls	r1, r2, #22
 80055ea:	bf58      	it	pl
 80055ec:	9901      	ldrpl	r1, [sp, #4]
 80055ee:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80055f2:	bf58      	it	pl
 80055f4:	eba9 0101 	subpl.w	r1, r9, r1
 80055f8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80055fc:	f04f 0900 	mov.w	r9, #0
 8005600:	bf58      	it	pl
 8005602:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005606:	6022      	str	r2, [r4, #0]
 8005608:	e78a      	b.n	8005520 <_scanf_float+0x18c>
 800560a:	f04f 0a03 	mov.w	sl, #3
 800560e:	e787      	b.n	8005520 <_scanf_float+0x18c>
 8005610:	4639      	mov	r1, r7
 8005612:	4640      	mov	r0, r8
 8005614:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005618:	4798      	blx	r3
 800561a:	2800      	cmp	r0, #0
 800561c:	f43f aedf 	beq.w	80053de <_scanf_float+0x4a>
 8005620:	e6ea      	b.n	80053f8 <_scanf_float+0x64>
 8005622:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005626:	463a      	mov	r2, r7
 8005628:	4640      	mov	r0, r8
 800562a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800562e:	4798      	blx	r3
 8005630:	6923      	ldr	r3, [r4, #16]
 8005632:	3b01      	subs	r3, #1
 8005634:	6123      	str	r3, [r4, #16]
 8005636:	e6ec      	b.n	8005412 <_scanf_float+0x7e>
 8005638:	1e6b      	subs	r3, r5, #1
 800563a:	2b06      	cmp	r3, #6
 800563c:	d825      	bhi.n	800568a <_scanf_float+0x2f6>
 800563e:	2d02      	cmp	r5, #2
 8005640:	d836      	bhi.n	80056b0 <_scanf_float+0x31c>
 8005642:	455e      	cmp	r6, fp
 8005644:	f67f aee8 	bls.w	8005418 <_scanf_float+0x84>
 8005648:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800564c:	463a      	mov	r2, r7
 800564e:	4640      	mov	r0, r8
 8005650:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005654:	4798      	blx	r3
 8005656:	6923      	ldr	r3, [r4, #16]
 8005658:	3b01      	subs	r3, #1
 800565a:	6123      	str	r3, [r4, #16]
 800565c:	e7f1      	b.n	8005642 <_scanf_float+0x2ae>
 800565e:	9802      	ldr	r0, [sp, #8]
 8005660:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005664:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005668:	463a      	mov	r2, r7
 800566a:	9002      	str	r0, [sp, #8]
 800566c:	4640      	mov	r0, r8
 800566e:	4798      	blx	r3
 8005670:	6923      	ldr	r3, [r4, #16]
 8005672:	3b01      	subs	r3, #1
 8005674:	6123      	str	r3, [r4, #16]
 8005676:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800567a:	fa5f fa8a 	uxtb.w	sl, sl
 800567e:	f1ba 0f02 	cmp.w	sl, #2
 8005682:	d1ec      	bne.n	800565e <_scanf_float+0x2ca>
 8005684:	3d03      	subs	r5, #3
 8005686:	b2ed      	uxtb	r5, r5
 8005688:	1b76      	subs	r6, r6, r5
 800568a:	6823      	ldr	r3, [r4, #0]
 800568c:	05da      	lsls	r2, r3, #23
 800568e:	d52f      	bpl.n	80056f0 <_scanf_float+0x35c>
 8005690:	055b      	lsls	r3, r3, #21
 8005692:	d510      	bpl.n	80056b6 <_scanf_float+0x322>
 8005694:	455e      	cmp	r6, fp
 8005696:	f67f aebf 	bls.w	8005418 <_scanf_float+0x84>
 800569a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800569e:	463a      	mov	r2, r7
 80056a0:	4640      	mov	r0, r8
 80056a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80056a6:	4798      	blx	r3
 80056a8:	6923      	ldr	r3, [r4, #16]
 80056aa:	3b01      	subs	r3, #1
 80056ac:	6123      	str	r3, [r4, #16]
 80056ae:	e7f1      	b.n	8005694 <_scanf_float+0x300>
 80056b0:	46aa      	mov	sl, r5
 80056b2:	9602      	str	r6, [sp, #8]
 80056b4:	e7df      	b.n	8005676 <_scanf_float+0x2e2>
 80056b6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80056ba:	6923      	ldr	r3, [r4, #16]
 80056bc:	2965      	cmp	r1, #101	; 0x65
 80056be:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80056c2:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80056c6:	6123      	str	r3, [r4, #16]
 80056c8:	d00c      	beq.n	80056e4 <_scanf_float+0x350>
 80056ca:	2945      	cmp	r1, #69	; 0x45
 80056cc:	d00a      	beq.n	80056e4 <_scanf_float+0x350>
 80056ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056d2:	463a      	mov	r2, r7
 80056d4:	4640      	mov	r0, r8
 80056d6:	4798      	blx	r3
 80056d8:	6923      	ldr	r3, [r4, #16]
 80056da:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80056de:	3b01      	subs	r3, #1
 80056e0:	1eb5      	subs	r5, r6, #2
 80056e2:	6123      	str	r3, [r4, #16]
 80056e4:	463a      	mov	r2, r7
 80056e6:	4640      	mov	r0, r8
 80056e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056ec:	4798      	blx	r3
 80056ee:	462e      	mov	r6, r5
 80056f0:	6825      	ldr	r5, [r4, #0]
 80056f2:	f015 0510 	ands.w	r5, r5, #16
 80056f6:	d155      	bne.n	80057a4 <_scanf_float+0x410>
 80056f8:	7035      	strb	r5, [r6, #0]
 80056fa:	6823      	ldr	r3, [r4, #0]
 80056fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005704:	d11b      	bne.n	800573e <_scanf_float+0x3aa>
 8005706:	9b01      	ldr	r3, [sp, #4]
 8005708:	454b      	cmp	r3, r9
 800570a:	eba3 0209 	sub.w	r2, r3, r9
 800570e:	d123      	bne.n	8005758 <_scanf_float+0x3c4>
 8005710:	2200      	movs	r2, #0
 8005712:	4659      	mov	r1, fp
 8005714:	4640      	mov	r0, r8
 8005716:	f000 fe7b 	bl	8006410 <_strtod_r>
 800571a:	6822      	ldr	r2, [r4, #0]
 800571c:	9b03      	ldr	r3, [sp, #12]
 800571e:	f012 0f02 	tst.w	r2, #2
 8005722:	4606      	mov	r6, r0
 8005724:	460f      	mov	r7, r1
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	d021      	beq.n	800576e <_scanf_float+0x3da>
 800572a:	1d1a      	adds	r2, r3, #4
 800572c:	9903      	ldr	r1, [sp, #12]
 800572e:	600a      	str	r2, [r1, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	e9c3 6700 	strd	r6, r7, [r3]
 8005736:	68e3      	ldr	r3, [r4, #12]
 8005738:	3301      	adds	r3, #1
 800573a:	60e3      	str	r3, [r4, #12]
 800573c:	e66d      	b.n	800541a <_scanf_float+0x86>
 800573e:	9b04      	ldr	r3, [sp, #16]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d0e5      	beq.n	8005710 <_scanf_float+0x37c>
 8005744:	9905      	ldr	r1, [sp, #20]
 8005746:	230a      	movs	r3, #10
 8005748:	462a      	mov	r2, r5
 800574a:	4640      	mov	r0, r8
 800574c:	3101      	adds	r1, #1
 800574e:	f000 fee1 	bl	8006514 <_strtol_r>
 8005752:	9b04      	ldr	r3, [sp, #16]
 8005754:	9e05      	ldr	r6, [sp, #20]
 8005756:	1ac2      	subs	r2, r0, r3
 8005758:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800575c:	429e      	cmp	r6, r3
 800575e:	bf28      	it	cs
 8005760:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005764:	4630      	mov	r0, r6
 8005766:	4910      	ldr	r1, [pc, #64]	; (80057a8 <_scanf_float+0x414>)
 8005768:	f000 f826 	bl	80057b8 <siprintf>
 800576c:	e7d0      	b.n	8005710 <_scanf_float+0x37c>
 800576e:	f012 0f04 	tst.w	r2, #4
 8005772:	f103 0204 	add.w	r2, r3, #4
 8005776:	d1d9      	bne.n	800572c <_scanf_float+0x398>
 8005778:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800577c:	f8cc 2000 	str.w	r2, [ip]
 8005780:	f8d3 8000 	ldr.w	r8, [r3]
 8005784:	4602      	mov	r2, r0
 8005786:	460b      	mov	r3, r1
 8005788:	f7fb f940 	bl	8000a0c <__aeabi_dcmpun>
 800578c:	b128      	cbz	r0, 800579a <_scanf_float+0x406>
 800578e:	4807      	ldr	r0, [pc, #28]	; (80057ac <_scanf_float+0x418>)
 8005790:	f000 f80e 	bl	80057b0 <nanf>
 8005794:	f8c8 0000 	str.w	r0, [r8]
 8005798:	e7cd      	b.n	8005736 <_scanf_float+0x3a2>
 800579a:	4630      	mov	r0, r6
 800579c:	4639      	mov	r1, r7
 800579e:	f7fb f993 	bl	8000ac8 <__aeabi_d2f>
 80057a2:	e7f7      	b.n	8005794 <_scanf_float+0x400>
 80057a4:	2500      	movs	r5, #0
 80057a6:	e638      	b.n	800541a <_scanf_float+0x86>
 80057a8:	08009b48 	.word	0x08009b48
 80057ac:	08009f50 	.word	0x08009f50

080057b0 <nanf>:
 80057b0:	4800      	ldr	r0, [pc, #0]	; (80057b4 <nanf+0x4>)
 80057b2:	4770      	bx	lr
 80057b4:	7fc00000 	.word	0x7fc00000

080057b8 <siprintf>:
 80057b8:	b40e      	push	{r1, r2, r3}
 80057ba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80057be:	b500      	push	{lr}
 80057c0:	b09c      	sub	sp, #112	; 0x70
 80057c2:	ab1d      	add	r3, sp, #116	; 0x74
 80057c4:	9002      	str	r0, [sp, #8]
 80057c6:	9006      	str	r0, [sp, #24]
 80057c8:	9107      	str	r1, [sp, #28]
 80057ca:	9104      	str	r1, [sp, #16]
 80057cc:	4808      	ldr	r0, [pc, #32]	; (80057f0 <siprintf+0x38>)
 80057ce:	4909      	ldr	r1, [pc, #36]	; (80057f4 <siprintf+0x3c>)
 80057d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80057d4:	9105      	str	r1, [sp, #20]
 80057d6:	6800      	ldr	r0, [r0, #0]
 80057d8:	a902      	add	r1, sp, #8
 80057da:	9301      	str	r3, [sp, #4]
 80057dc:	f002 feba 	bl	8008554 <_svfiprintf_r>
 80057e0:	2200      	movs	r2, #0
 80057e2:	9b02      	ldr	r3, [sp, #8]
 80057e4:	701a      	strb	r2, [r3, #0]
 80057e6:	b01c      	add	sp, #112	; 0x70
 80057e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80057ec:	b003      	add	sp, #12
 80057ee:	4770      	bx	lr
 80057f0:	20000018 	.word	0x20000018
 80057f4:	ffff0208 	.word	0xffff0208

080057f8 <sulp>:
 80057f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057fc:	460f      	mov	r7, r1
 80057fe:	4690      	mov	r8, r2
 8005800:	f002 fc14 	bl	800802c <__ulp>
 8005804:	4604      	mov	r4, r0
 8005806:	460d      	mov	r5, r1
 8005808:	f1b8 0f00 	cmp.w	r8, #0
 800580c:	d011      	beq.n	8005832 <sulp+0x3a>
 800580e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005812:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005816:	2b00      	cmp	r3, #0
 8005818:	dd0b      	ble.n	8005832 <sulp+0x3a>
 800581a:	2400      	movs	r4, #0
 800581c:	051b      	lsls	r3, r3, #20
 800581e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005822:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005826:	4622      	mov	r2, r4
 8005828:	462b      	mov	r3, r5
 800582a:	f7fa fe55 	bl	80004d8 <__aeabi_dmul>
 800582e:	4604      	mov	r4, r0
 8005830:	460d      	mov	r5, r1
 8005832:	4620      	mov	r0, r4
 8005834:	4629      	mov	r1, r5
 8005836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800583a:	0000      	movs	r0, r0
 800583c:	0000      	movs	r0, r0
	...

08005840 <_strtod_l>:
 8005840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005844:	469b      	mov	fp, r3
 8005846:	2300      	movs	r3, #0
 8005848:	b09f      	sub	sp, #124	; 0x7c
 800584a:	931a      	str	r3, [sp, #104]	; 0x68
 800584c:	4b9e      	ldr	r3, [pc, #632]	; (8005ac8 <_strtod_l+0x288>)
 800584e:	4682      	mov	sl, r0
 8005850:	681f      	ldr	r7, [r3, #0]
 8005852:	460e      	mov	r6, r1
 8005854:	4638      	mov	r0, r7
 8005856:	9215      	str	r2, [sp, #84]	; 0x54
 8005858:	f7fa fc7a 	bl	8000150 <strlen>
 800585c:	f04f 0800 	mov.w	r8, #0
 8005860:	4604      	mov	r4, r0
 8005862:	f04f 0900 	mov.w	r9, #0
 8005866:	9619      	str	r6, [sp, #100]	; 0x64
 8005868:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800586a:	781a      	ldrb	r2, [r3, #0]
 800586c:	2a2b      	cmp	r2, #43	; 0x2b
 800586e:	d04c      	beq.n	800590a <_strtod_l+0xca>
 8005870:	d83a      	bhi.n	80058e8 <_strtod_l+0xa8>
 8005872:	2a0d      	cmp	r2, #13
 8005874:	d833      	bhi.n	80058de <_strtod_l+0x9e>
 8005876:	2a08      	cmp	r2, #8
 8005878:	d833      	bhi.n	80058e2 <_strtod_l+0xa2>
 800587a:	2a00      	cmp	r2, #0
 800587c:	d03d      	beq.n	80058fa <_strtod_l+0xba>
 800587e:	2300      	movs	r3, #0
 8005880:	930a      	str	r3, [sp, #40]	; 0x28
 8005882:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8005884:	782b      	ldrb	r3, [r5, #0]
 8005886:	2b30      	cmp	r3, #48	; 0x30
 8005888:	f040 80aa 	bne.w	80059e0 <_strtod_l+0x1a0>
 800588c:	786b      	ldrb	r3, [r5, #1]
 800588e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005892:	2b58      	cmp	r3, #88	; 0x58
 8005894:	d166      	bne.n	8005964 <_strtod_l+0x124>
 8005896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005898:	4650      	mov	r0, sl
 800589a:	9301      	str	r3, [sp, #4]
 800589c:	ab1a      	add	r3, sp, #104	; 0x68
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	4a8a      	ldr	r2, [pc, #552]	; (8005acc <_strtod_l+0x28c>)
 80058a2:	f8cd b008 	str.w	fp, [sp, #8]
 80058a6:	ab1b      	add	r3, sp, #108	; 0x6c
 80058a8:	a919      	add	r1, sp, #100	; 0x64
 80058aa:	f001 fd17 	bl	80072dc <__gethex>
 80058ae:	f010 0607 	ands.w	r6, r0, #7
 80058b2:	4604      	mov	r4, r0
 80058b4:	d005      	beq.n	80058c2 <_strtod_l+0x82>
 80058b6:	2e06      	cmp	r6, #6
 80058b8:	d129      	bne.n	800590e <_strtod_l+0xce>
 80058ba:	2300      	movs	r3, #0
 80058bc:	3501      	adds	r5, #1
 80058be:	9519      	str	r5, [sp, #100]	; 0x64
 80058c0:	930a      	str	r3, [sp, #40]	; 0x28
 80058c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f040 858a 	bne.w	80063de <_strtod_l+0xb9e>
 80058ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058cc:	b1d3      	cbz	r3, 8005904 <_strtod_l+0xc4>
 80058ce:	4642      	mov	r2, r8
 80058d0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80058d4:	4610      	mov	r0, r2
 80058d6:	4619      	mov	r1, r3
 80058d8:	b01f      	add	sp, #124	; 0x7c
 80058da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058de:	2a20      	cmp	r2, #32
 80058e0:	d1cd      	bne.n	800587e <_strtod_l+0x3e>
 80058e2:	3301      	adds	r3, #1
 80058e4:	9319      	str	r3, [sp, #100]	; 0x64
 80058e6:	e7bf      	b.n	8005868 <_strtod_l+0x28>
 80058e8:	2a2d      	cmp	r2, #45	; 0x2d
 80058ea:	d1c8      	bne.n	800587e <_strtod_l+0x3e>
 80058ec:	2201      	movs	r2, #1
 80058ee:	920a      	str	r2, [sp, #40]	; 0x28
 80058f0:	1c5a      	adds	r2, r3, #1
 80058f2:	9219      	str	r2, [sp, #100]	; 0x64
 80058f4:	785b      	ldrb	r3, [r3, #1]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1c3      	bne.n	8005882 <_strtod_l+0x42>
 80058fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80058fc:	9619      	str	r6, [sp, #100]	; 0x64
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f040 856b 	bne.w	80063da <_strtod_l+0xb9a>
 8005904:	4642      	mov	r2, r8
 8005906:	464b      	mov	r3, r9
 8005908:	e7e4      	b.n	80058d4 <_strtod_l+0x94>
 800590a:	2200      	movs	r2, #0
 800590c:	e7ef      	b.n	80058ee <_strtod_l+0xae>
 800590e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005910:	b13a      	cbz	r2, 8005922 <_strtod_l+0xe2>
 8005912:	2135      	movs	r1, #53	; 0x35
 8005914:	a81c      	add	r0, sp, #112	; 0x70
 8005916:	f002 fc8d 	bl	8008234 <__copybits>
 800591a:	4650      	mov	r0, sl
 800591c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800591e:	f002 f855 	bl	80079cc <_Bfree>
 8005922:	3e01      	subs	r6, #1
 8005924:	2e04      	cmp	r6, #4
 8005926:	d806      	bhi.n	8005936 <_strtod_l+0xf6>
 8005928:	e8df f006 	tbb	[pc, r6]
 800592c:	1714030a 	.word	0x1714030a
 8005930:	0a          	.byte	0x0a
 8005931:	00          	.byte	0x00
 8005932:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8005936:	0721      	lsls	r1, r4, #28
 8005938:	d5c3      	bpl.n	80058c2 <_strtod_l+0x82>
 800593a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800593e:	e7c0      	b.n	80058c2 <_strtod_l+0x82>
 8005940:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005942:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8005946:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800594a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800594e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005952:	e7f0      	b.n	8005936 <_strtod_l+0xf6>
 8005954:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005ad0 <_strtod_l+0x290>
 8005958:	e7ed      	b.n	8005936 <_strtod_l+0xf6>
 800595a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800595e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005962:	e7e8      	b.n	8005936 <_strtod_l+0xf6>
 8005964:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005966:	1c5a      	adds	r2, r3, #1
 8005968:	9219      	str	r2, [sp, #100]	; 0x64
 800596a:	785b      	ldrb	r3, [r3, #1]
 800596c:	2b30      	cmp	r3, #48	; 0x30
 800596e:	d0f9      	beq.n	8005964 <_strtod_l+0x124>
 8005970:	2b00      	cmp	r3, #0
 8005972:	d0a6      	beq.n	80058c2 <_strtod_l+0x82>
 8005974:	2301      	movs	r3, #1
 8005976:	9307      	str	r3, [sp, #28]
 8005978:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800597a:	220a      	movs	r2, #10
 800597c:	9308      	str	r3, [sp, #32]
 800597e:	2300      	movs	r3, #0
 8005980:	469b      	mov	fp, r3
 8005982:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005986:	9819      	ldr	r0, [sp, #100]	; 0x64
 8005988:	7805      	ldrb	r5, [r0, #0]
 800598a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800598e:	b2d9      	uxtb	r1, r3
 8005990:	2909      	cmp	r1, #9
 8005992:	d927      	bls.n	80059e4 <_strtod_l+0x1a4>
 8005994:	4622      	mov	r2, r4
 8005996:	4639      	mov	r1, r7
 8005998:	f002 fef2 	bl	8008780 <strncmp>
 800599c:	2800      	cmp	r0, #0
 800599e:	d033      	beq.n	8005a08 <_strtod_l+0x1c8>
 80059a0:	2000      	movs	r0, #0
 80059a2:	462a      	mov	r2, r5
 80059a4:	465c      	mov	r4, fp
 80059a6:	4603      	mov	r3, r0
 80059a8:	9004      	str	r0, [sp, #16]
 80059aa:	2a65      	cmp	r2, #101	; 0x65
 80059ac:	d001      	beq.n	80059b2 <_strtod_l+0x172>
 80059ae:	2a45      	cmp	r2, #69	; 0x45
 80059b0:	d114      	bne.n	80059dc <_strtod_l+0x19c>
 80059b2:	b91c      	cbnz	r4, 80059bc <_strtod_l+0x17c>
 80059b4:	9a07      	ldr	r2, [sp, #28]
 80059b6:	4302      	orrs	r2, r0
 80059b8:	d09f      	beq.n	80058fa <_strtod_l+0xba>
 80059ba:	2400      	movs	r4, #0
 80059bc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80059be:	1c72      	adds	r2, r6, #1
 80059c0:	9219      	str	r2, [sp, #100]	; 0x64
 80059c2:	7872      	ldrb	r2, [r6, #1]
 80059c4:	2a2b      	cmp	r2, #43	; 0x2b
 80059c6:	d079      	beq.n	8005abc <_strtod_l+0x27c>
 80059c8:	2a2d      	cmp	r2, #45	; 0x2d
 80059ca:	f000 8083 	beq.w	8005ad4 <_strtod_l+0x294>
 80059ce:	2700      	movs	r7, #0
 80059d0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80059d4:	2909      	cmp	r1, #9
 80059d6:	f240 8083 	bls.w	8005ae0 <_strtod_l+0x2a0>
 80059da:	9619      	str	r6, [sp, #100]	; 0x64
 80059dc:	2500      	movs	r5, #0
 80059de:	e09f      	b.n	8005b20 <_strtod_l+0x2e0>
 80059e0:	2300      	movs	r3, #0
 80059e2:	e7c8      	b.n	8005976 <_strtod_l+0x136>
 80059e4:	f1bb 0f08 	cmp.w	fp, #8
 80059e8:	bfd5      	itete	le
 80059ea:	9906      	ldrle	r1, [sp, #24]
 80059ec:	9905      	ldrgt	r1, [sp, #20]
 80059ee:	fb02 3301 	mlale	r3, r2, r1, r3
 80059f2:	fb02 3301 	mlagt	r3, r2, r1, r3
 80059f6:	f100 0001 	add.w	r0, r0, #1
 80059fa:	bfd4      	ite	le
 80059fc:	9306      	strle	r3, [sp, #24]
 80059fe:	9305      	strgt	r3, [sp, #20]
 8005a00:	f10b 0b01 	add.w	fp, fp, #1
 8005a04:	9019      	str	r0, [sp, #100]	; 0x64
 8005a06:	e7be      	b.n	8005986 <_strtod_l+0x146>
 8005a08:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005a0a:	191a      	adds	r2, r3, r4
 8005a0c:	9219      	str	r2, [sp, #100]	; 0x64
 8005a0e:	5d1a      	ldrb	r2, [r3, r4]
 8005a10:	f1bb 0f00 	cmp.w	fp, #0
 8005a14:	d036      	beq.n	8005a84 <_strtod_l+0x244>
 8005a16:	465c      	mov	r4, fp
 8005a18:	9004      	str	r0, [sp, #16]
 8005a1a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005a1e:	2b09      	cmp	r3, #9
 8005a20:	d912      	bls.n	8005a48 <_strtod_l+0x208>
 8005a22:	2301      	movs	r3, #1
 8005a24:	e7c1      	b.n	80059aa <_strtod_l+0x16a>
 8005a26:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005a28:	3001      	adds	r0, #1
 8005a2a:	1c5a      	adds	r2, r3, #1
 8005a2c:	9219      	str	r2, [sp, #100]	; 0x64
 8005a2e:	785a      	ldrb	r2, [r3, #1]
 8005a30:	2a30      	cmp	r2, #48	; 0x30
 8005a32:	d0f8      	beq.n	8005a26 <_strtod_l+0x1e6>
 8005a34:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005a38:	2b08      	cmp	r3, #8
 8005a3a:	f200 84d5 	bhi.w	80063e8 <_strtod_l+0xba8>
 8005a3e:	9004      	str	r0, [sp, #16]
 8005a40:	2000      	movs	r0, #0
 8005a42:	4604      	mov	r4, r0
 8005a44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005a46:	9308      	str	r3, [sp, #32]
 8005a48:	3a30      	subs	r2, #48	; 0x30
 8005a4a:	f100 0301 	add.w	r3, r0, #1
 8005a4e:	d013      	beq.n	8005a78 <_strtod_l+0x238>
 8005a50:	9904      	ldr	r1, [sp, #16]
 8005a52:	1905      	adds	r5, r0, r4
 8005a54:	4419      	add	r1, r3
 8005a56:	9104      	str	r1, [sp, #16]
 8005a58:	4623      	mov	r3, r4
 8005a5a:	210a      	movs	r1, #10
 8005a5c:	42ab      	cmp	r3, r5
 8005a5e:	d113      	bne.n	8005a88 <_strtod_l+0x248>
 8005a60:	1823      	adds	r3, r4, r0
 8005a62:	2b08      	cmp	r3, #8
 8005a64:	f104 0401 	add.w	r4, r4, #1
 8005a68:	4404      	add	r4, r0
 8005a6a:	dc1b      	bgt.n	8005aa4 <_strtod_l+0x264>
 8005a6c:	230a      	movs	r3, #10
 8005a6e:	9906      	ldr	r1, [sp, #24]
 8005a70:	fb03 2301 	mla	r3, r3, r1, r2
 8005a74:	9306      	str	r3, [sp, #24]
 8005a76:	2300      	movs	r3, #0
 8005a78:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	1c51      	adds	r1, r2, #1
 8005a7e:	9119      	str	r1, [sp, #100]	; 0x64
 8005a80:	7852      	ldrb	r2, [r2, #1]
 8005a82:	e7ca      	b.n	8005a1a <_strtod_l+0x1da>
 8005a84:	4658      	mov	r0, fp
 8005a86:	e7d3      	b.n	8005a30 <_strtod_l+0x1f0>
 8005a88:	2b08      	cmp	r3, #8
 8005a8a:	dc04      	bgt.n	8005a96 <_strtod_l+0x256>
 8005a8c:	9f06      	ldr	r7, [sp, #24]
 8005a8e:	434f      	muls	r7, r1
 8005a90:	9706      	str	r7, [sp, #24]
 8005a92:	3301      	adds	r3, #1
 8005a94:	e7e2      	b.n	8005a5c <_strtod_l+0x21c>
 8005a96:	1c5f      	adds	r7, r3, #1
 8005a98:	2f10      	cmp	r7, #16
 8005a9a:	bfde      	ittt	le
 8005a9c:	9f05      	ldrle	r7, [sp, #20]
 8005a9e:	434f      	mulle	r7, r1
 8005aa0:	9705      	strle	r7, [sp, #20]
 8005aa2:	e7f6      	b.n	8005a92 <_strtod_l+0x252>
 8005aa4:	2c10      	cmp	r4, #16
 8005aa6:	bfdf      	itttt	le
 8005aa8:	230a      	movle	r3, #10
 8005aaa:	9905      	ldrle	r1, [sp, #20]
 8005aac:	fb03 2301 	mlale	r3, r3, r1, r2
 8005ab0:	9305      	strle	r3, [sp, #20]
 8005ab2:	e7e0      	b.n	8005a76 <_strtod_l+0x236>
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	9304      	str	r3, [sp, #16]
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e77b      	b.n	80059b4 <_strtod_l+0x174>
 8005abc:	2700      	movs	r7, #0
 8005abe:	1cb2      	adds	r2, r6, #2
 8005ac0:	9219      	str	r2, [sp, #100]	; 0x64
 8005ac2:	78b2      	ldrb	r2, [r6, #2]
 8005ac4:	e784      	b.n	80059d0 <_strtod_l+0x190>
 8005ac6:	bf00      	nop
 8005ac8:	08009d98 	.word	0x08009d98
 8005acc:	08009b50 	.word	0x08009b50
 8005ad0:	7ff00000 	.word	0x7ff00000
 8005ad4:	2701      	movs	r7, #1
 8005ad6:	e7f2      	b.n	8005abe <_strtod_l+0x27e>
 8005ad8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005ada:	1c51      	adds	r1, r2, #1
 8005adc:	9119      	str	r1, [sp, #100]	; 0x64
 8005ade:	7852      	ldrb	r2, [r2, #1]
 8005ae0:	2a30      	cmp	r2, #48	; 0x30
 8005ae2:	d0f9      	beq.n	8005ad8 <_strtod_l+0x298>
 8005ae4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005ae8:	2908      	cmp	r1, #8
 8005aea:	f63f af77 	bhi.w	80059dc <_strtod_l+0x19c>
 8005aee:	f04f 0e0a 	mov.w	lr, #10
 8005af2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8005af6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005af8:	9209      	str	r2, [sp, #36]	; 0x24
 8005afa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005afc:	1c51      	adds	r1, r2, #1
 8005afe:	9119      	str	r1, [sp, #100]	; 0x64
 8005b00:	7852      	ldrb	r2, [r2, #1]
 8005b02:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8005b06:	2d09      	cmp	r5, #9
 8005b08:	d935      	bls.n	8005b76 <_strtod_l+0x336>
 8005b0a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005b0c:	1b49      	subs	r1, r1, r5
 8005b0e:	2908      	cmp	r1, #8
 8005b10:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8005b14:	dc02      	bgt.n	8005b1c <_strtod_l+0x2dc>
 8005b16:	4565      	cmp	r5, ip
 8005b18:	bfa8      	it	ge
 8005b1a:	4665      	movge	r5, ip
 8005b1c:	b107      	cbz	r7, 8005b20 <_strtod_l+0x2e0>
 8005b1e:	426d      	negs	r5, r5
 8005b20:	2c00      	cmp	r4, #0
 8005b22:	d14c      	bne.n	8005bbe <_strtod_l+0x37e>
 8005b24:	9907      	ldr	r1, [sp, #28]
 8005b26:	4301      	orrs	r1, r0
 8005b28:	f47f aecb 	bne.w	80058c2 <_strtod_l+0x82>
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f47f aee4 	bne.w	80058fa <_strtod_l+0xba>
 8005b32:	2a69      	cmp	r2, #105	; 0x69
 8005b34:	d026      	beq.n	8005b84 <_strtod_l+0x344>
 8005b36:	dc23      	bgt.n	8005b80 <_strtod_l+0x340>
 8005b38:	2a49      	cmp	r2, #73	; 0x49
 8005b3a:	d023      	beq.n	8005b84 <_strtod_l+0x344>
 8005b3c:	2a4e      	cmp	r2, #78	; 0x4e
 8005b3e:	f47f aedc 	bne.w	80058fa <_strtod_l+0xba>
 8005b42:	499d      	ldr	r1, [pc, #628]	; (8005db8 <_strtod_l+0x578>)
 8005b44:	a819      	add	r0, sp, #100	; 0x64
 8005b46:	f001 fe17 	bl	8007778 <__match>
 8005b4a:	2800      	cmp	r0, #0
 8005b4c:	f43f aed5 	beq.w	80058fa <_strtod_l+0xba>
 8005b50:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	2b28      	cmp	r3, #40	; 0x28
 8005b56:	d12c      	bne.n	8005bb2 <_strtod_l+0x372>
 8005b58:	4998      	ldr	r1, [pc, #608]	; (8005dbc <_strtod_l+0x57c>)
 8005b5a:	aa1c      	add	r2, sp, #112	; 0x70
 8005b5c:	a819      	add	r0, sp, #100	; 0x64
 8005b5e:	f001 fe1f 	bl	80077a0 <__hexnan>
 8005b62:	2805      	cmp	r0, #5
 8005b64:	d125      	bne.n	8005bb2 <_strtod_l+0x372>
 8005b66:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005b68:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8005b6c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005b70:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8005b74:	e6a5      	b.n	80058c2 <_strtod_l+0x82>
 8005b76:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8005b7a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8005b7e:	e7bc      	b.n	8005afa <_strtod_l+0x2ba>
 8005b80:	2a6e      	cmp	r2, #110	; 0x6e
 8005b82:	e7dc      	b.n	8005b3e <_strtod_l+0x2fe>
 8005b84:	498e      	ldr	r1, [pc, #568]	; (8005dc0 <_strtod_l+0x580>)
 8005b86:	a819      	add	r0, sp, #100	; 0x64
 8005b88:	f001 fdf6 	bl	8007778 <__match>
 8005b8c:	2800      	cmp	r0, #0
 8005b8e:	f43f aeb4 	beq.w	80058fa <_strtod_l+0xba>
 8005b92:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005b94:	498b      	ldr	r1, [pc, #556]	; (8005dc4 <_strtod_l+0x584>)
 8005b96:	3b01      	subs	r3, #1
 8005b98:	a819      	add	r0, sp, #100	; 0x64
 8005b9a:	9319      	str	r3, [sp, #100]	; 0x64
 8005b9c:	f001 fdec 	bl	8007778 <__match>
 8005ba0:	b910      	cbnz	r0, 8005ba8 <_strtod_l+0x368>
 8005ba2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	9319      	str	r3, [sp, #100]	; 0x64
 8005ba8:	f04f 0800 	mov.w	r8, #0
 8005bac:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8005dc8 <_strtod_l+0x588>
 8005bb0:	e687      	b.n	80058c2 <_strtod_l+0x82>
 8005bb2:	4886      	ldr	r0, [pc, #536]	; (8005dcc <_strtod_l+0x58c>)
 8005bb4:	f002 fdce 	bl	8008754 <nan>
 8005bb8:	4680      	mov	r8, r0
 8005bba:	4689      	mov	r9, r1
 8005bbc:	e681      	b.n	80058c2 <_strtod_l+0x82>
 8005bbe:	9b04      	ldr	r3, [sp, #16]
 8005bc0:	f1bb 0f00 	cmp.w	fp, #0
 8005bc4:	bf08      	it	eq
 8005bc6:	46a3      	moveq	fp, r4
 8005bc8:	1aeb      	subs	r3, r5, r3
 8005bca:	2c10      	cmp	r4, #16
 8005bcc:	9806      	ldr	r0, [sp, #24]
 8005bce:	4626      	mov	r6, r4
 8005bd0:	9307      	str	r3, [sp, #28]
 8005bd2:	bfa8      	it	ge
 8005bd4:	2610      	movge	r6, #16
 8005bd6:	f7fa fc05 	bl	80003e4 <__aeabi_ui2d>
 8005bda:	2c09      	cmp	r4, #9
 8005bdc:	4680      	mov	r8, r0
 8005bde:	4689      	mov	r9, r1
 8005be0:	dd13      	ble.n	8005c0a <_strtod_l+0x3ca>
 8005be2:	4b7b      	ldr	r3, [pc, #492]	; (8005dd0 <_strtod_l+0x590>)
 8005be4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005be8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005bec:	f7fa fc74 	bl	80004d8 <__aeabi_dmul>
 8005bf0:	4680      	mov	r8, r0
 8005bf2:	9805      	ldr	r0, [sp, #20]
 8005bf4:	4689      	mov	r9, r1
 8005bf6:	f7fa fbf5 	bl	80003e4 <__aeabi_ui2d>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	4640      	mov	r0, r8
 8005c00:	4649      	mov	r1, r9
 8005c02:	f7fa fab3 	bl	800016c <__adddf3>
 8005c06:	4680      	mov	r8, r0
 8005c08:	4689      	mov	r9, r1
 8005c0a:	2c0f      	cmp	r4, #15
 8005c0c:	dc36      	bgt.n	8005c7c <_strtod_l+0x43c>
 8005c0e:	9b07      	ldr	r3, [sp, #28]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f43f ae56 	beq.w	80058c2 <_strtod_l+0x82>
 8005c16:	dd22      	ble.n	8005c5e <_strtod_l+0x41e>
 8005c18:	2b16      	cmp	r3, #22
 8005c1a:	dc09      	bgt.n	8005c30 <_strtod_l+0x3f0>
 8005c1c:	496c      	ldr	r1, [pc, #432]	; (8005dd0 <_strtod_l+0x590>)
 8005c1e:	4642      	mov	r2, r8
 8005c20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005c24:	464b      	mov	r3, r9
 8005c26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c2a:	f7fa fc55 	bl	80004d8 <__aeabi_dmul>
 8005c2e:	e7c3      	b.n	8005bb8 <_strtod_l+0x378>
 8005c30:	9a07      	ldr	r2, [sp, #28]
 8005c32:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005c36:	4293      	cmp	r3, r2
 8005c38:	db20      	blt.n	8005c7c <_strtod_l+0x43c>
 8005c3a:	4d65      	ldr	r5, [pc, #404]	; (8005dd0 <_strtod_l+0x590>)
 8005c3c:	f1c4 040f 	rsb	r4, r4, #15
 8005c40:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005c44:	4642      	mov	r2, r8
 8005c46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c4a:	464b      	mov	r3, r9
 8005c4c:	f7fa fc44 	bl	80004d8 <__aeabi_dmul>
 8005c50:	9b07      	ldr	r3, [sp, #28]
 8005c52:	1b1c      	subs	r4, r3, r4
 8005c54:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005c58:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005c5c:	e7e5      	b.n	8005c2a <_strtod_l+0x3ea>
 8005c5e:	9b07      	ldr	r3, [sp, #28]
 8005c60:	3316      	adds	r3, #22
 8005c62:	db0b      	blt.n	8005c7c <_strtod_l+0x43c>
 8005c64:	9b04      	ldr	r3, [sp, #16]
 8005c66:	4640      	mov	r0, r8
 8005c68:	1b5d      	subs	r5, r3, r5
 8005c6a:	4b59      	ldr	r3, [pc, #356]	; (8005dd0 <_strtod_l+0x590>)
 8005c6c:	4649      	mov	r1, r9
 8005c6e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005c72:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005c76:	f7fa fd59 	bl	800072c <__aeabi_ddiv>
 8005c7a:	e79d      	b.n	8005bb8 <_strtod_l+0x378>
 8005c7c:	9b07      	ldr	r3, [sp, #28]
 8005c7e:	1ba6      	subs	r6, r4, r6
 8005c80:	441e      	add	r6, r3
 8005c82:	2e00      	cmp	r6, #0
 8005c84:	dd74      	ble.n	8005d70 <_strtod_l+0x530>
 8005c86:	f016 030f 	ands.w	r3, r6, #15
 8005c8a:	d00a      	beq.n	8005ca2 <_strtod_l+0x462>
 8005c8c:	4950      	ldr	r1, [pc, #320]	; (8005dd0 <_strtod_l+0x590>)
 8005c8e:	4642      	mov	r2, r8
 8005c90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005c94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c98:	464b      	mov	r3, r9
 8005c9a:	f7fa fc1d 	bl	80004d8 <__aeabi_dmul>
 8005c9e:	4680      	mov	r8, r0
 8005ca0:	4689      	mov	r9, r1
 8005ca2:	f036 060f 	bics.w	r6, r6, #15
 8005ca6:	d052      	beq.n	8005d4e <_strtod_l+0x50e>
 8005ca8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8005cac:	dd27      	ble.n	8005cfe <_strtod_l+0x4be>
 8005cae:	f04f 0b00 	mov.w	fp, #0
 8005cb2:	f8cd b010 	str.w	fp, [sp, #16]
 8005cb6:	f8cd b020 	str.w	fp, [sp, #32]
 8005cba:	f8cd b018 	str.w	fp, [sp, #24]
 8005cbe:	2322      	movs	r3, #34	; 0x22
 8005cc0:	f04f 0800 	mov.w	r8, #0
 8005cc4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8005dc8 <_strtod_l+0x588>
 8005cc8:	f8ca 3000 	str.w	r3, [sl]
 8005ccc:	9b08      	ldr	r3, [sp, #32]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f43f adf7 	beq.w	80058c2 <_strtod_l+0x82>
 8005cd4:	4650      	mov	r0, sl
 8005cd6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005cd8:	f001 fe78 	bl	80079cc <_Bfree>
 8005cdc:	4650      	mov	r0, sl
 8005cde:	9906      	ldr	r1, [sp, #24]
 8005ce0:	f001 fe74 	bl	80079cc <_Bfree>
 8005ce4:	4650      	mov	r0, sl
 8005ce6:	9904      	ldr	r1, [sp, #16]
 8005ce8:	f001 fe70 	bl	80079cc <_Bfree>
 8005cec:	4650      	mov	r0, sl
 8005cee:	9908      	ldr	r1, [sp, #32]
 8005cf0:	f001 fe6c 	bl	80079cc <_Bfree>
 8005cf4:	4659      	mov	r1, fp
 8005cf6:	4650      	mov	r0, sl
 8005cf8:	f001 fe68 	bl	80079cc <_Bfree>
 8005cfc:	e5e1      	b.n	80058c2 <_strtod_l+0x82>
 8005cfe:	4b35      	ldr	r3, [pc, #212]	; (8005dd4 <_strtod_l+0x594>)
 8005d00:	4640      	mov	r0, r8
 8005d02:	9305      	str	r3, [sp, #20]
 8005d04:	2300      	movs	r3, #0
 8005d06:	4649      	mov	r1, r9
 8005d08:	461f      	mov	r7, r3
 8005d0a:	1136      	asrs	r6, r6, #4
 8005d0c:	2e01      	cmp	r6, #1
 8005d0e:	dc21      	bgt.n	8005d54 <_strtod_l+0x514>
 8005d10:	b10b      	cbz	r3, 8005d16 <_strtod_l+0x4d6>
 8005d12:	4680      	mov	r8, r0
 8005d14:	4689      	mov	r9, r1
 8005d16:	4b2f      	ldr	r3, [pc, #188]	; (8005dd4 <_strtod_l+0x594>)
 8005d18:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8005d1c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005d20:	4642      	mov	r2, r8
 8005d22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d26:	464b      	mov	r3, r9
 8005d28:	f7fa fbd6 	bl	80004d8 <__aeabi_dmul>
 8005d2c:	4b26      	ldr	r3, [pc, #152]	; (8005dc8 <_strtod_l+0x588>)
 8005d2e:	460a      	mov	r2, r1
 8005d30:	400b      	ands	r3, r1
 8005d32:	4929      	ldr	r1, [pc, #164]	; (8005dd8 <_strtod_l+0x598>)
 8005d34:	4680      	mov	r8, r0
 8005d36:	428b      	cmp	r3, r1
 8005d38:	d8b9      	bhi.n	8005cae <_strtod_l+0x46e>
 8005d3a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005d3e:	428b      	cmp	r3, r1
 8005d40:	bf86      	itte	hi
 8005d42:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8005d46:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8005ddc <_strtod_l+0x59c>
 8005d4a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8005d4e:	2300      	movs	r3, #0
 8005d50:	9305      	str	r3, [sp, #20]
 8005d52:	e07f      	b.n	8005e54 <_strtod_l+0x614>
 8005d54:	07f2      	lsls	r2, r6, #31
 8005d56:	d505      	bpl.n	8005d64 <_strtod_l+0x524>
 8005d58:	9b05      	ldr	r3, [sp, #20]
 8005d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5e:	f7fa fbbb 	bl	80004d8 <__aeabi_dmul>
 8005d62:	2301      	movs	r3, #1
 8005d64:	9a05      	ldr	r2, [sp, #20]
 8005d66:	3701      	adds	r7, #1
 8005d68:	3208      	adds	r2, #8
 8005d6a:	1076      	asrs	r6, r6, #1
 8005d6c:	9205      	str	r2, [sp, #20]
 8005d6e:	e7cd      	b.n	8005d0c <_strtod_l+0x4cc>
 8005d70:	d0ed      	beq.n	8005d4e <_strtod_l+0x50e>
 8005d72:	4276      	negs	r6, r6
 8005d74:	f016 020f 	ands.w	r2, r6, #15
 8005d78:	d00a      	beq.n	8005d90 <_strtod_l+0x550>
 8005d7a:	4b15      	ldr	r3, [pc, #84]	; (8005dd0 <_strtod_l+0x590>)
 8005d7c:	4640      	mov	r0, r8
 8005d7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d82:	4649      	mov	r1, r9
 8005d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d88:	f7fa fcd0 	bl	800072c <__aeabi_ddiv>
 8005d8c:	4680      	mov	r8, r0
 8005d8e:	4689      	mov	r9, r1
 8005d90:	1136      	asrs	r6, r6, #4
 8005d92:	d0dc      	beq.n	8005d4e <_strtod_l+0x50e>
 8005d94:	2e1f      	cmp	r6, #31
 8005d96:	dd23      	ble.n	8005de0 <_strtod_l+0x5a0>
 8005d98:	f04f 0b00 	mov.w	fp, #0
 8005d9c:	f8cd b010 	str.w	fp, [sp, #16]
 8005da0:	f8cd b020 	str.w	fp, [sp, #32]
 8005da4:	f8cd b018 	str.w	fp, [sp, #24]
 8005da8:	2322      	movs	r3, #34	; 0x22
 8005daa:	f04f 0800 	mov.w	r8, #0
 8005dae:	f04f 0900 	mov.w	r9, #0
 8005db2:	f8ca 3000 	str.w	r3, [sl]
 8005db6:	e789      	b.n	8005ccc <_strtod_l+0x48c>
 8005db8:	08009b21 	.word	0x08009b21
 8005dbc:	08009b64 	.word	0x08009b64
 8005dc0:	08009b19 	.word	0x08009b19
 8005dc4:	08009ca4 	.word	0x08009ca4
 8005dc8:	7ff00000 	.word	0x7ff00000
 8005dcc:	08009f50 	.word	0x08009f50
 8005dd0:	08009e30 	.word	0x08009e30
 8005dd4:	08009e08 	.word	0x08009e08
 8005dd8:	7ca00000 	.word	0x7ca00000
 8005ddc:	7fefffff 	.word	0x7fefffff
 8005de0:	f016 0310 	ands.w	r3, r6, #16
 8005de4:	bf18      	it	ne
 8005de6:	236a      	movne	r3, #106	; 0x6a
 8005de8:	4640      	mov	r0, r8
 8005dea:	9305      	str	r3, [sp, #20]
 8005dec:	4649      	mov	r1, r9
 8005dee:	2300      	movs	r3, #0
 8005df0:	4fb0      	ldr	r7, [pc, #704]	; (80060b4 <_strtod_l+0x874>)
 8005df2:	07f2      	lsls	r2, r6, #31
 8005df4:	d504      	bpl.n	8005e00 <_strtod_l+0x5c0>
 8005df6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dfa:	f7fa fb6d 	bl	80004d8 <__aeabi_dmul>
 8005dfe:	2301      	movs	r3, #1
 8005e00:	1076      	asrs	r6, r6, #1
 8005e02:	f107 0708 	add.w	r7, r7, #8
 8005e06:	d1f4      	bne.n	8005df2 <_strtod_l+0x5b2>
 8005e08:	b10b      	cbz	r3, 8005e0e <_strtod_l+0x5ce>
 8005e0a:	4680      	mov	r8, r0
 8005e0c:	4689      	mov	r9, r1
 8005e0e:	9b05      	ldr	r3, [sp, #20]
 8005e10:	b1c3      	cbz	r3, 8005e44 <_strtod_l+0x604>
 8005e12:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8005e16:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	4649      	mov	r1, r9
 8005e1e:	dd11      	ble.n	8005e44 <_strtod_l+0x604>
 8005e20:	2b1f      	cmp	r3, #31
 8005e22:	f340 8127 	ble.w	8006074 <_strtod_l+0x834>
 8005e26:	2b34      	cmp	r3, #52	; 0x34
 8005e28:	bfd8      	it	le
 8005e2a:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8005e2e:	f04f 0800 	mov.w	r8, #0
 8005e32:	bfcf      	iteee	gt
 8005e34:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005e38:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005e3c:	fa03 f202 	lslle.w	r2, r3, r2
 8005e40:	ea02 0901 	andle.w	r9, r2, r1
 8005e44:	2200      	movs	r2, #0
 8005e46:	2300      	movs	r3, #0
 8005e48:	4640      	mov	r0, r8
 8005e4a:	4649      	mov	r1, r9
 8005e4c:	f7fa fdac 	bl	80009a8 <__aeabi_dcmpeq>
 8005e50:	2800      	cmp	r0, #0
 8005e52:	d1a1      	bne.n	8005d98 <_strtod_l+0x558>
 8005e54:	9b06      	ldr	r3, [sp, #24]
 8005e56:	465a      	mov	r2, fp
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	4650      	mov	r0, sl
 8005e5c:	4623      	mov	r3, r4
 8005e5e:	9908      	ldr	r1, [sp, #32]
 8005e60:	f001 fe1c 	bl	8007a9c <__s2b>
 8005e64:	9008      	str	r0, [sp, #32]
 8005e66:	2800      	cmp	r0, #0
 8005e68:	f43f af21 	beq.w	8005cae <_strtod_l+0x46e>
 8005e6c:	9b04      	ldr	r3, [sp, #16]
 8005e6e:	f04f 0b00 	mov.w	fp, #0
 8005e72:	1b5d      	subs	r5, r3, r5
 8005e74:	9b07      	ldr	r3, [sp, #28]
 8005e76:	f8cd b010 	str.w	fp, [sp, #16]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	bfb4      	ite	lt
 8005e7e:	462b      	movlt	r3, r5
 8005e80:	2300      	movge	r3, #0
 8005e82:	930e      	str	r3, [sp, #56]	; 0x38
 8005e84:	9b07      	ldr	r3, [sp, #28]
 8005e86:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005e8a:	9314      	str	r3, [sp, #80]	; 0x50
 8005e8c:	9b08      	ldr	r3, [sp, #32]
 8005e8e:	4650      	mov	r0, sl
 8005e90:	6859      	ldr	r1, [r3, #4]
 8005e92:	f001 fd5b 	bl	800794c <_Balloc>
 8005e96:	9006      	str	r0, [sp, #24]
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	f43f af10 	beq.w	8005cbe <_strtod_l+0x47e>
 8005e9e:	9b08      	ldr	r3, [sp, #32]
 8005ea0:	300c      	adds	r0, #12
 8005ea2:	691a      	ldr	r2, [r3, #16]
 8005ea4:	f103 010c 	add.w	r1, r3, #12
 8005ea8:	3202      	adds	r2, #2
 8005eaa:	0092      	lsls	r2, r2, #2
 8005eac:	f001 fd40 	bl	8007930 <memcpy>
 8005eb0:	ab1c      	add	r3, sp, #112	; 0x70
 8005eb2:	9301      	str	r3, [sp, #4]
 8005eb4:	ab1b      	add	r3, sp, #108	; 0x6c
 8005eb6:	9300      	str	r3, [sp, #0]
 8005eb8:	4642      	mov	r2, r8
 8005eba:	464b      	mov	r3, r9
 8005ebc:	4650      	mov	r0, sl
 8005ebe:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8005ec2:	f002 f92d 	bl	8008120 <__d2b>
 8005ec6:	901a      	str	r0, [sp, #104]	; 0x68
 8005ec8:	2800      	cmp	r0, #0
 8005eca:	f43f aef8 	beq.w	8005cbe <_strtod_l+0x47e>
 8005ece:	2101      	movs	r1, #1
 8005ed0:	4650      	mov	r0, sl
 8005ed2:	f001 fe7b 	bl	8007bcc <__i2b>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	9004      	str	r0, [sp, #16]
 8005eda:	2800      	cmp	r0, #0
 8005edc:	f43f aeef 	beq.w	8005cbe <_strtod_l+0x47e>
 8005ee0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005ee2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005ee4:	2d00      	cmp	r5, #0
 8005ee6:	bfab      	itete	ge
 8005ee8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005eea:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8005eec:	18ee      	addge	r6, r5, r3
 8005eee:	1b5c      	sublt	r4, r3, r5
 8005ef0:	9b05      	ldr	r3, [sp, #20]
 8005ef2:	bfa8      	it	ge
 8005ef4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8005ef6:	eba5 0503 	sub.w	r5, r5, r3
 8005efa:	4415      	add	r5, r2
 8005efc:	4b6e      	ldr	r3, [pc, #440]	; (80060b8 <_strtod_l+0x878>)
 8005efe:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8005f02:	bfb8      	it	lt
 8005f04:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005f06:	429d      	cmp	r5, r3
 8005f08:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005f0c:	f280 80c4 	bge.w	8006098 <_strtod_l+0x858>
 8005f10:	1b5b      	subs	r3, r3, r5
 8005f12:	2b1f      	cmp	r3, #31
 8005f14:	f04f 0701 	mov.w	r7, #1
 8005f18:	eba2 0203 	sub.w	r2, r2, r3
 8005f1c:	f300 80b1 	bgt.w	8006082 <_strtod_l+0x842>
 8005f20:	2500      	movs	r5, #0
 8005f22:	fa07 f303 	lsl.w	r3, r7, r3
 8005f26:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f28:	18b7      	adds	r7, r6, r2
 8005f2a:	9b05      	ldr	r3, [sp, #20]
 8005f2c:	42be      	cmp	r6, r7
 8005f2e:	4414      	add	r4, r2
 8005f30:	441c      	add	r4, r3
 8005f32:	4633      	mov	r3, r6
 8005f34:	bfa8      	it	ge
 8005f36:	463b      	movge	r3, r7
 8005f38:	42a3      	cmp	r3, r4
 8005f3a:	bfa8      	it	ge
 8005f3c:	4623      	movge	r3, r4
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	bfc2      	ittt	gt
 8005f42:	1aff      	subgt	r7, r7, r3
 8005f44:	1ae4      	subgt	r4, r4, r3
 8005f46:	1af6      	subgt	r6, r6, r3
 8005f48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	dd17      	ble.n	8005f7e <_strtod_l+0x73e>
 8005f4e:	461a      	mov	r2, r3
 8005f50:	4650      	mov	r0, sl
 8005f52:	9904      	ldr	r1, [sp, #16]
 8005f54:	f001 fef8 	bl	8007d48 <__pow5mult>
 8005f58:	9004      	str	r0, [sp, #16]
 8005f5a:	2800      	cmp	r0, #0
 8005f5c:	f43f aeaf 	beq.w	8005cbe <_strtod_l+0x47e>
 8005f60:	4601      	mov	r1, r0
 8005f62:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005f64:	4650      	mov	r0, sl
 8005f66:	f001 fe47 	bl	8007bf8 <__multiply>
 8005f6a:	9009      	str	r0, [sp, #36]	; 0x24
 8005f6c:	2800      	cmp	r0, #0
 8005f6e:	f43f aea6 	beq.w	8005cbe <_strtod_l+0x47e>
 8005f72:	4650      	mov	r0, sl
 8005f74:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005f76:	f001 fd29 	bl	80079cc <_Bfree>
 8005f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f7c:	931a      	str	r3, [sp, #104]	; 0x68
 8005f7e:	2f00      	cmp	r7, #0
 8005f80:	f300 808e 	bgt.w	80060a0 <_strtod_l+0x860>
 8005f84:	9b07      	ldr	r3, [sp, #28]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	dd08      	ble.n	8005f9c <_strtod_l+0x75c>
 8005f8a:	4650      	mov	r0, sl
 8005f8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005f8e:	9906      	ldr	r1, [sp, #24]
 8005f90:	f001 feda 	bl	8007d48 <__pow5mult>
 8005f94:	9006      	str	r0, [sp, #24]
 8005f96:	2800      	cmp	r0, #0
 8005f98:	f43f ae91 	beq.w	8005cbe <_strtod_l+0x47e>
 8005f9c:	2c00      	cmp	r4, #0
 8005f9e:	dd08      	ble.n	8005fb2 <_strtod_l+0x772>
 8005fa0:	4622      	mov	r2, r4
 8005fa2:	4650      	mov	r0, sl
 8005fa4:	9906      	ldr	r1, [sp, #24]
 8005fa6:	f001 ff29 	bl	8007dfc <__lshift>
 8005faa:	9006      	str	r0, [sp, #24]
 8005fac:	2800      	cmp	r0, #0
 8005fae:	f43f ae86 	beq.w	8005cbe <_strtod_l+0x47e>
 8005fb2:	2e00      	cmp	r6, #0
 8005fb4:	dd08      	ble.n	8005fc8 <_strtod_l+0x788>
 8005fb6:	4632      	mov	r2, r6
 8005fb8:	4650      	mov	r0, sl
 8005fba:	9904      	ldr	r1, [sp, #16]
 8005fbc:	f001 ff1e 	bl	8007dfc <__lshift>
 8005fc0:	9004      	str	r0, [sp, #16]
 8005fc2:	2800      	cmp	r0, #0
 8005fc4:	f43f ae7b 	beq.w	8005cbe <_strtod_l+0x47e>
 8005fc8:	4650      	mov	r0, sl
 8005fca:	9a06      	ldr	r2, [sp, #24]
 8005fcc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005fce:	f001 ffa1 	bl	8007f14 <__mdiff>
 8005fd2:	4683      	mov	fp, r0
 8005fd4:	2800      	cmp	r0, #0
 8005fd6:	f43f ae72 	beq.w	8005cbe <_strtod_l+0x47e>
 8005fda:	2400      	movs	r4, #0
 8005fdc:	68c3      	ldr	r3, [r0, #12]
 8005fde:	9904      	ldr	r1, [sp, #16]
 8005fe0:	60c4      	str	r4, [r0, #12]
 8005fe2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fe4:	f001 ff7a 	bl	8007edc <__mcmp>
 8005fe8:	42a0      	cmp	r0, r4
 8005fea:	da6b      	bge.n	80060c4 <_strtod_l+0x884>
 8005fec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fee:	ea53 0308 	orrs.w	r3, r3, r8
 8005ff2:	f040 8091 	bne.w	8006118 <_strtod_l+0x8d8>
 8005ff6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	f040 808c 	bne.w	8006118 <_strtod_l+0x8d8>
 8006000:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006004:	0d1b      	lsrs	r3, r3, #20
 8006006:	051b      	lsls	r3, r3, #20
 8006008:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800600c:	f240 8084 	bls.w	8006118 <_strtod_l+0x8d8>
 8006010:	f8db 3014 	ldr.w	r3, [fp, #20]
 8006014:	b91b      	cbnz	r3, 800601e <_strtod_l+0x7de>
 8006016:	f8db 3010 	ldr.w	r3, [fp, #16]
 800601a:	2b01      	cmp	r3, #1
 800601c:	dd7c      	ble.n	8006118 <_strtod_l+0x8d8>
 800601e:	4659      	mov	r1, fp
 8006020:	2201      	movs	r2, #1
 8006022:	4650      	mov	r0, sl
 8006024:	f001 feea 	bl	8007dfc <__lshift>
 8006028:	9904      	ldr	r1, [sp, #16]
 800602a:	4683      	mov	fp, r0
 800602c:	f001 ff56 	bl	8007edc <__mcmp>
 8006030:	2800      	cmp	r0, #0
 8006032:	dd71      	ble.n	8006118 <_strtod_l+0x8d8>
 8006034:	9905      	ldr	r1, [sp, #20]
 8006036:	464b      	mov	r3, r9
 8006038:	4a20      	ldr	r2, [pc, #128]	; (80060bc <_strtod_l+0x87c>)
 800603a:	2900      	cmp	r1, #0
 800603c:	f000 808c 	beq.w	8006158 <_strtod_l+0x918>
 8006040:	ea02 0109 	and.w	r1, r2, r9
 8006044:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006048:	f300 8086 	bgt.w	8006158 <_strtod_l+0x918>
 800604c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006050:	f77f aeaa 	ble.w	8005da8 <_strtod_l+0x568>
 8006054:	4640      	mov	r0, r8
 8006056:	4649      	mov	r1, r9
 8006058:	4b19      	ldr	r3, [pc, #100]	; (80060c0 <_strtod_l+0x880>)
 800605a:	2200      	movs	r2, #0
 800605c:	f7fa fa3c 	bl	80004d8 <__aeabi_dmul>
 8006060:	460b      	mov	r3, r1
 8006062:	4303      	orrs	r3, r0
 8006064:	bf08      	it	eq
 8006066:	2322      	moveq	r3, #34	; 0x22
 8006068:	4680      	mov	r8, r0
 800606a:	4689      	mov	r9, r1
 800606c:	bf08      	it	eq
 800606e:	f8ca 3000 	streq.w	r3, [sl]
 8006072:	e62f      	b.n	8005cd4 <_strtod_l+0x494>
 8006074:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006078:	fa02 f303 	lsl.w	r3, r2, r3
 800607c:	ea03 0808 	and.w	r8, r3, r8
 8006080:	e6e0      	b.n	8005e44 <_strtod_l+0x604>
 8006082:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8006086:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800608a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800608e:	35e2      	adds	r5, #226	; 0xe2
 8006090:	fa07 f505 	lsl.w	r5, r7, r5
 8006094:	970f      	str	r7, [sp, #60]	; 0x3c
 8006096:	e747      	b.n	8005f28 <_strtod_l+0x6e8>
 8006098:	2301      	movs	r3, #1
 800609a:	2500      	movs	r5, #0
 800609c:	930f      	str	r3, [sp, #60]	; 0x3c
 800609e:	e743      	b.n	8005f28 <_strtod_l+0x6e8>
 80060a0:	463a      	mov	r2, r7
 80060a2:	4650      	mov	r0, sl
 80060a4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80060a6:	f001 fea9 	bl	8007dfc <__lshift>
 80060aa:	901a      	str	r0, [sp, #104]	; 0x68
 80060ac:	2800      	cmp	r0, #0
 80060ae:	f47f af69 	bne.w	8005f84 <_strtod_l+0x744>
 80060b2:	e604      	b.n	8005cbe <_strtod_l+0x47e>
 80060b4:	08009b78 	.word	0x08009b78
 80060b8:	fffffc02 	.word	0xfffffc02
 80060bc:	7ff00000 	.word	0x7ff00000
 80060c0:	39500000 	.word	0x39500000
 80060c4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80060c8:	d165      	bne.n	8006196 <_strtod_l+0x956>
 80060ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80060cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80060d0:	b35a      	cbz	r2, 800612a <_strtod_l+0x8ea>
 80060d2:	4a99      	ldr	r2, [pc, #612]	; (8006338 <_strtod_l+0xaf8>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d12b      	bne.n	8006130 <_strtod_l+0x8f0>
 80060d8:	9b05      	ldr	r3, [sp, #20]
 80060da:	4641      	mov	r1, r8
 80060dc:	b303      	cbz	r3, 8006120 <_strtod_l+0x8e0>
 80060de:	464a      	mov	r2, r9
 80060e0:	4b96      	ldr	r3, [pc, #600]	; (800633c <_strtod_l+0xafc>)
 80060e2:	4013      	ands	r3, r2
 80060e4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80060e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80060ec:	d81b      	bhi.n	8006126 <_strtod_l+0x8e6>
 80060ee:	0d1b      	lsrs	r3, r3, #20
 80060f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80060f4:	fa02 f303 	lsl.w	r3, r2, r3
 80060f8:	4299      	cmp	r1, r3
 80060fa:	d119      	bne.n	8006130 <_strtod_l+0x8f0>
 80060fc:	4b90      	ldr	r3, [pc, #576]	; (8006340 <_strtod_l+0xb00>)
 80060fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006100:	429a      	cmp	r2, r3
 8006102:	d102      	bne.n	800610a <_strtod_l+0x8ca>
 8006104:	3101      	adds	r1, #1
 8006106:	f43f adda 	beq.w	8005cbe <_strtod_l+0x47e>
 800610a:	f04f 0800 	mov.w	r8, #0
 800610e:	4b8b      	ldr	r3, [pc, #556]	; (800633c <_strtod_l+0xafc>)
 8006110:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006112:	401a      	ands	r2, r3
 8006114:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8006118:	9b05      	ldr	r3, [sp, #20]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d19a      	bne.n	8006054 <_strtod_l+0x814>
 800611e:	e5d9      	b.n	8005cd4 <_strtod_l+0x494>
 8006120:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006124:	e7e8      	b.n	80060f8 <_strtod_l+0x8b8>
 8006126:	4613      	mov	r3, r2
 8006128:	e7e6      	b.n	80060f8 <_strtod_l+0x8b8>
 800612a:	ea53 0308 	orrs.w	r3, r3, r8
 800612e:	d081      	beq.n	8006034 <_strtod_l+0x7f4>
 8006130:	b1e5      	cbz	r5, 800616c <_strtod_l+0x92c>
 8006132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006134:	421d      	tst	r5, r3
 8006136:	d0ef      	beq.n	8006118 <_strtod_l+0x8d8>
 8006138:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800613a:	4640      	mov	r0, r8
 800613c:	4649      	mov	r1, r9
 800613e:	9a05      	ldr	r2, [sp, #20]
 8006140:	b1c3      	cbz	r3, 8006174 <_strtod_l+0x934>
 8006142:	f7ff fb59 	bl	80057f8 <sulp>
 8006146:	4602      	mov	r2, r0
 8006148:	460b      	mov	r3, r1
 800614a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800614e:	f7fa f80d 	bl	800016c <__adddf3>
 8006152:	4680      	mov	r8, r0
 8006154:	4689      	mov	r9, r1
 8006156:	e7df      	b.n	8006118 <_strtod_l+0x8d8>
 8006158:	4013      	ands	r3, r2
 800615a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800615e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006162:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8006166:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800616a:	e7d5      	b.n	8006118 <_strtod_l+0x8d8>
 800616c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800616e:	ea13 0f08 	tst.w	r3, r8
 8006172:	e7e0      	b.n	8006136 <_strtod_l+0x8f6>
 8006174:	f7ff fb40 	bl	80057f8 <sulp>
 8006178:	4602      	mov	r2, r0
 800617a:	460b      	mov	r3, r1
 800617c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006180:	f7f9 fff2 	bl	8000168 <__aeabi_dsub>
 8006184:	2200      	movs	r2, #0
 8006186:	2300      	movs	r3, #0
 8006188:	4680      	mov	r8, r0
 800618a:	4689      	mov	r9, r1
 800618c:	f7fa fc0c 	bl	80009a8 <__aeabi_dcmpeq>
 8006190:	2800      	cmp	r0, #0
 8006192:	d0c1      	beq.n	8006118 <_strtod_l+0x8d8>
 8006194:	e608      	b.n	8005da8 <_strtod_l+0x568>
 8006196:	4658      	mov	r0, fp
 8006198:	9904      	ldr	r1, [sp, #16]
 800619a:	f002 f81d 	bl	80081d8 <__ratio>
 800619e:	2200      	movs	r2, #0
 80061a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80061a4:	4606      	mov	r6, r0
 80061a6:	460f      	mov	r7, r1
 80061a8:	f7fa fc12 	bl	80009d0 <__aeabi_dcmple>
 80061ac:	2800      	cmp	r0, #0
 80061ae:	d070      	beq.n	8006292 <_strtod_l+0xa52>
 80061b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d042      	beq.n	800623c <_strtod_l+0x9fc>
 80061b6:	2600      	movs	r6, #0
 80061b8:	4f62      	ldr	r7, [pc, #392]	; (8006344 <_strtod_l+0xb04>)
 80061ba:	4d62      	ldr	r5, [pc, #392]	; (8006344 <_strtod_l+0xb04>)
 80061bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061c2:	0d1b      	lsrs	r3, r3, #20
 80061c4:	051b      	lsls	r3, r3, #20
 80061c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80061c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80061ca:	4b5f      	ldr	r3, [pc, #380]	; (8006348 <_strtod_l+0xb08>)
 80061cc:	429a      	cmp	r2, r3
 80061ce:	f040 80c3 	bne.w	8006358 <_strtod_l+0xb18>
 80061d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061d4:	4640      	mov	r0, r8
 80061d6:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80061da:	4649      	mov	r1, r9
 80061dc:	f001 ff26 	bl	800802c <__ulp>
 80061e0:	4602      	mov	r2, r0
 80061e2:	460b      	mov	r3, r1
 80061e4:	4630      	mov	r0, r6
 80061e6:	4639      	mov	r1, r7
 80061e8:	f7fa f976 	bl	80004d8 <__aeabi_dmul>
 80061ec:	4642      	mov	r2, r8
 80061ee:	464b      	mov	r3, r9
 80061f0:	f7f9 ffbc 	bl	800016c <__adddf3>
 80061f4:	460b      	mov	r3, r1
 80061f6:	4951      	ldr	r1, [pc, #324]	; (800633c <_strtod_l+0xafc>)
 80061f8:	4a54      	ldr	r2, [pc, #336]	; (800634c <_strtod_l+0xb0c>)
 80061fa:	4019      	ands	r1, r3
 80061fc:	4291      	cmp	r1, r2
 80061fe:	4680      	mov	r8, r0
 8006200:	d95d      	bls.n	80062be <_strtod_l+0xa7e>
 8006202:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006204:	4b4e      	ldr	r3, [pc, #312]	; (8006340 <_strtod_l+0xb00>)
 8006206:	429a      	cmp	r2, r3
 8006208:	d103      	bne.n	8006212 <_strtod_l+0x9d2>
 800620a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800620c:	3301      	adds	r3, #1
 800620e:	f43f ad56 	beq.w	8005cbe <_strtod_l+0x47e>
 8006212:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8006216:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006340 <_strtod_l+0xb00>
 800621a:	4650      	mov	r0, sl
 800621c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800621e:	f001 fbd5 	bl	80079cc <_Bfree>
 8006222:	4650      	mov	r0, sl
 8006224:	9906      	ldr	r1, [sp, #24]
 8006226:	f001 fbd1 	bl	80079cc <_Bfree>
 800622a:	4650      	mov	r0, sl
 800622c:	9904      	ldr	r1, [sp, #16]
 800622e:	f001 fbcd 	bl	80079cc <_Bfree>
 8006232:	4659      	mov	r1, fp
 8006234:	4650      	mov	r0, sl
 8006236:	f001 fbc9 	bl	80079cc <_Bfree>
 800623a:	e627      	b.n	8005e8c <_strtod_l+0x64c>
 800623c:	f1b8 0f00 	cmp.w	r8, #0
 8006240:	d119      	bne.n	8006276 <_strtod_l+0xa36>
 8006242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006244:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006248:	b9e3      	cbnz	r3, 8006284 <_strtod_l+0xa44>
 800624a:	2200      	movs	r2, #0
 800624c:	4630      	mov	r0, r6
 800624e:	4639      	mov	r1, r7
 8006250:	4b3c      	ldr	r3, [pc, #240]	; (8006344 <_strtod_l+0xb04>)
 8006252:	f7fa fbb3 	bl	80009bc <__aeabi_dcmplt>
 8006256:	b9c8      	cbnz	r0, 800628c <_strtod_l+0xa4c>
 8006258:	2200      	movs	r2, #0
 800625a:	4630      	mov	r0, r6
 800625c:	4639      	mov	r1, r7
 800625e:	4b3c      	ldr	r3, [pc, #240]	; (8006350 <_strtod_l+0xb10>)
 8006260:	f7fa f93a 	bl	80004d8 <__aeabi_dmul>
 8006264:	4604      	mov	r4, r0
 8006266:	460d      	mov	r5, r1
 8006268:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800626c:	9416      	str	r4, [sp, #88]	; 0x58
 800626e:	9317      	str	r3, [sp, #92]	; 0x5c
 8006270:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8006274:	e7a2      	b.n	80061bc <_strtod_l+0x97c>
 8006276:	f1b8 0f01 	cmp.w	r8, #1
 800627a:	d103      	bne.n	8006284 <_strtod_l+0xa44>
 800627c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800627e:	2b00      	cmp	r3, #0
 8006280:	f43f ad92 	beq.w	8005da8 <_strtod_l+0x568>
 8006284:	2600      	movs	r6, #0
 8006286:	2400      	movs	r4, #0
 8006288:	4f32      	ldr	r7, [pc, #200]	; (8006354 <_strtod_l+0xb14>)
 800628a:	e796      	b.n	80061ba <_strtod_l+0x97a>
 800628c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800628e:	4d30      	ldr	r5, [pc, #192]	; (8006350 <_strtod_l+0xb10>)
 8006290:	e7ea      	b.n	8006268 <_strtod_l+0xa28>
 8006292:	4b2f      	ldr	r3, [pc, #188]	; (8006350 <_strtod_l+0xb10>)
 8006294:	2200      	movs	r2, #0
 8006296:	4630      	mov	r0, r6
 8006298:	4639      	mov	r1, r7
 800629a:	f7fa f91d 	bl	80004d8 <__aeabi_dmul>
 800629e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062a0:	4604      	mov	r4, r0
 80062a2:	460d      	mov	r5, r1
 80062a4:	b933      	cbnz	r3, 80062b4 <_strtod_l+0xa74>
 80062a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80062aa:	9010      	str	r0, [sp, #64]	; 0x40
 80062ac:	9311      	str	r3, [sp, #68]	; 0x44
 80062ae:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80062b2:	e783      	b.n	80061bc <_strtod_l+0x97c>
 80062b4:	4602      	mov	r2, r0
 80062b6:	460b      	mov	r3, r1
 80062b8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80062bc:	e7f7      	b.n	80062ae <_strtod_l+0xa6e>
 80062be:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80062c2:	9b05      	ldr	r3, [sp, #20]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d1a8      	bne.n	800621a <_strtod_l+0x9da>
 80062c8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80062cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80062ce:	0d1b      	lsrs	r3, r3, #20
 80062d0:	051b      	lsls	r3, r3, #20
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d1a1      	bne.n	800621a <_strtod_l+0x9da>
 80062d6:	4620      	mov	r0, r4
 80062d8:	4629      	mov	r1, r5
 80062da:	f7fa fc45 	bl	8000b68 <__aeabi_d2lz>
 80062de:	f7fa f8cd 	bl	800047c <__aeabi_l2d>
 80062e2:	4602      	mov	r2, r0
 80062e4:	460b      	mov	r3, r1
 80062e6:	4620      	mov	r0, r4
 80062e8:	4629      	mov	r1, r5
 80062ea:	f7f9 ff3d 	bl	8000168 <__aeabi_dsub>
 80062ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80062f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80062f4:	ea43 0308 	orr.w	r3, r3, r8
 80062f8:	4313      	orrs	r3, r2
 80062fa:	4604      	mov	r4, r0
 80062fc:	460d      	mov	r5, r1
 80062fe:	d066      	beq.n	80063ce <_strtod_l+0xb8e>
 8006300:	a309      	add	r3, pc, #36	; (adr r3, 8006328 <_strtod_l+0xae8>)
 8006302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006306:	f7fa fb59 	bl	80009bc <__aeabi_dcmplt>
 800630a:	2800      	cmp	r0, #0
 800630c:	f47f ace2 	bne.w	8005cd4 <_strtod_l+0x494>
 8006310:	a307      	add	r3, pc, #28	; (adr r3, 8006330 <_strtod_l+0xaf0>)
 8006312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006316:	4620      	mov	r0, r4
 8006318:	4629      	mov	r1, r5
 800631a:	f7fa fb6d 	bl	80009f8 <__aeabi_dcmpgt>
 800631e:	2800      	cmp	r0, #0
 8006320:	f43f af7b 	beq.w	800621a <_strtod_l+0x9da>
 8006324:	e4d6      	b.n	8005cd4 <_strtod_l+0x494>
 8006326:	bf00      	nop
 8006328:	94a03595 	.word	0x94a03595
 800632c:	3fdfffff 	.word	0x3fdfffff
 8006330:	35afe535 	.word	0x35afe535
 8006334:	3fe00000 	.word	0x3fe00000
 8006338:	000fffff 	.word	0x000fffff
 800633c:	7ff00000 	.word	0x7ff00000
 8006340:	7fefffff 	.word	0x7fefffff
 8006344:	3ff00000 	.word	0x3ff00000
 8006348:	7fe00000 	.word	0x7fe00000
 800634c:	7c9fffff 	.word	0x7c9fffff
 8006350:	3fe00000 	.word	0x3fe00000
 8006354:	bff00000 	.word	0xbff00000
 8006358:	9b05      	ldr	r3, [sp, #20]
 800635a:	b313      	cbz	r3, 80063a2 <_strtod_l+0xb62>
 800635c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800635e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006362:	d81e      	bhi.n	80063a2 <_strtod_l+0xb62>
 8006364:	a326      	add	r3, pc, #152	; (adr r3, 8006400 <_strtod_l+0xbc0>)
 8006366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636a:	4620      	mov	r0, r4
 800636c:	4629      	mov	r1, r5
 800636e:	f7fa fb2f 	bl	80009d0 <__aeabi_dcmple>
 8006372:	b190      	cbz	r0, 800639a <_strtod_l+0xb5a>
 8006374:	4629      	mov	r1, r5
 8006376:	4620      	mov	r0, r4
 8006378:	f7fa fb86 	bl	8000a88 <__aeabi_d2uiz>
 800637c:	2801      	cmp	r0, #1
 800637e:	bf38      	it	cc
 8006380:	2001      	movcc	r0, #1
 8006382:	f7fa f82f 	bl	80003e4 <__aeabi_ui2d>
 8006386:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006388:	4604      	mov	r4, r0
 800638a:	460d      	mov	r5, r1
 800638c:	b9d3      	cbnz	r3, 80063c4 <_strtod_l+0xb84>
 800638e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006392:	9012      	str	r0, [sp, #72]	; 0x48
 8006394:	9313      	str	r3, [sp, #76]	; 0x4c
 8006396:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800639a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800639c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80063a0:	1a9f      	subs	r7, r3, r2
 80063a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80063a6:	f001 fe41 	bl	800802c <__ulp>
 80063aa:	4602      	mov	r2, r0
 80063ac:	460b      	mov	r3, r1
 80063ae:	4630      	mov	r0, r6
 80063b0:	4639      	mov	r1, r7
 80063b2:	f7fa f891 	bl	80004d8 <__aeabi_dmul>
 80063b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80063ba:	f7f9 fed7 	bl	800016c <__adddf3>
 80063be:	4680      	mov	r8, r0
 80063c0:	4689      	mov	r9, r1
 80063c2:	e77e      	b.n	80062c2 <_strtod_l+0xa82>
 80063c4:	4602      	mov	r2, r0
 80063c6:	460b      	mov	r3, r1
 80063c8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80063cc:	e7e3      	b.n	8006396 <_strtod_l+0xb56>
 80063ce:	a30e      	add	r3, pc, #56	; (adr r3, 8006408 <_strtod_l+0xbc8>)
 80063d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d4:	f7fa faf2 	bl	80009bc <__aeabi_dcmplt>
 80063d8:	e7a1      	b.n	800631e <_strtod_l+0xade>
 80063da:	2300      	movs	r3, #0
 80063dc:	930a      	str	r3, [sp, #40]	; 0x28
 80063de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80063e0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80063e2:	6013      	str	r3, [r2, #0]
 80063e4:	f7ff ba71 	b.w	80058ca <_strtod_l+0x8a>
 80063e8:	2a65      	cmp	r2, #101	; 0x65
 80063ea:	f43f ab63 	beq.w	8005ab4 <_strtod_l+0x274>
 80063ee:	2a45      	cmp	r2, #69	; 0x45
 80063f0:	f43f ab60 	beq.w	8005ab4 <_strtod_l+0x274>
 80063f4:	2301      	movs	r3, #1
 80063f6:	f7ff bb95 	b.w	8005b24 <_strtod_l+0x2e4>
 80063fa:	bf00      	nop
 80063fc:	f3af 8000 	nop.w
 8006400:	ffc00000 	.word	0xffc00000
 8006404:	41dfffff 	.word	0x41dfffff
 8006408:	94a03595 	.word	0x94a03595
 800640c:	3fcfffff 	.word	0x3fcfffff

08006410 <_strtod_r>:
 8006410:	4b01      	ldr	r3, [pc, #4]	; (8006418 <_strtod_r+0x8>)
 8006412:	f7ff ba15 	b.w	8005840 <_strtod_l>
 8006416:	bf00      	nop
 8006418:	20000080 	.word	0x20000080

0800641c <_strtol_l.constprop.0>:
 800641c:	2b01      	cmp	r3, #1
 800641e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006422:	4680      	mov	r8, r0
 8006424:	d001      	beq.n	800642a <_strtol_l.constprop.0+0xe>
 8006426:	2b24      	cmp	r3, #36	; 0x24
 8006428:	d906      	bls.n	8006438 <_strtol_l.constprop.0+0x1c>
 800642a:	f7fe fb21 	bl	8004a70 <__errno>
 800642e:	2316      	movs	r3, #22
 8006430:	6003      	str	r3, [r0, #0]
 8006432:	2000      	movs	r0, #0
 8006434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006438:	460d      	mov	r5, r1
 800643a:	4f35      	ldr	r7, [pc, #212]	; (8006510 <_strtol_l.constprop.0+0xf4>)
 800643c:	4628      	mov	r0, r5
 800643e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006442:	5de6      	ldrb	r6, [r4, r7]
 8006444:	f016 0608 	ands.w	r6, r6, #8
 8006448:	d1f8      	bne.n	800643c <_strtol_l.constprop.0+0x20>
 800644a:	2c2d      	cmp	r4, #45	; 0x2d
 800644c:	d12f      	bne.n	80064ae <_strtol_l.constprop.0+0x92>
 800644e:	2601      	movs	r6, #1
 8006450:	782c      	ldrb	r4, [r5, #0]
 8006452:	1c85      	adds	r5, r0, #2
 8006454:	2b00      	cmp	r3, #0
 8006456:	d057      	beq.n	8006508 <_strtol_l.constprop.0+0xec>
 8006458:	2b10      	cmp	r3, #16
 800645a:	d109      	bne.n	8006470 <_strtol_l.constprop.0+0x54>
 800645c:	2c30      	cmp	r4, #48	; 0x30
 800645e:	d107      	bne.n	8006470 <_strtol_l.constprop.0+0x54>
 8006460:	7828      	ldrb	r0, [r5, #0]
 8006462:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006466:	2858      	cmp	r0, #88	; 0x58
 8006468:	d149      	bne.n	80064fe <_strtol_l.constprop.0+0xe2>
 800646a:	2310      	movs	r3, #16
 800646c:	786c      	ldrb	r4, [r5, #1]
 800646e:	3502      	adds	r5, #2
 8006470:	2700      	movs	r7, #0
 8006472:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8006476:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800647a:	fbbe f9f3 	udiv	r9, lr, r3
 800647e:	4638      	mov	r0, r7
 8006480:	fb03 ea19 	mls	sl, r3, r9, lr
 8006484:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006488:	f1bc 0f09 	cmp.w	ip, #9
 800648c:	d814      	bhi.n	80064b8 <_strtol_l.constprop.0+0x9c>
 800648e:	4664      	mov	r4, ip
 8006490:	42a3      	cmp	r3, r4
 8006492:	dd22      	ble.n	80064da <_strtol_l.constprop.0+0xbe>
 8006494:	2f00      	cmp	r7, #0
 8006496:	db1d      	blt.n	80064d4 <_strtol_l.constprop.0+0xb8>
 8006498:	4581      	cmp	r9, r0
 800649a:	d31b      	bcc.n	80064d4 <_strtol_l.constprop.0+0xb8>
 800649c:	d101      	bne.n	80064a2 <_strtol_l.constprop.0+0x86>
 800649e:	45a2      	cmp	sl, r4
 80064a0:	db18      	blt.n	80064d4 <_strtol_l.constprop.0+0xb8>
 80064a2:	2701      	movs	r7, #1
 80064a4:	fb00 4003 	mla	r0, r0, r3, r4
 80064a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80064ac:	e7ea      	b.n	8006484 <_strtol_l.constprop.0+0x68>
 80064ae:	2c2b      	cmp	r4, #43	; 0x2b
 80064b0:	bf04      	itt	eq
 80064b2:	782c      	ldrbeq	r4, [r5, #0]
 80064b4:	1c85      	addeq	r5, r0, #2
 80064b6:	e7cd      	b.n	8006454 <_strtol_l.constprop.0+0x38>
 80064b8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80064bc:	f1bc 0f19 	cmp.w	ip, #25
 80064c0:	d801      	bhi.n	80064c6 <_strtol_l.constprop.0+0xaa>
 80064c2:	3c37      	subs	r4, #55	; 0x37
 80064c4:	e7e4      	b.n	8006490 <_strtol_l.constprop.0+0x74>
 80064c6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80064ca:	f1bc 0f19 	cmp.w	ip, #25
 80064ce:	d804      	bhi.n	80064da <_strtol_l.constprop.0+0xbe>
 80064d0:	3c57      	subs	r4, #87	; 0x57
 80064d2:	e7dd      	b.n	8006490 <_strtol_l.constprop.0+0x74>
 80064d4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80064d8:	e7e6      	b.n	80064a8 <_strtol_l.constprop.0+0x8c>
 80064da:	2f00      	cmp	r7, #0
 80064dc:	da07      	bge.n	80064ee <_strtol_l.constprop.0+0xd2>
 80064de:	2322      	movs	r3, #34	; 0x22
 80064e0:	4670      	mov	r0, lr
 80064e2:	f8c8 3000 	str.w	r3, [r8]
 80064e6:	2a00      	cmp	r2, #0
 80064e8:	d0a4      	beq.n	8006434 <_strtol_l.constprop.0+0x18>
 80064ea:	1e69      	subs	r1, r5, #1
 80064ec:	e005      	b.n	80064fa <_strtol_l.constprop.0+0xde>
 80064ee:	b106      	cbz	r6, 80064f2 <_strtol_l.constprop.0+0xd6>
 80064f0:	4240      	negs	r0, r0
 80064f2:	2a00      	cmp	r2, #0
 80064f4:	d09e      	beq.n	8006434 <_strtol_l.constprop.0+0x18>
 80064f6:	2f00      	cmp	r7, #0
 80064f8:	d1f7      	bne.n	80064ea <_strtol_l.constprop.0+0xce>
 80064fa:	6011      	str	r1, [r2, #0]
 80064fc:	e79a      	b.n	8006434 <_strtol_l.constprop.0+0x18>
 80064fe:	2430      	movs	r4, #48	; 0x30
 8006500:	2b00      	cmp	r3, #0
 8006502:	d1b5      	bne.n	8006470 <_strtol_l.constprop.0+0x54>
 8006504:	2308      	movs	r3, #8
 8006506:	e7b3      	b.n	8006470 <_strtol_l.constprop.0+0x54>
 8006508:	2c30      	cmp	r4, #48	; 0x30
 800650a:	d0a9      	beq.n	8006460 <_strtol_l.constprop.0+0x44>
 800650c:	230a      	movs	r3, #10
 800650e:	e7af      	b.n	8006470 <_strtol_l.constprop.0+0x54>
 8006510:	08009ba1 	.word	0x08009ba1

08006514 <_strtol_r>:
 8006514:	f7ff bf82 	b.w	800641c <_strtol_l.constprop.0>

08006518 <quorem>:
 8006518:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800651c:	6903      	ldr	r3, [r0, #16]
 800651e:	690c      	ldr	r4, [r1, #16]
 8006520:	4607      	mov	r7, r0
 8006522:	42a3      	cmp	r3, r4
 8006524:	f2c0 8082 	blt.w	800662c <quorem+0x114>
 8006528:	3c01      	subs	r4, #1
 800652a:	f100 0514 	add.w	r5, r0, #20
 800652e:	f101 0814 	add.w	r8, r1, #20
 8006532:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006536:	9301      	str	r3, [sp, #4]
 8006538:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800653c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006540:	3301      	adds	r3, #1
 8006542:	429a      	cmp	r2, r3
 8006544:	fbb2 f6f3 	udiv	r6, r2, r3
 8006548:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800654c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006550:	d331      	bcc.n	80065b6 <quorem+0x9e>
 8006552:	f04f 0e00 	mov.w	lr, #0
 8006556:	4640      	mov	r0, r8
 8006558:	46ac      	mov	ip, r5
 800655a:	46f2      	mov	sl, lr
 800655c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006560:	b293      	uxth	r3, r2
 8006562:	fb06 e303 	mla	r3, r6, r3, lr
 8006566:	0c12      	lsrs	r2, r2, #16
 8006568:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800656c:	b29b      	uxth	r3, r3
 800656e:	fb06 e202 	mla	r2, r6, r2, lr
 8006572:	ebaa 0303 	sub.w	r3, sl, r3
 8006576:	f8dc a000 	ldr.w	sl, [ip]
 800657a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800657e:	fa1f fa8a 	uxth.w	sl, sl
 8006582:	4453      	add	r3, sl
 8006584:	f8dc a000 	ldr.w	sl, [ip]
 8006588:	b292      	uxth	r2, r2
 800658a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800658e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006592:	b29b      	uxth	r3, r3
 8006594:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006598:	4581      	cmp	r9, r0
 800659a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800659e:	f84c 3b04 	str.w	r3, [ip], #4
 80065a2:	d2db      	bcs.n	800655c <quorem+0x44>
 80065a4:	f855 300b 	ldr.w	r3, [r5, fp]
 80065a8:	b92b      	cbnz	r3, 80065b6 <quorem+0x9e>
 80065aa:	9b01      	ldr	r3, [sp, #4]
 80065ac:	3b04      	subs	r3, #4
 80065ae:	429d      	cmp	r5, r3
 80065b0:	461a      	mov	r2, r3
 80065b2:	d32f      	bcc.n	8006614 <quorem+0xfc>
 80065b4:	613c      	str	r4, [r7, #16]
 80065b6:	4638      	mov	r0, r7
 80065b8:	f001 fc90 	bl	8007edc <__mcmp>
 80065bc:	2800      	cmp	r0, #0
 80065be:	db25      	blt.n	800660c <quorem+0xf4>
 80065c0:	4628      	mov	r0, r5
 80065c2:	f04f 0c00 	mov.w	ip, #0
 80065c6:	3601      	adds	r6, #1
 80065c8:	f858 1b04 	ldr.w	r1, [r8], #4
 80065cc:	f8d0 e000 	ldr.w	lr, [r0]
 80065d0:	b28b      	uxth	r3, r1
 80065d2:	ebac 0303 	sub.w	r3, ip, r3
 80065d6:	fa1f f28e 	uxth.w	r2, lr
 80065da:	4413      	add	r3, r2
 80065dc:	0c0a      	lsrs	r2, r1, #16
 80065de:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80065e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065ec:	45c1      	cmp	r9, r8
 80065ee:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80065f2:	f840 3b04 	str.w	r3, [r0], #4
 80065f6:	d2e7      	bcs.n	80065c8 <quorem+0xb0>
 80065f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80065fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006600:	b922      	cbnz	r2, 800660c <quorem+0xf4>
 8006602:	3b04      	subs	r3, #4
 8006604:	429d      	cmp	r5, r3
 8006606:	461a      	mov	r2, r3
 8006608:	d30a      	bcc.n	8006620 <quorem+0x108>
 800660a:	613c      	str	r4, [r7, #16]
 800660c:	4630      	mov	r0, r6
 800660e:	b003      	add	sp, #12
 8006610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006614:	6812      	ldr	r2, [r2, #0]
 8006616:	3b04      	subs	r3, #4
 8006618:	2a00      	cmp	r2, #0
 800661a:	d1cb      	bne.n	80065b4 <quorem+0x9c>
 800661c:	3c01      	subs	r4, #1
 800661e:	e7c6      	b.n	80065ae <quorem+0x96>
 8006620:	6812      	ldr	r2, [r2, #0]
 8006622:	3b04      	subs	r3, #4
 8006624:	2a00      	cmp	r2, #0
 8006626:	d1f0      	bne.n	800660a <quorem+0xf2>
 8006628:	3c01      	subs	r4, #1
 800662a:	e7eb      	b.n	8006604 <quorem+0xec>
 800662c:	2000      	movs	r0, #0
 800662e:	e7ee      	b.n	800660e <quorem+0xf6>

08006630 <_dtoa_r>:
 8006630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006634:	4616      	mov	r6, r2
 8006636:	461f      	mov	r7, r3
 8006638:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800663a:	b099      	sub	sp, #100	; 0x64
 800663c:	4605      	mov	r5, r0
 800663e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006642:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006646:	b974      	cbnz	r4, 8006666 <_dtoa_r+0x36>
 8006648:	2010      	movs	r0, #16
 800664a:	f001 f949 	bl	80078e0 <malloc>
 800664e:	4602      	mov	r2, r0
 8006650:	6268      	str	r0, [r5, #36]	; 0x24
 8006652:	b920      	cbnz	r0, 800665e <_dtoa_r+0x2e>
 8006654:	21ea      	movs	r1, #234	; 0xea
 8006656:	4ba8      	ldr	r3, [pc, #672]	; (80068f8 <_dtoa_r+0x2c8>)
 8006658:	48a8      	ldr	r0, [pc, #672]	; (80068fc <_dtoa_r+0x2cc>)
 800665a:	f002 f8b3 	bl	80087c4 <__assert_func>
 800665e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006662:	6004      	str	r4, [r0, #0]
 8006664:	60c4      	str	r4, [r0, #12]
 8006666:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006668:	6819      	ldr	r1, [r3, #0]
 800666a:	b151      	cbz	r1, 8006682 <_dtoa_r+0x52>
 800666c:	685a      	ldr	r2, [r3, #4]
 800666e:	2301      	movs	r3, #1
 8006670:	4093      	lsls	r3, r2
 8006672:	604a      	str	r2, [r1, #4]
 8006674:	608b      	str	r3, [r1, #8]
 8006676:	4628      	mov	r0, r5
 8006678:	f001 f9a8 	bl	80079cc <_Bfree>
 800667c:	2200      	movs	r2, #0
 800667e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006680:	601a      	str	r2, [r3, #0]
 8006682:	1e3b      	subs	r3, r7, #0
 8006684:	bfaf      	iteee	ge
 8006686:	2300      	movge	r3, #0
 8006688:	2201      	movlt	r2, #1
 800668a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800668e:	9305      	strlt	r3, [sp, #20]
 8006690:	bfa8      	it	ge
 8006692:	f8c8 3000 	strge.w	r3, [r8]
 8006696:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800669a:	4b99      	ldr	r3, [pc, #612]	; (8006900 <_dtoa_r+0x2d0>)
 800669c:	bfb8      	it	lt
 800669e:	f8c8 2000 	strlt.w	r2, [r8]
 80066a2:	ea33 0309 	bics.w	r3, r3, r9
 80066a6:	d119      	bne.n	80066dc <_dtoa_r+0xac>
 80066a8:	f242 730f 	movw	r3, #9999	; 0x270f
 80066ac:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80066ae:	6013      	str	r3, [r2, #0]
 80066b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80066b4:	4333      	orrs	r3, r6
 80066b6:	f000 857f 	beq.w	80071b8 <_dtoa_r+0xb88>
 80066ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80066bc:	b953      	cbnz	r3, 80066d4 <_dtoa_r+0xa4>
 80066be:	4b91      	ldr	r3, [pc, #580]	; (8006904 <_dtoa_r+0x2d4>)
 80066c0:	e022      	b.n	8006708 <_dtoa_r+0xd8>
 80066c2:	4b91      	ldr	r3, [pc, #580]	; (8006908 <_dtoa_r+0x2d8>)
 80066c4:	9303      	str	r3, [sp, #12]
 80066c6:	3308      	adds	r3, #8
 80066c8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80066ca:	6013      	str	r3, [r2, #0]
 80066cc:	9803      	ldr	r0, [sp, #12]
 80066ce:	b019      	add	sp, #100	; 0x64
 80066d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066d4:	4b8b      	ldr	r3, [pc, #556]	; (8006904 <_dtoa_r+0x2d4>)
 80066d6:	9303      	str	r3, [sp, #12]
 80066d8:	3303      	adds	r3, #3
 80066da:	e7f5      	b.n	80066c8 <_dtoa_r+0x98>
 80066dc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80066e0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80066e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80066e8:	2200      	movs	r2, #0
 80066ea:	2300      	movs	r3, #0
 80066ec:	f7fa f95c 	bl	80009a8 <__aeabi_dcmpeq>
 80066f0:	4680      	mov	r8, r0
 80066f2:	b158      	cbz	r0, 800670c <_dtoa_r+0xdc>
 80066f4:	2301      	movs	r3, #1
 80066f6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80066f8:	6013      	str	r3, [r2, #0]
 80066fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f000 8558 	beq.w	80071b2 <_dtoa_r+0xb82>
 8006702:	4882      	ldr	r0, [pc, #520]	; (800690c <_dtoa_r+0x2dc>)
 8006704:	6018      	str	r0, [r3, #0]
 8006706:	1e43      	subs	r3, r0, #1
 8006708:	9303      	str	r3, [sp, #12]
 800670a:	e7df      	b.n	80066cc <_dtoa_r+0x9c>
 800670c:	ab16      	add	r3, sp, #88	; 0x58
 800670e:	9301      	str	r3, [sp, #4]
 8006710:	ab17      	add	r3, sp, #92	; 0x5c
 8006712:	9300      	str	r3, [sp, #0]
 8006714:	4628      	mov	r0, r5
 8006716:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800671a:	f001 fd01 	bl	8008120 <__d2b>
 800671e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006722:	4683      	mov	fp, r0
 8006724:	2c00      	cmp	r4, #0
 8006726:	d07f      	beq.n	8006828 <_dtoa_r+0x1f8>
 8006728:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800672c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800672e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006732:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006736:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800673a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800673e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006742:	2200      	movs	r2, #0
 8006744:	4b72      	ldr	r3, [pc, #456]	; (8006910 <_dtoa_r+0x2e0>)
 8006746:	f7f9 fd0f 	bl	8000168 <__aeabi_dsub>
 800674a:	a365      	add	r3, pc, #404	; (adr r3, 80068e0 <_dtoa_r+0x2b0>)
 800674c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006750:	f7f9 fec2 	bl	80004d8 <__aeabi_dmul>
 8006754:	a364      	add	r3, pc, #400	; (adr r3, 80068e8 <_dtoa_r+0x2b8>)
 8006756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675a:	f7f9 fd07 	bl	800016c <__adddf3>
 800675e:	4606      	mov	r6, r0
 8006760:	4620      	mov	r0, r4
 8006762:	460f      	mov	r7, r1
 8006764:	f7f9 fe4e 	bl	8000404 <__aeabi_i2d>
 8006768:	a361      	add	r3, pc, #388	; (adr r3, 80068f0 <_dtoa_r+0x2c0>)
 800676a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676e:	f7f9 feb3 	bl	80004d8 <__aeabi_dmul>
 8006772:	4602      	mov	r2, r0
 8006774:	460b      	mov	r3, r1
 8006776:	4630      	mov	r0, r6
 8006778:	4639      	mov	r1, r7
 800677a:	f7f9 fcf7 	bl	800016c <__adddf3>
 800677e:	4606      	mov	r6, r0
 8006780:	460f      	mov	r7, r1
 8006782:	f7fa f959 	bl	8000a38 <__aeabi_d2iz>
 8006786:	2200      	movs	r2, #0
 8006788:	4682      	mov	sl, r0
 800678a:	2300      	movs	r3, #0
 800678c:	4630      	mov	r0, r6
 800678e:	4639      	mov	r1, r7
 8006790:	f7fa f914 	bl	80009bc <__aeabi_dcmplt>
 8006794:	b148      	cbz	r0, 80067aa <_dtoa_r+0x17a>
 8006796:	4650      	mov	r0, sl
 8006798:	f7f9 fe34 	bl	8000404 <__aeabi_i2d>
 800679c:	4632      	mov	r2, r6
 800679e:	463b      	mov	r3, r7
 80067a0:	f7fa f902 	bl	80009a8 <__aeabi_dcmpeq>
 80067a4:	b908      	cbnz	r0, 80067aa <_dtoa_r+0x17a>
 80067a6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80067aa:	f1ba 0f16 	cmp.w	sl, #22
 80067ae:	d858      	bhi.n	8006862 <_dtoa_r+0x232>
 80067b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80067b4:	4b57      	ldr	r3, [pc, #348]	; (8006914 <_dtoa_r+0x2e4>)
 80067b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80067ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067be:	f7fa f8fd 	bl	80009bc <__aeabi_dcmplt>
 80067c2:	2800      	cmp	r0, #0
 80067c4:	d04f      	beq.n	8006866 <_dtoa_r+0x236>
 80067c6:	2300      	movs	r3, #0
 80067c8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80067cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80067ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80067d0:	1b1c      	subs	r4, r3, r4
 80067d2:	1e63      	subs	r3, r4, #1
 80067d4:	9309      	str	r3, [sp, #36]	; 0x24
 80067d6:	bf49      	itett	mi
 80067d8:	f1c4 0301 	rsbmi	r3, r4, #1
 80067dc:	2300      	movpl	r3, #0
 80067de:	9306      	strmi	r3, [sp, #24]
 80067e0:	2300      	movmi	r3, #0
 80067e2:	bf54      	ite	pl
 80067e4:	9306      	strpl	r3, [sp, #24]
 80067e6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80067e8:	f1ba 0f00 	cmp.w	sl, #0
 80067ec:	db3d      	blt.n	800686a <_dtoa_r+0x23a>
 80067ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067f0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80067f4:	4453      	add	r3, sl
 80067f6:	9309      	str	r3, [sp, #36]	; 0x24
 80067f8:	2300      	movs	r3, #0
 80067fa:	930a      	str	r3, [sp, #40]	; 0x28
 80067fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80067fe:	2b09      	cmp	r3, #9
 8006800:	f200 808c 	bhi.w	800691c <_dtoa_r+0x2ec>
 8006804:	2b05      	cmp	r3, #5
 8006806:	bfc4      	itt	gt
 8006808:	3b04      	subgt	r3, #4
 800680a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800680c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800680e:	bfc8      	it	gt
 8006810:	2400      	movgt	r4, #0
 8006812:	f1a3 0302 	sub.w	r3, r3, #2
 8006816:	bfd8      	it	le
 8006818:	2401      	movle	r4, #1
 800681a:	2b03      	cmp	r3, #3
 800681c:	f200 808a 	bhi.w	8006934 <_dtoa_r+0x304>
 8006820:	e8df f003 	tbb	[pc, r3]
 8006824:	5b4d4f2d 	.word	0x5b4d4f2d
 8006828:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800682c:	441c      	add	r4, r3
 800682e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006832:	2b20      	cmp	r3, #32
 8006834:	bfc3      	ittte	gt
 8006836:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800683a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800683e:	fa09 f303 	lslgt.w	r3, r9, r3
 8006842:	f1c3 0320 	rsble	r3, r3, #32
 8006846:	bfc6      	itte	gt
 8006848:	fa26 f000 	lsrgt.w	r0, r6, r0
 800684c:	4318      	orrgt	r0, r3
 800684e:	fa06 f003 	lslle.w	r0, r6, r3
 8006852:	f7f9 fdc7 	bl	80003e4 <__aeabi_ui2d>
 8006856:	2301      	movs	r3, #1
 8006858:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800685c:	3c01      	subs	r4, #1
 800685e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006860:	e76f      	b.n	8006742 <_dtoa_r+0x112>
 8006862:	2301      	movs	r3, #1
 8006864:	e7b2      	b.n	80067cc <_dtoa_r+0x19c>
 8006866:	900f      	str	r0, [sp, #60]	; 0x3c
 8006868:	e7b1      	b.n	80067ce <_dtoa_r+0x19e>
 800686a:	9b06      	ldr	r3, [sp, #24]
 800686c:	eba3 030a 	sub.w	r3, r3, sl
 8006870:	9306      	str	r3, [sp, #24]
 8006872:	f1ca 0300 	rsb	r3, sl, #0
 8006876:	930a      	str	r3, [sp, #40]	; 0x28
 8006878:	2300      	movs	r3, #0
 800687a:	930e      	str	r3, [sp, #56]	; 0x38
 800687c:	e7be      	b.n	80067fc <_dtoa_r+0x1cc>
 800687e:	2300      	movs	r3, #0
 8006880:	930b      	str	r3, [sp, #44]	; 0x2c
 8006882:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006884:	2b00      	cmp	r3, #0
 8006886:	dc58      	bgt.n	800693a <_dtoa_r+0x30a>
 8006888:	f04f 0901 	mov.w	r9, #1
 800688c:	464b      	mov	r3, r9
 800688e:	f8cd 9020 	str.w	r9, [sp, #32]
 8006892:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006896:	2200      	movs	r2, #0
 8006898:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800689a:	6042      	str	r2, [r0, #4]
 800689c:	2204      	movs	r2, #4
 800689e:	f102 0614 	add.w	r6, r2, #20
 80068a2:	429e      	cmp	r6, r3
 80068a4:	6841      	ldr	r1, [r0, #4]
 80068a6:	d94e      	bls.n	8006946 <_dtoa_r+0x316>
 80068a8:	4628      	mov	r0, r5
 80068aa:	f001 f84f 	bl	800794c <_Balloc>
 80068ae:	9003      	str	r0, [sp, #12]
 80068b0:	2800      	cmp	r0, #0
 80068b2:	d14c      	bne.n	800694e <_dtoa_r+0x31e>
 80068b4:	4602      	mov	r2, r0
 80068b6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80068ba:	4b17      	ldr	r3, [pc, #92]	; (8006918 <_dtoa_r+0x2e8>)
 80068bc:	e6cc      	b.n	8006658 <_dtoa_r+0x28>
 80068be:	2301      	movs	r3, #1
 80068c0:	e7de      	b.n	8006880 <_dtoa_r+0x250>
 80068c2:	2300      	movs	r3, #0
 80068c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80068c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80068c8:	eb0a 0903 	add.w	r9, sl, r3
 80068cc:	f109 0301 	add.w	r3, r9, #1
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	9308      	str	r3, [sp, #32]
 80068d4:	bfb8      	it	lt
 80068d6:	2301      	movlt	r3, #1
 80068d8:	e7dd      	b.n	8006896 <_dtoa_r+0x266>
 80068da:	2301      	movs	r3, #1
 80068dc:	e7f2      	b.n	80068c4 <_dtoa_r+0x294>
 80068de:	bf00      	nop
 80068e0:	636f4361 	.word	0x636f4361
 80068e4:	3fd287a7 	.word	0x3fd287a7
 80068e8:	8b60c8b3 	.word	0x8b60c8b3
 80068ec:	3fc68a28 	.word	0x3fc68a28
 80068f0:	509f79fb 	.word	0x509f79fb
 80068f4:	3fd34413 	.word	0x3fd34413
 80068f8:	08009cae 	.word	0x08009cae
 80068fc:	08009cc5 	.word	0x08009cc5
 8006900:	7ff00000 	.word	0x7ff00000
 8006904:	08009caa 	.word	0x08009caa
 8006908:	08009ca1 	.word	0x08009ca1
 800690c:	08009b25 	.word	0x08009b25
 8006910:	3ff80000 	.word	0x3ff80000
 8006914:	08009e30 	.word	0x08009e30
 8006918:	08009d20 	.word	0x08009d20
 800691c:	2401      	movs	r4, #1
 800691e:	2300      	movs	r3, #0
 8006920:	940b      	str	r4, [sp, #44]	; 0x2c
 8006922:	9322      	str	r3, [sp, #136]	; 0x88
 8006924:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8006928:	2200      	movs	r2, #0
 800692a:	2312      	movs	r3, #18
 800692c:	f8cd 9020 	str.w	r9, [sp, #32]
 8006930:	9223      	str	r2, [sp, #140]	; 0x8c
 8006932:	e7b0      	b.n	8006896 <_dtoa_r+0x266>
 8006934:	2301      	movs	r3, #1
 8006936:	930b      	str	r3, [sp, #44]	; 0x2c
 8006938:	e7f4      	b.n	8006924 <_dtoa_r+0x2f4>
 800693a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800693e:	464b      	mov	r3, r9
 8006940:	f8cd 9020 	str.w	r9, [sp, #32]
 8006944:	e7a7      	b.n	8006896 <_dtoa_r+0x266>
 8006946:	3101      	adds	r1, #1
 8006948:	6041      	str	r1, [r0, #4]
 800694a:	0052      	lsls	r2, r2, #1
 800694c:	e7a7      	b.n	800689e <_dtoa_r+0x26e>
 800694e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006950:	9a03      	ldr	r2, [sp, #12]
 8006952:	601a      	str	r2, [r3, #0]
 8006954:	9b08      	ldr	r3, [sp, #32]
 8006956:	2b0e      	cmp	r3, #14
 8006958:	f200 80a8 	bhi.w	8006aac <_dtoa_r+0x47c>
 800695c:	2c00      	cmp	r4, #0
 800695e:	f000 80a5 	beq.w	8006aac <_dtoa_r+0x47c>
 8006962:	f1ba 0f00 	cmp.w	sl, #0
 8006966:	dd34      	ble.n	80069d2 <_dtoa_r+0x3a2>
 8006968:	4a9a      	ldr	r2, [pc, #616]	; (8006bd4 <_dtoa_r+0x5a4>)
 800696a:	f00a 030f 	and.w	r3, sl, #15
 800696e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006972:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006976:	e9d3 3400 	ldrd	r3, r4, [r3]
 800697a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800697e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006982:	d016      	beq.n	80069b2 <_dtoa_r+0x382>
 8006984:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006988:	4b93      	ldr	r3, [pc, #588]	; (8006bd8 <_dtoa_r+0x5a8>)
 800698a:	2703      	movs	r7, #3
 800698c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006990:	f7f9 fecc 	bl	800072c <__aeabi_ddiv>
 8006994:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006998:	f004 040f 	and.w	r4, r4, #15
 800699c:	4e8e      	ldr	r6, [pc, #568]	; (8006bd8 <_dtoa_r+0x5a8>)
 800699e:	b954      	cbnz	r4, 80069b6 <_dtoa_r+0x386>
 80069a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80069a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069a8:	f7f9 fec0 	bl	800072c <__aeabi_ddiv>
 80069ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069b0:	e029      	b.n	8006a06 <_dtoa_r+0x3d6>
 80069b2:	2702      	movs	r7, #2
 80069b4:	e7f2      	b.n	800699c <_dtoa_r+0x36c>
 80069b6:	07e1      	lsls	r1, r4, #31
 80069b8:	d508      	bpl.n	80069cc <_dtoa_r+0x39c>
 80069ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80069be:	e9d6 2300 	ldrd	r2, r3, [r6]
 80069c2:	f7f9 fd89 	bl	80004d8 <__aeabi_dmul>
 80069c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80069ca:	3701      	adds	r7, #1
 80069cc:	1064      	asrs	r4, r4, #1
 80069ce:	3608      	adds	r6, #8
 80069d0:	e7e5      	b.n	800699e <_dtoa_r+0x36e>
 80069d2:	f000 80a5 	beq.w	8006b20 <_dtoa_r+0x4f0>
 80069d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80069da:	f1ca 0400 	rsb	r4, sl, #0
 80069de:	4b7d      	ldr	r3, [pc, #500]	; (8006bd4 <_dtoa_r+0x5a4>)
 80069e0:	f004 020f 	and.w	r2, r4, #15
 80069e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ec:	f7f9 fd74 	bl	80004d8 <__aeabi_dmul>
 80069f0:	2702      	movs	r7, #2
 80069f2:	2300      	movs	r3, #0
 80069f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069f8:	4e77      	ldr	r6, [pc, #476]	; (8006bd8 <_dtoa_r+0x5a8>)
 80069fa:	1124      	asrs	r4, r4, #4
 80069fc:	2c00      	cmp	r4, #0
 80069fe:	f040 8084 	bne.w	8006b0a <_dtoa_r+0x4da>
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1d2      	bne.n	80069ac <_dtoa_r+0x37c>
 8006a06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f000 808b 	beq.w	8006b24 <_dtoa_r+0x4f4>
 8006a0e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006a12:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006a16:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	4b6f      	ldr	r3, [pc, #444]	; (8006bdc <_dtoa_r+0x5ac>)
 8006a1e:	f7f9 ffcd 	bl	80009bc <__aeabi_dcmplt>
 8006a22:	2800      	cmp	r0, #0
 8006a24:	d07e      	beq.n	8006b24 <_dtoa_r+0x4f4>
 8006a26:	9b08      	ldr	r3, [sp, #32]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d07b      	beq.n	8006b24 <_dtoa_r+0x4f4>
 8006a2c:	f1b9 0f00 	cmp.w	r9, #0
 8006a30:	dd38      	ble.n	8006aa4 <_dtoa_r+0x474>
 8006a32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006a36:	2200      	movs	r2, #0
 8006a38:	4b69      	ldr	r3, [pc, #420]	; (8006be0 <_dtoa_r+0x5b0>)
 8006a3a:	f7f9 fd4d 	bl	80004d8 <__aeabi_dmul>
 8006a3e:	464c      	mov	r4, r9
 8006a40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a44:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8006a48:	3701      	adds	r7, #1
 8006a4a:	4638      	mov	r0, r7
 8006a4c:	f7f9 fcda 	bl	8000404 <__aeabi_i2d>
 8006a50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a54:	f7f9 fd40 	bl	80004d8 <__aeabi_dmul>
 8006a58:	2200      	movs	r2, #0
 8006a5a:	4b62      	ldr	r3, [pc, #392]	; (8006be4 <_dtoa_r+0x5b4>)
 8006a5c:	f7f9 fb86 	bl	800016c <__adddf3>
 8006a60:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006a64:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006a68:	9611      	str	r6, [sp, #68]	; 0x44
 8006a6a:	2c00      	cmp	r4, #0
 8006a6c:	d15d      	bne.n	8006b2a <_dtoa_r+0x4fa>
 8006a6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a72:	2200      	movs	r2, #0
 8006a74:	4b5c      	ldr	r3, [pc, #368]	; (8006be8 <_dtoa_r+0x5b8>)
 8006a76:	f7f9 fb77 	bl	8000168 <__aeabi_dsub>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006a82:	4633      	mov	r3, r6
 8006a84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006a86:	f7f9 ffb7 	bl	80009f8 <__aeabi_dcmpgt>
 8006a8a:	2800      	cmp	r0, #0
 8006a8c:	f040 829c 	bne.w	8006fc8 <_dtoa_r+0x998>
 8006a90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006a96:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006a9a:	f7f9 ff8f 	bl	80009bc <__aeabi_dcmplt>
 8006a9e:	2800      	cmp	r0, #0
 8006aa0:	f040 8290 	bne.w	8006fc4 <_dtoa_r+0x994>
 8006aa4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006aa8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006aac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f2c0 8152 	blt.w	8006d58 <_dtoa_r+0x728>
 8006ab4:	f1ba 0f0e 	cmp.w	sl, #14
 8006ab8:	f300 814e 	bgt.w	8006d58 <_dtoa_r+0x728>
 8006abc:	4b45      	ldr	r3, [pc, #276]	; (8006bd4 <_dtoa_r+0x5a4>)
 8006abe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006ac2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006ac6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006aca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f280 80db 	bge.w	8006c88 <_dtoa_r+0x658>
 8006ad2:	9b08      	ldr	r3, [sp, #32]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f300 80d7 	bgt.w	8006c88 <_dtoa_r+0x658>
 8006ada:	f040 8272 	bne.w	8006fc2 <_dtoa_r+0x992>
 8006ade:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	4b40      	ldr	r3, [pc, #256]	; (8006be8 <_dtoa_r+0x5b8>)
 8006ae6:	f7f9 fcf7 	bl	80004d8 <__aeabi_dmul>
 8006aea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006aee:	f7f9 ff79 	bl	80009e4 <__aeabi_dcmpge>
 8006af2:	9c08      	ldr	r4, [sp, #32]
 8006af4:	4626      	mov	r6, r4
 8006af6:	2800      	cmp	r0, #0
 8006af8:	f040 8248 	bne.w	8006f8c <_dtoa_r+0x95c>
 8006afc:	2331      	movs	r3, #49	; 0x31
 8006afe:	9f03      	ldr	r7, [sp, #12]
 8006b00:	f10a 0a01 	add.w	sl, sl, #1
 8006b04:	f807 3b01 	strb.w	r3, [r7], #1
 8006b08:	e244      	b.n	8006f94 <_dtoa_r+0x964>
 8006b0a:	07e2      	lsls	r2, r4, #31
 8006b0c:	d505      	bpl.n	8006b1a <_dtoa_r+0x4ea>
 8006b0e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006b12:	f7f9 fce1 	bl	80004d8 <__aeabi_dmul>
 8006b16:	2301      	movs	r3, #1
 8006b18:	3701      	adds	r7, #1
 8006b1a:	1064      	asrs	r4, r4, #1
 8006b1c:	3608      	adds	r6, #8
 8006b1e:	e76d      	b.n	80069fc <_dtoa_r+0x3cc>
 8006b20:	2702      	movs	r7, #2
 8006b22:	e770      	b.n	8006a06 <_dtoa_r+0x3d6>
 8006b24:	46d0      	mov	r8, sl
 8006b26:	9c08      	ldr	r4, [sp, #32]
 8006b28:	e78f      	b.n	8006a4a <_dtoa_r+0x41a>
 8006b2a:	9903      	ldr	r1, [sp, #12]
 8006b2c:	4b29      	ldr	r3, [pc, #164]	; (8006bd4 <_dtoa_r+0x5a4>)
 8006b2e:	4421      	add	r1, r4
 8006b30:	9112      	str	r1, [sp, #72]	; 0x48
 8006b32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b34:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006b38:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006b3c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006b40:	2900      	cmp	r1, #0
 8006b42:	d055      	beq.n	8006bf0 <_dtoa_r+0x5c0>
 8006b44:	2000      	movs	r0, #0
 8006b46:	4929      	ldr	r1, [pc, #164]	; (8006bec <_dtoa_r+0x5bc>)
 8006b48:	f7f9 fdf0 	bl	800072c <__aeabi_ddiv>
 8006b4c:	463b      	mov	r3, r7
 8006b4e:	4632      	mov	r2, r6
 8006b50:	f7f9 fb0a 	bl	8000168 <__aeabi_dsub>
 8006b54:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006b58:	9f03      	ldr	r7, [sp, #12]
 8006b5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b5e:	f7f9 ff6b 	bl	8000a38 <__aeabi_d2iz>
 8006b62:	4604      	mov	r4, r0
 8006b64:	f7f9 fc4e 	bl	8000404 <__aeabi_i2d>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b70:	f7f9 fafa 	bl	8000168 <__aeabi_dsub>
 8006b74:	4602      	mov	r2, r0
 8006b76:	460b      	mov	r3, r1
 8006b78:	3430      	adds	r4, #48	; 0x30
 8006b7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006b7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006b82:	f807 4b01 	strb.w	r4, [r7], #1
 8006b86:	f7f9 ff19 	bl	80009bc <__aeabi_dcmplt>
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	d174      	bne.n	8006c78 <_dtoa_r+0x648>
 8006b8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b92:	2000      	movs	r0, #0
 8006b94:	4911      	ldr	r1, [pc, #68]	; (8006bdc <_dtoa_r+0x5ac>)
 8006b96:	f7f9 fae7 	bl	8000168 <__aeabi_dsub>
 8006b9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006b9e:	f7f9 ff0d 	bl	80009bc <__aeabi_dcmplt>
 8006ba2:	2800      	cmp	r0, #0
 8006ba4:	f040 80b7 	bne.w	8006d16 <_dtoa_r+0x6e6>
 8006ba8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006baa:	429f      	cmp	r7, r3
 8006bac:	f43f af7a 	beq.w	8006aa4 <_dtoa_r+0x474>
 8006bb0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	4b0a      	ldr	r3, [pc, #40]	; (8006be0 <_dtoa_r+0x5b0>)
 8006bb8:	f7f9 fc8e 	bl	80004d8 <__aeabi_dmul>
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006bc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bc6:	4b06      	ldr	r3, [pc, #24]	; (8006be0 <_dtoa_r+0x5b0>)
 8006bc8:	f7f9 fc86 	bl	80004d8 <__aeabi_dmul>
 8006bcc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bd0:	e7c3      	b.n	8006b5a <_dtoa_r+0x52a>
 8006bd2:	bf00      	nop
 8006bd4:	08009e30 	.word	0x08009e30
 8006bd8:	08009e08 	.word	0x08009e08
 8006bdc:	3ff00000 	.word	0x3ff00000
 8006be0:	40240000 	.word	0x40240000
 8006be4:	401c0000 	.word	0x401c0000
 8006be8:	40140000 	.word	0x40140000
 8006bec:	3fe00000 	.word	0x3fe00000
 8006bf0:	4630      	mov	r0, r6
 8006bf2:	4639      	mov	r1, r7
 8006bf4:	f7f9 fc70 	bl	80004d8 <__aeabi_dmul>
 8006bf8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006bfa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006bfe:	9c03      	ldr	r4, [sp, #12]
 8006c00:	9314      	str	r3, [sp, #80]	; 0x50
 8006c02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c06:	f7f9 ff17 	bl	8000a38 <__aeabi_d2iz>
 8006c0a:	9015      	str	r0, [sp, #84]	; 0x54
 8006c0c:	f7f9 fbfa 	bl	8000404 <__aeabi_i2d>
 8006c10:	4602      	mov	r2, r0
 8006c12:	460b      	mov	r3, r1
 8006c14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c18:	f7f9 faa6 	bl	8000168 <__aeabi_dsub>
 8006c1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c1e:	4606      	mov	r6, r0
 8006c20:	3330      	adds	r3, #48	; 0x30
 8006c22:	f804 3b01 	strb.w	r3, [r4], #1
 8006c26:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c28:	460f      	mov	r7, r1
 8006c2a:	429c      	cmp	r4, r3
 8006c2c:	f04f 0200 	mov.w	r2, #0
 8006c30:	d124      	bne.n	8006c7c <_dtoa_r+0x64c>
 8006c32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c36:	4bb0      	ldr	r3, [pc, #704]	; (8006ef8 <_dtoa_r+0x8c8>)
 8006c38:	f7f9 fa98 	bl	800016c <__adddf3>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	460b      	mov	r3, r1
 8006c40:	4630      	mov	r0, r6
 8006c42:	4639      	mov	r1, r7
 8006c44:	f7f9 fed8 	bl	80009f8 <__aeabi_dcmpgt>
 8006c48:	2800      	cmp	r0, #0
 8006c4a:	d163      	bne.n	8006d14 <_dtoa_r+0x6e4>
 8006c4c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006c50:	2000      	movs	r0, #0
 8006c52:	49a9      	ldr	r1, [pc, #676]	; (8006ef8 <_dtoa_r+0x8c8>)
 8006c54:	f7f9 fa88 	bl	8000168 <__aeabi_dsub>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	4630      	mov	r0, r6
 8006c5e:	4639      	mov	r1, r7
 8006c60:	f7f9 feac 	bl	80009bc <__aeabi_dcmplt>
 8006c64:	2800      	cmp	r0, #0
 8006c66:	f43f af1d 	beq.w	8006aa4 <_dtoa_r+0x474>
 8006c6a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006c6c:	1e7b      	subs	r3, r7, #1
 8006c6e:	9314      	str	r3, [sp, #80]	; 0x50
 8006c70:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006c74:	2b30      	cmp	r3, #48	; 0x30
 8006c76:	d0f8      	beq.n	8006c6a <_dtoa_r+0x63a>
 8006c78:	46c2      	mov	sl, r8
 8006c7a:	e03b      	b.n	8006cf4 <_dtoa_r+0x6c4>
 8006c7c:	4b9f      	ldr	r3, [pc, #636]	; (8006efc <_dtoa_r+0x8cc>)
 8006c7e:	f7f9 fc2b 	bl	80004d8 <__aeabi_dmul>
 8006c82:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c86:	e7bc      	b.n	8006c02 <_dtoa_r+0x5d2>
 8006c88:	9f03      	ldr	r7, [sp, #12]
 8006c8a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006c8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c92:	4640      	mov	r0, r8
 8006c94:	4649      	mov	r1, r9
 8006c96:	f7f9 fd49 	bl	800072c <__aeabi_ddiv>
 8006c9a:	f7f9 fecd 	bl	8000a38 <__aeabi_d2iz>
 8006c9e:	4604      	mov	r4, r0
 8006ca0:	f7f9 fbb0 	bl	8000404 <__aeabi_i2d>
 8006ca4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ca8:	f7f9 fc16 	bl	80004d8 <__aeabi_dmul>
 8006cac:	4602      	mov	r2, r0
 8006cae:	460b      	mov	r3, r1
 8006cb0:	4640      	mov	r0, r8
 8006cb2:	4649      	mov	r1, r9
 8006cb4:	f7f9 fa58 	bl	8000168 <__aeabi_dsub>
 8006cb8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006cbc:	f807 6b01 	strb.w	r6, [r7], #1
 8006cc0:	9e03      	ldr	r6, [sp, #12]
 8006cc2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006cc6:	1bbe      	subs	r6, r7, r6
 8006cc8:	45b4      	cmp	ip, r6
 8006cca:	4602      	mov	r2, r0
 8006ccc:	460b      	mov	r3, r1
 8006cce:	d136      	bne.n	8006d3e <_dtoa_r+0x70e>
 8006cd0:	f7f9 fa4c 	bl	800016c <__adddf3>
 8006cd4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006cd8:	4680      	mov	r8, r0
 8006cda:	4689      	mov	r9, r1
 8006cdc:	f7f9 fe8c 	bl	80009f8 <__aeabi_dcmpgt>
 8006ce0:	bb58      	cbnz	r0, 8006d3a <_dtoa_r+0x70a>
 8006ce2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ce6:	4640      	mov	r0, r8
 8006ce8:	4649      	mov	r1, r9
 8006cea:	f7f9 fe5d 	bl	80009a8 <__aeabi_dcmpeq>
 8006cee:	b108      	cbz	r0, 8006cf4 <_dtoa_r+0x6c4>
 8006cf0:	07e1      	lsls	r1, r4, #31
 8006cf2:	d422      	bmi.n	8006d3a <_dtoa_r+0x70a>
 8006cf4:	4628      	mov	r0, r5
 8006cf6:	4659      	mov	r1, fp
 8006cf8:	f000 fe68 	bl	80079cc <_Bfree>
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	703b      	strb	r3, [r7, #0]
 8006d00:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006d02:	f10a 0001 	add.w	r0, sl, #1
 8006d06:	6018      	str	r0, [r3, #0]
 8006d08:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f43f acde 	beq.w	80066cc <_dtoa_r+0x9c>
 8006d10:	601f      	str	r7, [r3, #0]
 8006d12:	e4db      	b.n	80066cc <_dtoa_r+0x9c>
 8006d14:	4627      	mov	r7, r4
 8006d16:	463b      	mov	r3, r7
 8006d18:	461f      	mov	r7, r3
 8006d1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d1e:	2a39      	cmp	r2, #57	; 0x39
 8006d20:	d107      	bne.n	8006d32 <_dtoa_r+0x702>
 8006d22:	9a03      	ldr	r2, [sp, #12]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d1f7      	bne.n	8006d18 <_dtoa_r+0x6e8>
 8006d28:	2230      	movs	r2, #48	; 0x30
 8006d2a:	9903      	ldr	r1, [sp, #12]
 8006d2c:	f108 0801 	add.w	r8, r8, #1
 8006d30:	700a      	strb	r2, [r1, #0]
 8006d32:	781a      	ldrb	r2, [r3, #0]
 8006d34:	3201      	adds	r2, #1
 8006d36:	701a      	strb	r2, [r3, #0]
 8006d38:	e79e      	b.n	8006c78 <_dtoa_r+0x648>
 8006d3a:	46d0      	mov	r8, sl
 8006d3c:	e7eb      	b.n	8006d16 <_dtoa_r+0x6e6>
 8006d3e:	2200      	movs	r2, #0
 8006d40:	4b6e      	ldr	r3, [pc, #440]	; (8006efc <_dtoa_r+0x8cc>)
 8006d42:	f7f9 fbc9 	bl	80004d8 <__aeabi_dmul>
 8006d46:	2200      	movs	r2, #0
 8006d48:	2300      	movs	r3, #0
 8006d4a:	4680      	mov	r8, r0
 8006d4c:	4689      	mov	r9, r1
 8006d4e:	f7f9 fe2b 	bl	80009a8 <__aeabi_dcmpeq>
 8006d52:	2800      	cmp	r0, #0
 8006d54:	d09b      	beq.n	8006c8e <_dtoa_r+0x65e>
 8006d56:	e7cd      	b.n	8006cf4 <_dtoa_r+0x6c4>
 8006d58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d5a:	2a00      	cmp	r2, #0
 8006d5c:	f000 80d0 	beq.w	8006f00 <_dtoa_r+0x8d0>
 8006d60:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006d62:	2a01      	cmp	r2, #1
 8006d64:	f300 80ae 	bgt.w	8006ec4 <_dtoa_r+0x894>
 8006d68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006d6a:	2a00      	cmp	r2, #0
 8006d6c:	f000 80a6 	beq.w	8006ebc <_dtoa_r+0x88c>
 8006d70:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006d74:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006d76:	9f06      	ldr	r7, [sp, #24]
 8006d78:	9a06      	ldr	r2, [sp, #24]
 8006d7a:	2101      	movs	r1, #1
 8006d7c:	441a      	add	r2, r3
 8006d7e:	9206      	str	r2, [sp, #24]
 8006d80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d82:	4628      	mov	r0, r5
 8006d84:	441a      	add	r2, r3
 8006d86:	9209      	str	r2, [sp, #36]	; 0x24
 8006d88:	f000 ff20 	bl	8007bcc <__i2b>
 8006d8c:	4606      	mov	r6, r0
 8006d8e:	2f00      	cmp	r7, #0
 8006d90:	dd0c      	ble.n	8006dac <_dtoa_r+0x77c>
 8006d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	dd09      	ble.n	8006dac <_dtoa_r+0x77c>
 8006d98:	42bb      	cmp	r3, r7
 8006d9a:	bfa8      	it	ge
 8006d9c:	463b      	movge	r3, r7
 8006d9e:	9a06      	ldr	r2, [sp, #24]
 8006da0:	1aff      	subs	r7, r7, r3
 8006da2:	1ad2      	subs	r2, r2, r3
 8006da4:	9206      	str	r2, [sp, #24]
 8006da6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	9309      	str	r3, [sp, #36]	; 0x24
 8006dac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dae:	b1f3      	cbz	r3, 8006dee <_dtoa_r+0x7be>
 8006db0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	f000 80a8 	beq.w	8006f08 <_dtoa_r+0x8d8>
 8006db8:	2c00      	cmp	r4, #0
 8006dba:	dd10      	ble.n	8006dde <_dtoa_r+0x7ae>
 8006dbc:	4631      	mov	r1, r6
 8006dbe:	4622      	mov	r2, r4
 8006dc0:	4628      	mov	r0, r5
 8006dc2:	f000 ffc1 	bl	8007d48 <__pow5mult>
 8006dc6:	465a      	mov	r2, fp
 8006dc8:	4601      	mov	r1, r0
 8006dca:	4606      	mov	r6, r0
 8006dcc:	4628      	mov	r0, r5
 8006dce:	f000 ff13 	bl	8007bf8 <__multiply>
 8006dd2:	4680      	mov	r8, r0
 8006dd4:	4659      	mov	r1, fp
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	f000 fdf8 	bl	80079cc <_Bfree>
 8006ddc:	46c3      	mov	fp, r8
 8006dde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006de0:	1b1a      	subs	r2, r3, r4
 8006de2:	d004      	beq.n	8006dee <_dtoa_r+0x7be>
 8006de4:	4659      	mov	r1, fp
 8006de6:	4628      	mov	r0, r5
 8006de8:	f000 ffae 	bl	8007d48 <__pow5mult>
 8006dec:	4683      	mov	fp, r0
 8006dee:	2101      	movs	r1, #1
 8006df0:	4628      	mov	r0, r5
 8006df2:	f000 feeb 	bl	8007bcc <__i2b>
 8006df6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006df8:	4604      	mov	r4, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	f340 8086 	ble.w	8006f0c <_dtoa_r+0x8dc>
 8006e00:	461a      	mov	r2, r3
 8006e02:	4601      	mov	r1, r0
 8006e04:	4628      	mov	r0, r5
 8006e06:	f000 ff9f 	bl	8007d48 <__pow5mult>
 8006e0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e0c:	4604      	mov	r4, r0
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	dd7f      	ble.n	8006f12 <_dtoa_r+0x8e2>
 8006e12:	f04f 0800 	mov.w	r8, #0
 8006e16:	6923      	ldr	r3, [r4, #16]
 8006e18:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006e1c:	6918      	ldr	r0, [r3, #16]
 8006e1e:	f000 fe87 	bl	8007b30 <__hi0bits>
 8006e22:	f1c0 0020 	rsb	r0, r0, #32
 8006e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e28:	4418      	add	r0, r3
 8006e2a:	f010 001f 	ands.w	r0, r0, #31
 8006e2e:	f000 8092 	beq.w	8006f56 <_dtoa_r+0x926>
 8006e32:	f1c0 0320 	rsb	r3, r0, #32
 8006e36:	2b04      	cmp	r3, #4
 8006e38:	f340 808a 	ble.w	8006f50 <_dtoa_r+0x920>
 8006e3c:	f1c0 001c 	rsb	r0, r0, #28
 8006e40:	9b06      	ldr	r3, [sp, #24]
 8006e42:	4407      	add	r7, r0
 8006e44:	4403      	add	r3, r0
 8006e46:	9306      	str	r3, [sp, #24]
 8006e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e4a:	4403      	add	r3, r0
 8006e4c:	9309      	str	r3, [sp, #36]	; 0x24
 8006e4e:	9b06      	ldr	r3, [sp, #24]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	dd05      	ble.n	8006e60 <_dtoa_r+0x830>
 8006e54:	4659      	mov	r1, fp
 8006e56:	461a      	mov	r2, r3
 8006e58:	4628      	mov	r0, r5
 8006e5a:	f000 ffcf 	bl	8007dfc <__lshift>
 8006e5e:	4683      	mov	fp, r0
 8006e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	dd05      	ble.n	8006e72 <_dtoa_r+0x842>
 8006e66:	4621      	mov	r1, r4
 8006e68:	461a      	mov	r2, r3
 8006e6a:	4628      	mov	r0, r5
 8006e6c:	f000 ffc6 	bl	8007dfc <__lshift>
 8006e70:	4604      	mov	r4, r0
 8006e72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d070      	beq.n	8006f5a <_dtoa_r+0x92a>
 8006e78:	4621      	mov	r1, r4
 8006e7a:	4658      	mov	r0, fp
 8006e7c:	f001 f82e 	bl	8007edc <__mcmp>
 8006e80:	2800      	cmp	r0, #0
 8006e82:	da6a      	bge.n	8006f5a <_dtoa_r+0x92a>
 8006e84:	2300      	movs	r3, #0
 8006e86:	4659      	mov	r1, fp
 8006e88:	220a      	movs	r2, #10
 8006e8a:	4628      	mov	r0, r5
 8006e8c:	f000 fdc0 	bl	8007a10 <__multadd>
 8006e90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e92:	4683      	mov	fp, r0
 8006e94:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f000 8194 	beq.w	80071c6 <_dtoa_r+0xb96>
 8006e9e:	4631      	mov	r1, r6
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	220a      	movs	r2, #10
 8006ea4:	4628      	mov	r0, r5
 8006ea6:	f000 fdb3 	bl	8007a10 <__multadd>
 8006eaa:	f1b9 0f00 	cmp.w	r9, #0
 8006eae:	4606      	mov	r6, r0
 8006eb0:	f300 8093 	bgt.w	8006fda <_dtoa_r+0x9aa>
 8006eb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	dc57      	bgt.n	8006f6a <_dtoa_r+0x93a>
 8006eba:	e08e      	b.n	8006fda <_dtoa_r+0x9aa>
 8006ebc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006ebe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006ec2:	e757      	b.n	8006d74 <_dtoa_r+0x744>
 8006ec4:	9b08      	ldr	r3, [sp, #32]
 8006ec6:	1e5c      	subs	r4, r3, #1
 8006ec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eca:	42a3      	cmp	r3, r4
 8006ecc:	bfb7      	itett	lt
 8006ece:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006ed0:	1b1c      	subge	r4, r3, r4
 8006ed2:	1ae2      	sublt	r2, r4, r3
 8006ed4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006ed6:	bfbe      	ittt	lt
 8006ed8:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006eda:	189b      	addlt	r3, r3, r2
 8006edc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006ede:	9b08      	ldr	r3, [sp, #32]
 8006ee0:	bfb8      	it	lt
 8006ee2:	2400      	movlt	r4, #0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	bfbb      	ittet	lt
 8006ee8:	9b06      	ldrlt	r3, [sp, #24]
 8006eea:	9a08      	ldrlt	r2, [sp, #32]
 8006eec:	9f06      	ldrge	r7, [sp, #24]
 8006eee:	1a9f      	sublt	r7, r3, r2
 8006ef0:	bfac      	ite	ge
 8006ef2:	9b08      	ldrge	r3, [sp, #32]
 8006ef4:	2300      	movlt	r3, #0
 8006ef6:	e73f      	b.n	8006d78 <_dtoa_r+0x748>
 8006ef8:	3fe00000 	.word	0x3fe00000
 8006efc:	40240000 	.word	0x40240000
 8006f00:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006f02:	9f06      	ldr	r7, [sp, #24]
 8006f04:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006f06:	e742      	b.n	8006d8e <_dtoa_r+0x75e>
 8006f08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f0a:	e76b      	b.n	8006de4 <_dtoa_r+0x7b4>
 8006f0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	dc19      	bgt.n	8006f46 <_dtoa_r+0x916>
 8006f12:	9b04      	ldr	r3, [sp, #16]
 8006f14:	b9bb      	cbnz	r3, 8006f46 <_dtoa_r+0x916>
 8006f16:	9b05      	ldr	r3, [sp, #20]
 8006f18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f1c:	b99b      	cbnz	r3, 8006f46 <_dtoa_r+0x916>
 8006f1e:	9b05      	ldr	r3, [sp, #20]
 8006f20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f24:	0d1b      	lsrs	r3, r3, #20
 8006f26:	051b      	lsls	r3, r3, #20
 8006f28:	b183      	cbz	r3, 8006f4c <_dtoa_r+0x91c>
 8006f2a:	f04f 0801 	mov.w	r8, #1
 8006f2e:	9b06      	ldr	r3, [sp, #24]
 8006f30:	3301      	adds	r3, #1
 8006f32:	9306      	str	r3, [sp, #24]
 8006f34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f36:	3301      	adds	r3, #1
 8006f38:	9309      	str	r3, [sp, #36]	; 0x24
 8006f3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f47f af6a 	bne.w	8006e16 <_dtoa_r+0x7e6>
 8006f42:	2001      	movs	r0, #1
 8006f44:	e76f      	b.n	8006e26 <_dtoa_r+0x7f6>
 8006f46:	f04f 0800 	mov.w	r8, #0
 8006f4a:	e7f6      	b.n	8006f3a <_dtoa_r+0x90a>
 8006f4c:	4698      	mov	r8, r3
 8006f4e:	e7f4      	b.n	8006f3a <_dtoa_r+0x90a>
 8006f50:	f43f af7d 	beq.w	8006e4e <_dtoa_r+0x81e>
 8006f54:	4618      	mov	r0, r3
 8006f56:	301c      	adds	r0, #28
 8006f58:	e772      	b.n	8006e40 <_dtoa_r+0x810>
 8006f5a:	9b08      	ldr	r3, [sp, #32]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	dc36      	bgt.n	8006fce <_dtoa_r+0x99e>
 8006f60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	dd33      	ble.n	8006fce <_dtoa_r+0x99e>
 8006f66:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f6a:	f1b9 0f00 	cmp.w	r9, #0
 8006f6e:	d10d      	bne.n	8006f8c <_dtoa_r+0x95c>
 8006f70:	4621      	mov	r1, r4
 8006f72:	464b      	mov	r3, r9
 8006f74:	2205      	movs	r2, #5
 8006f76:	4628      	mov	r0, r5
 8006f78:	f000 fd4a 	bl	8007a10 <__multadd>
 8006f7c:	4601      	mov	r1, r0
 8006f7e:	4604      	mov	r4, r0
 8006f80:	4658      	mov	r0, fp
 8006f82:	f000 ffab 	bl	8007edc <__mcmp>
 8006f86:	2800      	cmp	r0, #0
 8006f88:	f73f adb8 	bgt.w	8006afc <_dtoa_r+0x4cc>
 8006f8c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006f8e:	9f03      	ldr	r7, [sp, #12]
 8006f90:	ea6f 0a03 	mvn.w	sl, r3
 8006f94:	f04f 0800 	mov.w	r8, #0
 8006f98:	4621      	mov	r1, r4
 8006f9a:	4628      	mov	r0, r5
 8006f9c:	f000 fd16 	bl	80079cc <_Bfree>
 8006fa0:	2e00      	cmp	r6, #0
 8006fa2:	f43f aea7 	beq.w	8006cf4 <_dtoa_r+0x6c4>
 8006fa6:	f1b8 0f00 	cmp.w	r8, #0
 8006faa:	d005      	beq.n	8006fb8 <_dtoa_r+0x988>
 8006fac:	45b0      	cmp	r8, r6
 8006fae:	d003      	beq.n	8006fb8 <_dtoa_r+0x988>
 8006fb0:	4641      	mov	r1, r8
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	f000 fd0a 	bl	80079cc <_Bfree>
 8006fb8:	4631      	mov	r1, r6
 8006fba:	4628      	mov	r0, r5
 8006fbc:	f000 fd06 	bl	80079cc <_Bfree>
 8006fc0:	e698      	b.n	8006cf4 <_dtoa_r+0x6c4>
 8006fc2:	2400      	movs	r4, #0
 8006fc4:	4626      	mov	r6, r4
 8006fc6:	e7e1      	b.n	8006f8c <_dtoa_r+0x95c>
 8006fc8:	46c2      	mov	sl, r8
 8006fca:	4626      	mov	r6, r4
 8006fcc:	e596      	b.n	8006afc <_dtoa_r+0x4cc>
 8006fce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fd0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f000 80fd 	beq.w	80071d4 <_dtoa_r+0xba4>
 8006fda:	2f00      	cmp	r7, #0
 8006fdc:	dd05      	ble.n	8006fea <_dtoa_r+0x9ba>
 8006fde:	4631      	mov	r1, r6
 8006fe0:	463a      	mov	r2, r7
 8006fe2:	4628      	mov	r0, r5
 8006fe4:	f000 ff0a 	bl	8007dfc <__lshift>
 8006fe8:	4606      	mov	r6, r0
 8006fea:	f1b8 0f00 	cmp.w	r8, #0
 8006fee:	d05c      	beq.n	80070aa <_dtoa_r+0xa7a>
 8006ff0:	4628      	mov	r0, r5
 8006ff2:	6871      	ldr	r1, [r6, #4]
 8006ff4:	f000 fcaa 	bl	800794c <_Balloc>
 8006ff8:	4607      	mov	r7, r0
 8006ffa:	b928      	cbnz	r0, 8007008 <_dtoa_r+0x9d8>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007002:	4b7f      	ldr	r3, [pc, #508]	; (8007200 <_dtoa_r+0xbd0>)
 8007004:	f7ff bb28 	b.w	8006658 <_dtoa_r+0x28>
 8007008:	6932      	ldr	r2, [r6, #16]
 800700a:	f106 010c 	add.w	r1, r6, #12
 800700e:	3202      	adds	r2, #2
 8007010:	0092      	lsls	r2, r2, #2
 8007012:	300c      	adds	r0, #12
 8007014:	f000 fc8c 	bl	8007930 <memcpy>
 8007018:	2201      	movs	r2, #1
 800701a:	4639      	mov	r1, r7
 800701c:	4628      	mov	r0, r5
 800701e:	f000 feed 	bl	8007dfc <__lshift>
 8007022:	46b0      	mov	r8, r6
 8007024:	4606      	mov	r6, r0
 8007026:	9b03      	ldr	r3, [sp, #12]
 8007028:	3301      	adds	r3, #1
 800702a:	9308      	str	r3, [sp, #32]
 800702c:	9b03      	ldr	r3, [sp, #12]
 800702e:	444b      	add	r3, r9
 8007030:	930a      	str	r3, [sp, #40]	; 0x28
 8007032:	9b04      	ldr	r3, [sp, #16]
 8007034:	f003 0301 	and.w	r3, r3, #1
 8007038:	9309      	str	r3, [sp, #36]	; 0x24
 800703a:	9b08      	ldr	r3, [sp, #32]
 800703c:	4621      	mov	r1, r4
 800703e:	3b01      	subs	r3, #1
 8007040:	4658      	mov	r0, fp
 8007042:	9304      	str	r3, [sp, #16]
 8007044:	f7ff fa68 	bl	8006518 <quorem>
 8007048:	4603      	mov	r3, r0
 800704a:	4641      	mov	r1, r8
 800704c:	3330      	adds	r3, #48	; 0x30
 800704e:	9006      	str	r0, [sp, #24]
 8007050:	4658      	mov	r0, fp
 8007052:	930b      	str	r3, [sp, #44]	; 0x2c
 8007054:	f000 ff42 	bl	8007edc <__mcmp>
 8007058:	4632      	mov	r2, r6
 800705a:	4681      	mov	r9, r0
 800705c:	4621      	mov	r1, r4
 800705e:	4628      	mov	r0, r5
 8007060:	f000 ff58 	bl	8007f14 <__mdiff>
 8007064:	68c2      	ldr	r2, [r0, #12]
 8007066:	4607      	mov	r7, r0
 8007068:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800706a:	bb02      	cbnz	r2, 80070ae <_dtoa_r+0xa7e>
 800706c:	4601      	mov	r1, r0
 800706e:	4658      	mov	r0, fp
 8007070:	f000 ff34 	bl	8007edc <__mcmp>
 8007074:	4602      	mov	r2, r0
 8007076:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007078:	4639      	mov	r1, r7
 800707a:	4628      	mov	r0, r5
 800707c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007080:	f000 fca4 	bl	80079cc <_Bfree>
 8007084:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007086:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007088:	9f08      	ldr	r7, [sp, #32]
 800708a:	ea43 0102 	orr.w	r1, r3, r2
 800708e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007090:	430b      	orrs	r3, r1
 8007092:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007094:	d10d      	bne.n	80070b2 <_dtoa_r+0xa82>
 8007096:	2b39      	cmp	r3, #57	; 0x39
 8007098:	d029      	beq.n	80070ee <_dtoa_r+0xabe>
 800709a:	f1b9 0f00 	cmp.w	r9, #0
 800709e:	dd01      	ble.n	80070a4 <_dtoa_r+0xa74>
 80070a0:	9b06      	ldr	r3, [sp, #24]
 80070a2:	3331      	adds	r3, #49	; 0x31
 80070a4:	9a04      	ldr	r2, [sp, #16]
 80070a6:	7013      	strb	r3, [r2, #0]
 80070a8:	e776      	b.n	8006f98 <_dtoa_r+0x968>
 80070aa:	4630      	mov	r0, r6
 80070ac:	e7b9      	b.n	8007022 <_dtoa_r+0x9f2>
 80070ae:	2201      	movs	r2, #1
 80070b0:	e7e2      	b.n	8007078 <_dtoa_r+0xa48>
 80070b2:	f1b9 0f00 	cmp.w	r9, #0
 80070b6:	db06      	blt.n	80070c6 <_dtoa_r+0xa96>
 80070b8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80070ba:	ea41 0909 	orr.w	r9, r1, r9
 80070be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070c0:	ea59 0101 	orrs.w	r1, r9, r1
 80070c4:	d120      	bne.n	8007108 <_dtoa_r+0xad8>
 80070c6:	2a00      	cmp	r2, #0
 80070c8:	ddec      	ble.n	80070a4 <_dtoa_r+0xa74>
 80070ca:	4659      	mov	r1, fp
 80070cc:	2201      	movs	r2, #1
 80070ce:	4628      	mov	r0, r5
 80070d0:	9308      	str	r3, [sp, #32]
 80070d2:	f000 fe93 	bl	8007dfc <__lshift>
 80070d6:	4621      	mov	r1, r4
 80070d8:	4683      	mov	fp, r0
 80070da:	f000 feff 	bl	8007edc <__mcmp>
 80070de:	2800      	cmp	r0, #0
 80070e0:	9b08      	ldr	r3, [sp, #32]
 80070e2:	dc02      	bgt.n	80070ea <_dtoa_r+0xaba>
 80070e4:	d1de      	bne.n	80070a4 <_dtoa_r+0xa74>
 80070e6:	07da      	lsls	r2, r3, #31
 80070e8:	d5dc      	bpl.n	80070a4 <_dtoa_r+0xa74>
 80070ea:	2b39      	cmp	r3, #57	; 0x39
 80070ec:	d1d8      	bne.n	80070a0 <_dtoa_r+0xa70>
 80070ee:	2339      	movs	r3, #57	; 0x39
 80070f0:	9a04      	ldr	r2, [sp, #16]
 80070f2:	7013      	strb	r3, [r2, #0]
 80070f4:	463b      	mov	r3, r7
 80070f6:	461f      	mov	r7, r3
 80070f8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80070fc:	3b01      	subs	r3, #1
 80070fe:	2a39      	cmp	r2, #57	; 0x39
 8007100:	d050      	beq.n	80071a4 <_dtoa_r+0xb74>
 8007102:	3201      	adds	r2, #1
 8007104:	701a      	strb	r2, [r3, #0]
 8007106:	e747      	b.n	8006f98 <_dtoa_r+0x968>
 8007108:	2a00      	cmp	r2, #0
 800710a:	dd03      	ble.n	8007114 <_dtoa_r+0xae4>
 800710c:	2b39      	cmp	r3, #57	; 0x39
 800710e:	d0ee      	beq.n	80070ee <_dtoa_r+0xabe>
 8007110:	3301      	adds	r3, #1
 8007112:	e7c7      	b.n	80070a4 <_dtoa_r+0xa74>
 8007114:	9a08      	ldr	r2, [sp, #32]
 8007116:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007118:	f802 3c01 	strb.w	r3, [r2, #-1]
 800711c:	428a      	cmp	r2, r1
 800711e:	d02a      	beq.n	8007176 <_dtoa_r+0xb46>
 8007120:	4659      	mov	r1, fp
 8007122:	2300      	movs	r3, #0
 8007124:	220a      	movs	r2, #10
 8007126:	4628      	mov	r0, r5
 8007128:	f000 fc72 	bl	8007a10 <__multadd>
 800712c:	45b0      	cmp	r8, r6
 800712e:	4683      	mov	fp, r0
 8007130:	f04f 0300 	mov.w	r3, #0
 8007134:	f04f 020a 	mov.w	r2, #10
 8007138:	4641      	mov	r1, r8
 800713a:	4628      	mov	r0, r5
 800713c:	d107      	bne.n	800714e <_dtoa_r+0xb1e>
 800713e:	f000 fc67 	bl	8007a10 <__multadd>
 8007142:	4680      	mov	r8, r0
 8007144:	4606      	mov	r6, r0
 8007146:	9b08      	ldr	r3, [sp, #32]
 8007148:	3301      	adds	r3, #1
 800714a:	9308      	str	r3, [sp, #32]
 800714c:	e775      	b.n	800703a <_dtoa_r+0xa0a>
 800714e:	f000 fc5f 	bl	8007a10 <__multadd>
 8007152:	4631      	mov	r1, r6
 8007154:	4680      	mov	r8, r0
 8007156:	2300      	movs	r3, #0
 8007158:	220a      	movs	r2, #10
 800715a:	4628      	mov	r0, r5
 800715c:	f000 fc58 	bl	8007a10 <__multadd>
 8007160:	4606      	mov	r6, r0
 8007162:	e7f0      	b.n	8007146 <_dtoa_r+0xb16>
 8007164:	f1b9 0f00 	cmp.w	r9, #0
 8007168:	bfcc      	ite	gt
 800716a:	464f      	movgt	r7, r9
 800716c:	2701      	movle	r7, #1
 800716e:	f04f 0800 	mov.w	r8, #0
 8007172:	9a03      	ldr	r2, [sp, #12]
 8007174:	4417      	add	r7, r2
 8007176:	4659      	mov	r1, fp
 8007178:	2201      	movs	r2, #1
 800717a:	4628      	mov	r0, r5
 800717c:	9308      	str	r3, [sp, #32]
 800717e:	f000 fe3d 	bl	8007dfc <__lshift>
 8007182:	4621      	mov	r1, r4
 8007184:	4683      	mov	fp, r0
 8007186:	f000 fea9 	bl	8007edc <__mcmp>
 800718a:	2800      	cmp	r0, #0
 800718c:	dcb2      	bgt.n	80070f4 <_dtoa_r+0xac4>
 800718e:	d102      	bne.n	8007196 <_dtoa_r+0xb66>
 8007190:	9b08      	ldr	r3, [sp, #32]
 8007192:	07db      	lsls	r3, r3, #31
 8007194:	d4ae      	bmi.n	80070f4 <_dtoa_r+0xac4>
 8007196:	463b      	mov	r3, r7
 8007198:	461f      	mov	r7, r3
 800719a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800719e:	2a30      	cmp	r2, #48	; 0x30
 80071a0:	d0fa      	beq.n	8007198 <_dtoa_r+0xb68>
 80071a2:	e6f9      	b.n	8006f98 <_dtoa_r+0x968>
 80071a4:	9a03      	ldr	r2, [sp, #12]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d1a5      	bne.n	80070f6 <_dtoa_r+0xac6>
 80071aa:	2331      	movs	r3, #49	; 0x31
 80071ac:	f10a 0a01 	add.w	sl, sl, #1
 80071b0:	e779      	b.n	80070a6 <_dtoa_r+0xa76>
 80071b2:	4b14      	ldr	r3, [pc, #80]	; (8007204 <_dtoa_r+0xbd4>)
 80071b4:	f7ff baa8 	b.w	8006708 <_dtoa_r+0xd8>
 80071b8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	f47f aa81 	bne.w	80066c2 <_dtoa_r+0x92>
 80071c0:	4b11      	ldr	r3, [pc, #68]	; (8007208 <_dtoa_r+0xbd8>)
 80071c2:	f7ff baa1 	b.w	8006708 <_dtoa_r+0xd8>
 80071c6:	f1b9 0f00 	cmp.w	r9, #0
 80071ca:	dc03      	bgt.n	80071d4 <_dtoa_r+0xba4>
 80071cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80071ce:	2b02      	cmp	r3, #2
 80071d0:	f73f aecb 	bgt.w	8006f6a <_dtoa_r+0x93a>
 80071d4:	9f03      	ldr	r7, [sp, #12]
 80071d6:	4621      	mov	r1, r4
 80071d8:	4658      	mov	r0, fp
 80071da:	f7ff f99d 	bl	8006518 <quorem>
 80071de:	9a03      	ldr	r2, [sp, #12]
 80071e0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80071e4:	f807 3b01 	strb.w	r3, [r7], #1
 80071e8:	1aba      	subs	r2, r7, r2
 80071ea:	4591      	cmp	r9, r2
 80071ec:	ddba      	ble.n	8007164 <_dtoa_r+0xb34>
 80071ee:	4659      	mov	r1, fp
 80071f0:	2300      	movs	r3, #0
 80071f2:	220a      	movs	r2, #10
 80071f4:	4628      	mov	r0, r5
 80071f6:	f000 fc0b 	bl	8007a10 <__multadd>
 80071fa:	4683      	mov	fp, r0
 80071fc:	e7eb      	b.n	80071d6 <_dtoa_r+0xba6>
 80071fe:	bf00      	nop
 8007200:	08009d20 	.word	0x08009d20
 8007204:	08009b24 	.word	0x08009b24
 8007208:	08009ca1 	.word	0x08009ca1

0800720c <rshift>:
 800720c:	6903      	ldr	r3, [r0, #16]
 800720e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007212:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007216:	f100 0414 	add.w	r4, r0, #20
 800721a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800721e:	dd46      	ble.n	80072ae <rshift+0xa2>
 8007220:	f011 011f 	ands.w	r1, r1, #31
 8007224:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007228:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800722c:	d10c      	bne.n	8007248 <rshift+0x3c>
 800722e:	4629      	mov	r1, r5
 8007230:	f100 0710 	add.w	r7, r0, #16
 8007234:	42b1      	cmp	r1, r6
 8007236:	d335      	bcc.n	80072a4 <rshift+0x98>
 8007238:	1a9b      	subs	r3, r3, r2
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	1eea      	subs	r2, r5, #3
 800723e:	4296      	cmp	r6, r2
 8007240:	bf38      	it	cc
 8007242:	2300      	movcc	r3, #0
 8007244:	4423      	add	r3, r4
 8007246:	e015      	b.n	8007274 <rshift+0x68>
 8007248:	46a1      	mov	r9, r4
 800724a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800724e:	f1c1 0820 	rsb	r8, r1, #32
 8007252:	40cf      	lsrs	r7, r1
 8007254:	f105 0e04 	add.w	lr, r5, #4
 8007258:	4576      	cmp	r6, lr
 800725a:	46f4      	mov	ip, lr
 800725c:	d816      	bhi.n	800728c <rshift+0x80>
 800725e:	1a9a      	subs	r2, r3, r2
 8007260:	0092      	lsls	r2, r2, #2
 8007262:	3a04      	subs	r2, #4
 8007264:	3501      	adds	r5, #1
 8007266:	42ae      	cmp	r6, r5
 8007268:	bf38      	it	cc
 800726a:	2200      	movcc	r2, #0
 800726c:	18a3      	adds	r3, r4, r2
 800726e:	50a7      	str	r7, [r4, r2]
 8007270:	b107      	cbz	r7, 8007274 <rshift+0x68>
 8007272:	3304      	adds	r3, #4
 8007274:	42a3      	cmp	r3, r4
 8007276:	eba3 0204 	sub.w	r2, r3, r4
 800727a:	bf08      	it	eq
 800727c:	2300      	moveq	r3, #0
 800727e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007282:	6102      	str	r2, [r0, #16]
 8007284:	bf08      	it	eq
 8007286:	6143      	streq	r3, [r0, #20]
 8007288:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800728c:	f8dc c000 	ldr.w	ip, [ip]
 8007290:	fa0c fc08 	lsl.w	ip, ip, r8
 8007294:	ea4c 0707 	orr.w	r7, ip, r7
 8007298:	f849 7b04 	str.w	r7, [r9], #4
 800729c:	f85e 7b04 	ldr.w	r7, [lr], #4
 80072a0:	40cf      	lsrs	r7, r1
 80072a2:	e7d9      	b.n	8007258 <rshift+0x4c>
 80072a4:	f851 cb04 	ldr.w	ip, [r1], #4
 80072a8:	f847 cf04 	str.w	ip, [r7, #4]!
 80072ac:	e7c2      	b.n	8007234 <rshift+0x28>
 80072ae:	4623      	mov	r3, r4
 80072b0:	e7e0      	b.n	8007274 <rshift+0x68>

080072b2 <__hexdig_fun>:
 80072b2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80072b6:	2b09      	cmp	r3, #9
 80072b8:	d802      	bhi.n	80072c0 <__hexdig_fun+0xe>
 80072ba:	3820      	subs	r0, #32
 80072bc:	b2c0      	uxtb	r0, r0
 80072be:	4770      	bx	lr
 80072c0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80072c4:	2b05      	cmp	r3, #5
 80072c6:	d801      	bhi.n	80072cc <__hexdig_fun+0x1a>
 80072c8:	3847      	subs	r0, #71	; 0x47
 80072ca:	e7f7      	b.n	80072bc <__hexdig_fun+0xa>
 80072cc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80072d0:	2b05      	cmp	r3, #5
 80072d2:	d801      	bhi.n	80072d8 <__hexdig_fun+0x26>
 80072d4:	3827      	subs	r0, #39	; 0x27
 80072d6:	e7f1      	b.n	80072bc <__hexdig_fun+0xa>
 80072d8:	2000      	movs	r0, #0
 80072da:	4770      	bx	lr

080072dc <__gethex>:
 80072dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e0:	b08b      	sub	sp, #44	; 0x2c
 80072e2:	9305      	str	r3, [sp, #20]
 80072e4:	4bb2      	ldr	r3, [pc, #712]	; (80075b0 <__gethex+0x2d4>)
 80072e6:	9002      	str	r0, [sp, #8]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	468b      	mov	fp, r1
 80072ec:	4618      	mov	r0, r3
 80072ee:	4690      	mov	r8, r2
 80072f0:	9303      	str	r3, [sp, #12]
 80072f2:	f7f8 ff2d 	bl	8000150 <strlen>
 80072f6:	4682      	mov	sl, r0
 80072f8:	9b03      	ldr	r3, [sp, #12]
 80072fa:	f8db 2000 	ldr.w	r2, [fp]
 80072fe:	4403      	add	r3, r0
 8007300:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007304:	9306      	str	r3, [sp, #24]
 8007306:	1c93      	adds	r3, r2, #2
 8007308:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800730c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007310:	32fe      	adds	r2, #254	; 0xfe
 8007312:	18d1      	adds	r1, r2, r3
 8007314:	461f      	mov	r7, r3
 8007316:	f813 0b01 	ldrb.w	r0, [r3], #1
 800731a:	9101      	str	r1, [sp, #4]
 800731c:	2830      	cmp	r0, #48	; 0x30
 800731e:	d0f8      	beq.n	8007312 <__gethex+0x36>
 8007320:	f7ff ffc7 	bl	80072b2 <__hexdig_fun>
 8007324:	4604      	mov	r4, r0
 8007326:	2800      	cmp	r0, #0
 8007328:	d13a      	bne.n	80073a0 <__gethex+0xc4>
 800732a:	4652      	mov	r2, sl
 800732c:	4638      	mov	r0, r7
 800732e:	9903      	ldr	r1, [sp, #12]
 8007330:	f001 fa26 	bl	8008780 <strncmp>
 8007334:	4605      	mov	r5, r0
 8007336:	2800      	cmp	r0, #0
 8007338:	d166      	bne.n	8007408 <__gethex+0x12c>
 800733a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800733e:	eb07 060a 	add.w	r6, r7, sl
 8007342:	f7ff ffb6 	bl	80072b2 <__hexdig_fun>
 8007346:	2800      	cmp	r0, #0
 8007348:	d060      	beq.n	800740c <__gethex+0x130>
 800734a:	4633      	mov	r3, r6
 800734c:	7818      	ldrb	r0, [r3, #0]
 800734e:	461f      	mov	r7, r3
 8007350:	2830      	cmp	r0, #48	; 0x30
 8007352:	f103 0301 	add.w	r3, r3, #1
 8007356:	d0f9      	beq.n	800734c <__gethex+0x70>
 8007358:	f7ff ffab 	bl	80072b2 <__hexdig_fun>
 800735c:	2301      	movs	r3, #1
 800735e:	fab0 f480 	clz	r4, r0
 8007362:	4635      	mov	r5, r6
 8007364:	0964      	lsrs	r4, r4, #5
 8007366:	9301      	str	r3, [sp, #4]
 8007368:	463a      	mov	r2, r7
 800736a:	4616      	mov	r6, r2
 800736c:	7830      	ldrb	r0, [r6, #0]
 800736e:	3201      	adds	r2, #1
 8007370:	f7ff ff9f 	bl	80072b2 <__hexdig_fun>
 8007374:	2800      	cmp	r0, #0
 8007376:	d1f8      	bne.n	800736a <__gethex+0x8e>
 8007378:	4652      	mov	r2, sl
 800737a:	4630      	mov	r0, r6
 800737c:	9903      	ldr	r1, [sp, #12]
 800737e:	f001 f9ff 	bl	8008780 <strncmp>
 8007382:	b980      	cbnz	r0, 80073a6 <__gethex+0xca>
 8007384:	b94d      	cbnz	r5, 800739a <__gethex+0xbe>
 8007386:	eb06 050a 	add.w	r5, r6, sl
 800738a:	462a      	mov	r2, r5
 800738c:	4616      	mov	r6, r2
 800738e:	7830      	ldrb	r0, [r6, #0]
 8007390:	3201      	adds	r2, #1
 8007392:	f7ff ff8e 	bl	80072b2 <__hexdig_fun>
 8007396:	2800      	cmp	r0, #0
 8007398:	d1f8      	bne.n	800738c <__gethex+0xb0>
 800739a:	1bad      	subs	r5, r5, r6
 800739c:	00ad      	lsls	r5, r5, #2
 800739e:	e004      	b.n	80073aa <__gethex+0xce>
 80073a0:	2400      	movs	r4, #0
 80073a2:	4625      	mov	r5, r4
 80073a4:	e7e0      	b.n	8007368 <__gethex+0x8c>
 80073a6:	2d00      	cmp	r5, #0
 80073a8:	d1f7      	bne.n	800739a <__gethex+0xbe>
 80073aa:	7833      	ldrb	r3, [r6, #0]
 80073ac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80073b0:	2b50      	cmp	r3, #80	; 0x50
 80073b2:	d139      	bne.n	8007428 <__gethex+0x14c>
 80073b4:	7873      	ldrb	r3, [r6, #1]
 80073b6:	2b2b      	cmp	r3, #43	; 0x2b
 80073b8:	d02a      	beq.n	8007410 <__gethex+0x134>
 80073ba:	2b2d      	cmp	r3, #45	; 0x2d
 80073bc:	d02c      	beq.n	8007418 <__gethex+0x13c>
 80073be:	f04f 0900 	mov.w	r9, #0
 80073c2:	1c71      	adds	r1, r6, #1
 80073c4:	7808      	ldrb	r0, [r1, #0]
 80073c6:	f7ff ff74 	bl	80072b2 <__hexdig_fun>
 80073ca:	1e43      	subs	r3, r0, #1
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	2b18      	cmp	r3, #24
 80073d0:	d82a      	bhi.n	8007428 <__gethex+0x14c>
 80073d2:	f1a0 0210 	sub.w	r2, r0, #16
 80073d6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80073da:	f7ff ff6a 	bl	80072b2 <__hexdig_fun>
 80073de:	1e43      	subs	r3, r0, #1
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	2b18      	cmp	r3, #24
 80073e4:	d91b      	bls.n	800741e <__gethex+0x142>
 80073e6:	f1b9 0f00 	cmp.w	r9, #0
 80073ea:	d000      	beq.n	80073ee <__gethex+0x112>
 80073ec:	4252      	negs	r2, r2
 80073ee:	4415      	add	r5, r2
 80073f0:	f8cb 1000 	str.w	r1, [fp]
 80073f4:	b1d4      	cbz	r4, 800742c <__gethex+0x150>
 80073f6:	9b01      	ldr	r3, [sp, #4]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	bf14      	ite	ne
 80073fc:	2700      	movne	r7, #0
 80073fe:	2706      	moveq	r7, #6
 8007400:	4638      	mov	r0, r7
 8007402:	b00b      	add	sp, #44	; 0x2c
 8007404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007408:	463e      	mov	r6, r7
 800740a:	4625      	mov	r5, r4
 800740c:	2401      	movs	r4, #1
 800740e:	e7cc      	b.n	80073aa <__gethex+0xce>
 8007410:	f04f 0900 	mov.w	r9, #0
 8007414:	1cb1      	adds	r1, r6, #2
 8007416:	e7d5      	b.n	80073c4 <__gethex+0xe8>
 8007418:	f04f 0901 	mov.w	r9, #1
 800741c:	e7fa      	b.n	8007414 <__gethex+0x138>
 800741e:	230a      	movs	r3, #10
 8007420:	fb03 0202 	mla	r2, r3, r2, r0
 8007424:	3a10      	subs	r2, #16
 8007426:	e7d6      	b.n	80073d6 <__gethex+0xfa>
 8007428:	4631      	mov	r1, r6
 800742a:	e7e1      	b.n	80073f0 <__gethex+0x114>
 800742c:	4621      	mov	r1, r4
 800742e:	1bf3      	subs	r3, r6, r7
 8007430:	3b01      	subs	r3, #1
 8007432:	2b07      	cmp	r3, #7
 8007434:	dc0a      	bgt.n	800744c <__gethex+0x170>
 8007436:	9802      	ldr	r0, [sp, #8]
 8007438:	f000 fa88 	bl	800794c <_Balloc>
 800743c:	4604      	mov	r4, r0
 800743e:	b940      	cbnz	r0, 8007452 <__gethex+0x176>
 8007440:	4602      	mov	r2, r0
 8007442:	21de      	movs	r1, #222	; 0xde
 8007444:	4b5b      	ldr	r3, [pc, #364]	; (80075b4 <__gethex+0x2d8>)
 8007446:	485c      	ldr	r0, [pc, #368]	; (80075b8 <__gethex+0x2dc>)
 8007448:	f001 f9bc 	bl	80087c4 <__assert_func>
 800744c:	3101      	adds	r1, #1
 800744e:	105b      	asrs	r3, r3, #1
 8007450:	e7ef      	b.n	8007432 <__gethex+0x156>
 8007452:	f04f 0b00 	mov.w	fp, #0
 8007456:	f100 0914 	add.w	r9, r0, #20
 800745a:	f1ca 0301 	rsb	r3, sl, #1
 800745e:	f8cd 9010 	str.w	r9, [sp, #16]
 8007462:	f8cd b004 	str.w	fp, [sp, #4]
 8007466:	9308      	str	r3, [sp, #32]
 8007468:	42b7      	cmp	r7, r6
 800746a:	d33f      	bcc.n	80074ec <__gethex+0x210>
 800746c:	9f04      	ldr	r7, [sp, #16]
 800746e:	9b01      	ldr	r3, [sp, #4]
 8007470:	f847 3b04 	str.w	r3, [r7], #4
 8007474:	eba7 0709 	sub.w	r7, r7, r9
 8007478:	10bf      	asrs	r7, r7, #2
 800747a:	6127      	str	r7, [r4, #16]
 800747c:	4618      	mov	r0, r3
 800747e:	f000 fb57 	bl	8007b30 <__hi0bits>
 8007482:	017f      	lsls	r7, r7, #5
 8007484:	f8d8 6000 	ldr.w	r6, [r8]
 8007488:	1a3f      	subs	r7, r7, r0
 800748a:	42b7      	cmp	r7, r6
 800748c:	dd62      	ble.n	8007554 <__gethex+0x278>
 800748e:	1bbf      	subs	r7, r7, r6
 8007490:	4639      	mov	r1, r7
 8007492:	4620      	mov	r0, r4
 8007494:	f000 fef1 	bl	800827a <__any_on>
 8007498:	4682      	mov	sl, r0
 800749a:	b1a8      	cbz	r0, 80074c8 <__gethex+0x1ec>
 800749c:	f04f 0a01 	mov.w	sl, #1
 80074a0:	1e7b      	subs	r3, r7, #1
 80074a2:	1159      	asrs	r1, r3, #5
 80074a4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80074a8:	f003 021f 	and.w	r2, r3, #31
 80074ac:	fa0a f202 	lsl.w	r2, sl, r2
 80074b0:	420a      	tst	r2, r1
 80074b2:	d009      	beq.n	80074c8 <__gethex+0x1ec>
 80074b4:	4553      	cmp	r3, sl
 80074b6:	dd05      	ble.n	80074c4 <__gethex+0x1e8>
 80074b8:	4620      	mov	r0, r4
 80074ba:	1eb9      	subs	r1, r7, #2
 80074bc:	f000 fedd 	bl	800827a <__any_on>
 80074c0:	2800      	cmp	r0, #0
 80074c2:	d144      	bne.n	800754e <__gethex+0x272>
 80074c4:	f04f 0a02 	mov.w	sl, #2
 80074c8:	4639      	mov	r1, r7
 80074ca:	4620      	mov	r0, r4
 80074cc:	f7ff fe9e 	bl	800720c <rshift>
 80074d0:	443d      	add	r5, r7
 80074d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80074d6:	42ab      	cmp	r3, r5
 80074d8:	da4a      	bge.n	8007570 <__gethex+0x294>
 80074da:	4621      	mov	r1, r4
 80074dc:	9802      	ldr	r0, [sp, #8]
 80074de:	f000 fa75 	bl	80079cc <_Bfree>
 80074e2:	2300      	movs	r3, #0
 80074e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80074e6:	27a3      	movs	r7, #163	; 0xa3
 80074e8:	6013      	str	r3, [r2, #0]
 80074ea:	e789      	b.n	8007400 <__gethex+0x124>
 80074ec:	1e73      	subs	r3, r6, #1
 80074ee:	9a06      	ldr	r2, [sp, #24]
 80074f0:	9307      	str	r3, [sp, #28]
 80074f2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d019      	beq.n	800752e <__gethex+0x252>
 80074fa:	f1bb 0f20 	cmp.w	fp, #32
 80074fe:	d107      	bne.n	8007510 <__gethex+0x234>
 8007500:	9b04      	ldr	r3, [sp, #16]
 8007502:	9a01      	ldr	r2, [sp, #4]
 8007504:	f843 2b04 	str.w	r2, [r3], #4
 8007508:	9304      	str	r3, [sp, #16]
 800750a:	2300      	movs	r3, #0
 800750c:	469b      	mov	fp, r3
 800750e:	9301      	str	r3, [sp, #4]
 8007510:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007514:	f7ff fecd 	bl	80072b2 <__hexdig_fun>
 8007518:	9b01      	ldr	r3, [sp, #4]
 800751a:	f000 000f 	and.w	r0, r0, #15
 800751e:	fa00 f00b 	lsl.w	r0, r0, fp
 8007522:	4303      	orrs	r3, r0
 8007524:	9301      	str	r3, [sp, #4]
 8007526:	f10b 0b04 	add.w	fp, fp, #4
 800752a:	9b07      	ldr	r3, [sp, #28]
 800752c:	e00d      	b.n	800754a <__gethex+0x26e>
 800752e:	9a08      	ldr	r2, [sp, #32]
 8007530:	1e73      	subs	r3, r6, #1
 8007532:	4413      	add	r3, r2
 8007534:	42bb      	cmp	r3, r7
 8007536:	d3e0      	bcc.n	80074fa <__gethex+0x21e>
 8007538:	4618      	mov	r0, r3
 800753a:	4652      	mov	r2, sl
 800753c:	9903      	ldr	r1, [sp, #12]
 800753e:	9309      	str	r3, [sp, #36]	; 0x24
 8007540:	f001 f91e 	bl	8008780 <strncmp>
 8007544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007546:	2800      	cmp	r0, #0
 8007548:	d1d7      	bne.n	80074fa <__gethex+0x21e>
 800754a:	461e      	mov	r6, r3
 800754c:	e78c      	b.n	8007468 <__gethex+0x18c>
 800754e:	f04f 0a03 	mov.w	sl, #3
 8007552:	e7b9      	b.n	80074c8 <__gethex+0x1ec>
 8007554:	da09      	bge.n	800756a <__gethex+0x28e>
 8007556:	1bf7      	subs	r7, r6, r7
 8007558:	4621      	mov	r1, r4
 800755a:	463a      	mov	r2, r7
 800755c:	9802      	ldr	r0, [sp, #8]
 800755e:	f000 fc4d 	bl	8007dfc <__lshift>
 8007562:	4604      	mov	r4, r0
 8007564:	1bed      	subs	r5, r5, r7
 8007566:	f100 0914 	add.w	r9, r0, #20
 800756a:	f04f 0a00 	mov.w	sl, #0
 800756e:	e7b0      	b.n	80074d2 <__gethex+0x1f6>
 8007570:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007574:	42a8      	cmp	r0, r5
 8007576:	dd72      	ble.n	800765e <__gethex+0x382>
 8007578:	1b45      	subs	r5, r0, r5
 800757a:	42ae      	cmp	r6, r5
 800757c:	dc35      	bgt.n	80075ea <__gethex+0x30e>
 800757e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007582:	2b02      	cmp	r3, #2
 8007584:	d029      	beq.n	80075da <__gethex+0x2fe>
 8007586:	2b03      	cmp	r3, #3
 8007588:	d02b      	beq.n	80075e2 <__gethex+0x306>
 800758a:	2b01      	cmp	r3, #1
 800758c:	d11c      	bne.n	80075c8 <__gethex+0x2ec>
 800758e:	42ae      	cmp	r6, r5
 8007590:	d11a      	bne.n	80075c8 <__gethex+0x2ec>
 8007592:	2e01      	cmp	r6, #1
 8007594:	d112      	bne.n	80075bc <__gethex+0x2e0>
 8007596:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800759a:	9a05      	ldr	r2, [sp, #20]
 800759c:	2762      	movs	r7, #98	; 0x62
 800759e:	6013      	str	r3, [r2, #0]
 80075a0:	2301      	movs	r3, #1
 80075a2:	6123      	str	r3, [r4, #16]
 80075a4:	f8c9 3000 	str.w	r3, [r9]
 80075a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80075aa:	601c      	str	r4, [r3, #0]
 80075ac:	e728      	b.n	8007400 <__gethex+0x124>
 80075ae:	bf00      	nop
 80075b0:	08009d98 	.word	0x08009d98
 80075b4:	08009d20 	.word	0x08009d20
 80075b8:	08009d31 	.word	0x08009d31
 80075bc:	4620      	mov	r0, r4
 80075be:	1e71      	subs	r1, r6, #1
 80075c0:	f000 fe5b 	bl	800827a <__any_on>
 80075c4:	2800      	cmp	r0, #0
 80075c6:	d1e6      	bne.n	8007596 <__gethex+0x2ba>
 80075c8:	4621      	mov	r1, r4
 80075ca:	9802      	ldr	r0, [sp, #8]
 80075cc:	f000 f9fe 	bl	80079cc <_Bfree>
 80075d0:	2300      	movs	r3, #0
 80075d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80075d4:	2750      	movs	r7, #80	; 0x50
 80075d6:	6013      	str	r3, [r2, #0]
 80075d8:	e712      	b.n	8007400 <__gethex+0x124>
 80075da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d1f3      	bne.n	80075c8 <__gethex+0x2ec>
 80075e0:	e7d9      	b.n	8007596 <__gethex+0x2ba>
 80075e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d1d6      	bne.n	8007596 <__gethex+0x2ba>
 80075e8:	e7ee      	b.n	80075c8 <__gethex+0x2ec>
 80075ea:	1e6f      	subs	r7, r5, #1
 80075ec:	f1ba 0f00 	cmp.w	sl, #0
 80075f0:	d132      	bne.n	8007658 <__gethex+0x37c>
 80075f2:	b127      	cbz	r7, 80075fe <__gethex+0x322>
 80075f4:	4639      	mov	r1, r7
 80075f6:	4620      	mov	r0, r4
 80075f8:	f000 fe3f 	bl	800827a <__any_on>
 80075fc:	4682      	mov	sl, r0
 80075fe:	2101      	movs	r1, #1
 8007600:	117b      	asrs	r3, r7, #5
 8007602:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007606:	f007 071f 	and.w	r7, r7, #31
 800760a:	fa01 f707 	lsl.w	r7, r1, r7
 800760e:	421f      	tst	r7, r3
 8007610:	f04f 0702 	mov.w	r7, #2
 8007614:	4629      	mov	r1, r5
 8007616:	4620      	mov	r0, r4
 8007618:	bf18      	it	ne
 800761a:	f04a 0a02 	orrne.w	sl, sl, #2
 800761e:	1b76      	subs	r6, r6, r5
 8007620:	f7ff fdf4 	bl	800720c <rshift>
 8007624:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007628:	f1ba 0f00 	cmp.w	sl, #0
 800762c:	d048      	beq.n	80076c0 <__gethex+0x3e4>
 800762e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007632:	2b02      	cmp	r3, #2
 8007634:	d015      	beq.n	8007662 <__gethex+0x386>
 8007636:	2b03      	cmp	r3, #3
 8007638:	d017      	beq.n	800766a <__gethex+0x38e>
 800763a:	2b01      	cmp	r3, #1
 800763c:	d109      	bne.n	8007652 <__gethex+0x376>
 800763e:	f01a 0f02 	tst.w	sl, #2
 8007642:	d006      	beq.n	8007652 <__gethex+0x376>
 8007644:	f8d9 0000 	ldr.w	r0, [r9]
 8007648:	ea4a 0a00 	orr.w	sl, sl, r0
 800764c:	f01a 0f01 	tst.w	sl, #1
 8007650:	d10e      	bne.n	8007670 <__gethex+0x394>
 8007652:	f047 0710 	orr.w	r7, r7, #16
 8007656:	e033      	b.n	80076c0 <__gethex+0x3e4>
 8007658:	f04f 0a01 	mov.w	sl, #1
 800765c:	e7cf      	b.n	80075fe <__gethex+0x322>
 800765e:	2701      	movs	r7, #1
 8007660:	e7e2      	b.n	8007628 <__gethex+0x34c>
 8007662:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007664:	f1c3 0301 	rsb	r3, r3, #1
 8007668:	9315      	str	r3, [sp, #84]	; 0x54
 800766a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800766c:	2b00      	cmp	r3, #0
 800766e:	d0f0      	beq.n	8007652 <__gethex+0x376>
 8007670:	f04f 0c00 	mov.w	ip, #0
 8007674:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007678:	f104 0314 	add.w	r3, r4, #20
 800767c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007680:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007684:	4618      	mov	r0, r3
 8007686:	f853 2b04 	ldr.w	r2, [r3], #4
 800768a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800768e:	d01c      	beq.n	80076ca <__gethex+0x3ee>
 8007690:	3201      	adds	r2, #1
 8007692:	6002      	str	r2, [r0, #0]
 8007694:	2f02      	cmp	r7, #2
 8007696:	f104 0314 	add.w	r3, r4, #20
 800769a:	d13d      	bne.n	8007718 <__gethex+0x43c>
 800769c:	f8d8 2000 	ldr.w	r2, [r8]
 80076a0:	3a01      	subs	r2, #1
 80076a2:	42b2      	cmp	r2, r6
 80076a4:	d10a      	bne.n	80076bc <__gethex+0x3e0>
 80076a6:	2201      	movs	r2, #1
 80076a8:	1171      	asrs	r1, r6, #5
 80076aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80076ae:	f006 061f 	and.w	r6, r6, #31
 80076b2:	fa02 f606 	lsl.w	r6, r2, r6
 80076b6:	421e      	tst	r6, r3
 80076b8:	bf18      	it	ne
 80076ba:	4617      	movne	r7, r2
 80076bc:	f047 0720 	orr.w	r7, r7, #32
 80076c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80076c2:	601c      	str	r4, [r3, #0]
 80076c4:	9b05      	ldr	r3, [sp, #20]
 80076c6:	601d      	str	r5, [r3, #0]
 80076c8:	e69a      	b.n	8007400 <__gethex+0x124>
 80076ca:	4299      	cmp	r1, r3
 80076cc:	f843 cc04 	str.w	ip, [r3, #-4]
 80076d0:	d8d8      	bhi.n	8007684 <__gethex+0x3a8>
 80076d2:	68a3      	ldr	r3, [r4, #8]
 80076d4:	459b      	cmp	fp, r3
 80076d6:	db17      	blt.n	8007708 <__gethex+0x42c>
 80076d8:	6861      	ldr	r1, [r4, #4]
 80076da:	9802      	ldr	r0, [sp, #8]
 80076dc:	3101      	adds	r1, #1
 80076de:	f000 f935 	bl	800794c <_Balloc>
 80076e2:	4681      	mov	r9, r0
 80076e4:	b918      	cbnz	r0, 80076ee <__gethex+0x412>
 80076e6:	4602      	mov	r2, r0
 80076e8:	2184      	movs	r1, #132	; 0x84
 80076ea:	4b19      	ldr	r3, [pc, #100]	; (8007750 <__gethex+0x474>)
 80076ec:	e6ab      	b.n	8007446 <__gethex+0x16a>
 80076ee:	6922      	ldr	r2, [r4, #16]
 80076f0:	f104 010c 	add.w	r1, r4, #12
 80076f4:	3202      	adds	r2, #2
 80076f6:	0092      	lsls	r2, r2, #2
 80076f8:	300c      	adds	r0, #12
 80076fa:	f000 f919 	bl	8007930 <memcpy>
 80076fe:	4621      	mov	r1, r4
 8007700:	9802      	ldr	r0, [sp, #8]
 8007702:	f000 f963 	bl	80079cc <_Bfree>
 8007706:	464c      	mov	r4, r9
 8007708:	6923      	ldr	r3, [r4, #16]
 800770a:	1c5a      	adds	r2, r3, #1
 800770c:	6122      	str	r2, [r4, #16]
 800770e:	2201      	movs	r2, #1
 8007710:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007714:	615a      	str	r2, [r3, #20]
 8007716:	e7bd      	b.n	8007694 <__gethex+0x3b8>
 8007718:	6922      	ldr	r2, [r4, #16]
 800771a:	455a      	cmp	r2, fp
 800771c:	dd0b      	ble.n	8007736 <__gethex+0x45a>
 800771e:	2101      	movs	r1, #1
 8007720:	4620      	mov	r0, r4
 8007722:	f7ff fd73 	bl	800720c <rshift>
 8007726:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800772a:	3501      	adds	r5, #1
 800772c:	42ab      	cmp	r3, r5
 800772e:	f6ff aed4 	blt.w	80074da <__gethex+0x1fe>
 8007732:	2701      	movs	r7, #1
 8007734:	e7c2      	b.n	80076bc <__gethex+0x3e0>
 8007736:	f016 061f 	ands.w	r6, r6, #31
 800773a:	d0fa      	beq.n	8007732 <__gethex+0x456>
 800773c:	4453      	add	r3, sl
 800773e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007742:	f000 f9f5 	bl	8007b30 <__hi0bits>
 8007746:	f1c6 0620 	rsb	r6, r6, #32
 800774a:	42b0      	cmp	r0, r6
 800774c:	dbe7      	blt.n	800771e <__gethex+0x442>
 800774e:	e7f0      	b.n	8007732 <__gethex+0x456>
 8007750:	08009d20 	.word	0x08009d20

08007754 <L_shift>:
 8007754:	f1c2 0208 	rsb	r2, r2, #8
 8007758:	0092      	lsls	r2, r2, #2
 800775a:	b570      	push	{r4, r5, r6, lr}
 800775c:	f1c2 0620 	rsb	r6, r2, #32
 8007760:	6843      	ldr	r3, [r0, #4]
 8007762:	6804      	ldr	r4, [r0, #0]
 8007764:	fa03 f506 	lsl.w	r5, r3, r6
 8007768:	432c      	orrs	r4, r5
 800776a:	40d3      	lsrs	r3, r2
 800776c:	6004      	str	r4, [r0, #0]
 800776e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007772:	4288      	cmp	r0, r1
 8007774:	d3f4      	bcc.n	8007760 <L_shift+0xc>
 8007776:	bd70      	pop	{r4, r5, r6, pc}

08007778 <__match>:
 8007778:	b530      	push	{r4, r5, lr}
 800777a:	6803      	ldr	r3, [r0, #0]
 800777c:	3301      	adds	r3, #1
 800777e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007782:	b914      	cbnz	r4, 800778a <__match+0x12>
 8007784:	6003      	str	r3, [r0, #0]
 8007786:	2001      	movs	r0, #1
 8007788:	bd30      	pop	{r4, r5, pc}
 800778a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800778e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007792:	2d19      	cmp	r5, #25
 8007794:	bf98      	it	ls
 8007796:	3220      	addls	r2, #32
 8007798:	42a2      	cmp	r2, r4
 800779a:	d0f0      	beq.n	800777e <__match+0x6>
 800779c:	2000      	movs	r0, #0
 800779e:	e7f3      	b.n	8007788 <__match+0x10>

080077a0 <__hexnan>:
 80077a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a4:	2500      	movs	r5, #0
 80077a6:	680b      	ldr	r3, [r1, #0]
 80077a8:	4682      	mov	sl, r0
 80077aa:	115e      	asrs	r6, r3, #5
 80077ac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80077b0:	f013 031f 	ands.w	r3, r3, #31
 80077b4:	bf18      	it	ne
 80077b6:	3604      	addne	r6, #4
 80077b8:	1f37      	subs	r7, r6, #4
 80077ba:	46b9      	mov	r9, r7
 80077bc:	463c      	mov	r4, r7
 80077be:	46ab      	mov	fp, r5
 80077c0:	b087      	sub	sp, #28
 80077c2:	4690      	mov	r8, r2
 80077c4:	6802      	ldr	r2, [r0, #0]
 80077c6:	9301      	str	r3, [sp, #4]
 80077c8:	f846 5c04 	str.w	r5, [r6, #-4]
 80077cc:	9502      	str	r5, [sp, #8]
 80077ce:	7851      	ldrb	r1, [r2, #1]
 80077d0:	1c53      	adds	r3, r2, #1
 80077d2:	9303      	str	r3, [sp, #12]
 80077d4:	b341      	cbz	r1, 8007828 <__hexnan+0x88>
 80077d6:	4608      	mov	r0, r1
 80077d8:	9205      	str	r2, [sp, #20]
 80077da:	9104      	str	r1, [sp, #16]
 80077dc:	f7ff fd69 	bl	80072b2 <__hexdig_fun>
 80077e0:	2800      	cmp	r0, #0
 80077e2:	d14f      	bne.n	8007884 <__hexnan+0xe4>
 80077e4:	9904      	ldr	r1, [sp, #16]
 80077e6:	9a05      	ldr	r2, [sp, #20]
 80077e8:	2920      	cmp	r1, #32
 80077ea:	d818      	bhi.n	800781e <__hexnan+0x7e>
 80077ec:	9b02      	ldr	r3, [sp, #8]
 80077ee:	459b      	cmp	fp, r3
 80077f0:	dd13      	ble.n	800781a <__hexnan+0x7a>
 80077f2:	454c      	cmp	r4, r9
 80077f4:	d206      	bcs.n	8007804 <__hexnan+0x64>
 80077f6:	2d07      	cmp	r5, #7
 80077f8:	dc04      	bgt.n	8007804 <__hexnan+0x64>
 80077fa:	462a      	mov	r2, r5
 80077fc:	4649      	mov	r1, r9
 80077fe:	4620      	mov	r0, r4
 8007800:	f7ff ffa8 	bl	8007754 <L_shift>
 8007804:	4544      	cmp	r4, r8
 8007806:	d950      	bls.n	80078aa <__hexnan+0x10a>
 8007808:	2300      	movs	r3, #0
 800780a:	f1a4 0904 	sub.w	r9, r4, #4
 800780e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007812:	461d      	mov	r5, r3
 8007814:	464c      	mov	r4, r9
 8007816:	f8cd b008 	str.w	fp, [sp, #8]
 800781a:	9a03      	ldr	r2, [sp, #12]
 800781c:	e7d7      	b.n	80077ce <__hexnan+0x2e>
 800781e:	2929      	cmp	r1, #41	; 0x29
 8007820:	d156      	bne.n	80078d0 <__hexnan+0x130>
 8007822:	3202      	adds	r2, #2
 8007824:	f8ca 2000 	str.w	r2, [sl]
 8007828:	f1bb 0f00 	cmp.w	fp, #0
 800782c:	d050      	beq.n	80078d0 <__hexnan+0x130>
 800782e:	454c      	cmp	r4, r9
 8007830:	d206      	bcs.n	8007840 <__hexnan+0xa0>
 8007832:	2d07      	cmp	r5, #7
 8007834:	dc04      	bgt.n	8007840 <__hexnan+0xa0>
 8007836:	462a      	mov	r2, r5
 8007838:	4649      	mov	r1, r9
 800783a:	4620      	mov	r0, r4
 800783c:	f7ff ff8a 	bl	8007754 <L_shift>
 8007840:	4544      	cmp	r4, r8
 8007842:	d934      	bls.n	80078ae <__hexnan+0x10e>
 8007844:	4623      	mov	r3, r4
 8007846:	f1a8 0204 	sub.w	r2, r8, #4
 800784a:	f853 1b04 	ldr.w	r1, [r3], #4
 800784e:	429f      	cmp	r7, r3
 8007850:	f842 1f04 	str.w	r1, [r2, #4]!
 8007854:	d2f9      	bcs.n	800784a <__hexnan+0xaa>
 8007856:	1b3b      	subs	r3, r7, r4
 8007858:	f023 0303 	bic.w	r3, r3, #3
 800785c:	3304      	adds	r3, #4
 800785e:	3401      	adds	r4, #1
 8007860:	3e03      	subs	r6, #3
 8007862:	42b4      	cmp	r4, r6
 8007864:	bf88      	it	hi
 8007866:	2304      	movhi	r3, #4
 8007868:	2200      	movs	r2, #0
 800786a:	4443      	add	r3, r8
 800786c:	f843 2b04 	str.w	r2, [r3], #4
 8007870:	429f      	cmp	r7, r3
 8007872:	d2fb      	bcs.n	800786c <__hexnan+0xcc>
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	b91b      	cbnz	r3, 8007880 <__hexnan+0xe0>
 8007878:	4547      	cmp	r7, r8
 800787a:	d127      	bne.n	80078cc <__hexnan+0x12c>
 800787c:	2301      	movs	r3, #1
 800787e:	603b      	str	r3, [r7, #0]
 8007880:	2005      	movs	r0, #5
 8007882:	e026      	b.n	80078d2 <__hexnan+0x132>
 8007884:	3501      	adds	r5, #1
 8007886:	2d08      	cmp	r5, #8
 8007888:	f10b 0b01 	add.w	fp, fp, #1
 800788c:	dd06      	ble.n	800789c <__hexnan+0xfc>
 800788e:	4544      	cmp	r4, r8
 8007890:	d9c3      	bls.n	800781a <__hexnan+0x7a>
 8007892:	2300      	movs	r3, #0
 8007894:	2501      	movs	r5, #1
 8007896:	f844 3c04 	str.w	r3, [r4, #-4]
 800789a:	3c04      	subs	r4, #4
 800789c:	6822      	ldr	r2, [r4, #0]
 800789e:	f000 000f 	and.w	r0, r0, #15
 80078a2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80078a6:	6022      	str	r2, [r4, #0]
 80078a8:	e7b7      	b.n	800781a <__hexnan+0x7a>
 80078aa:	2508      	movs	r5, #8
 80078ac:	e7b5      	b.n	800781a <__hexnan+0x7a>
 80078ae:	9b01      	ldr	r3, [sp, #4]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d0df      	beq.n	8007874 <__hexnan+0xd4>
 80078b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80078b8:	f1c3 0320 	rsb	r3, r3, #32
 80078bc:	fa22 f303 	lsr.w	r3, r2, r3
 80078c0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80078c4:	401a      	ands	r2, r3
 80078c6:	f846 2c04 	str.w	r2, [r6, #-4]
 80078ca:	e7d3      	b.n	8007874 <__hexnan+0xd4>
 80078cc:	3f04      	subs	r7, #4
 80078ce:	e7d1      	b.n	8007874 <__hexnan+0xd4>
 80078d0:	2004      	movs	r0, #4
 80078d2:	b007      	add	sp, #28
 80078d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080078d8 <_localeconv_r>:
 80078d8:	4800      	ldr	r0, [pc, #0]	; (80078dc <_localeconv_r+0x4>)
 80078da:	4770      	bx	lr
 80078dc:	20000170 	.word	0x20000170

080078e0 <malloc>:
 80078e0:	4b02      	ldr	r3, [pc, #8]	; (80078ec <malloc+0xc>)
 80078e2:	4601      	mov	r1, r0
 80078e4:	6818      	ldr	r0, [r3, #0]
 80078e6:	f000 bd65 	b.w	80083b4 <_malloc_r>
 80078ea:	bf00      	nop
 80078ec:	20000018 	.word	0x20000018

080078f0 <__ascii_mbtowc>:
 80078f0:	b082      	sub	sp, #8
 80078f2:	b901      	cbnz	r1, 80078f6 <__ascii_mbtowc+0x6>
 80078f4:	a901      	add	r1, sp, #4
 80078f6:	b142      	cbz	r2, 800790a <__ascii_mbtowc+0x1a>
 80078f8:	b14b      	cbz	r3, 800790e <__ascii_mbtowc+0x1e>
 80078fa:	7813      	ldrb	r3, [r2, #0]
 80078fc:	600b      	str	r3, [r1, #0]
 80078fe:	7812      	ldrb	r2, [r2, #0]
 8007900:	1e10      	subs	r0, r2, #0
 8007902:	bf18      	it	ne
 8007904:	2001      	movne	r0, #1
 8007906:	b002      	add	sp, #8
 8007908:	4770      	bx	lr
 800790a:	4610      	mov	r0, r2
 800790c:	e7fb      	b.n	8007906 <__ascii_mbtowc+0x16>
 800790e:	f06f 0001 	mvn.w	r0, #1
 8007912:	e7f8      	b.n	8007906 <__ascii_mbtowc+0x16>

08007914 <memchr>:
 8007914:	4603      	mov	r3, r0
 8007916:	b510      	push	{r4, lr}
 8007918:	b2c9      	uxtb	r1, r1
 800791a:	4402      	add	r2, r0
 800791c:	4293      	cmp	r3, r2
 800791e:	4618      	mov	r0, r3
 8007920:	d101      	bne.n	8007926 <memchr+0x12>
 8007922:	2000      	movs	r0, #0
 8007924:	e003      	b.n	800792e <memchr+0x1a>
 8007926:	7804      	ldrb	r4, [r0, #0]
 8007928:	3301      	adds	r3, #1
 800792a:	428c      	cmp	r4, r1
 800792c:	d1f6      	bne.n	800791c <memchr+0x8>
 800792e:	bd10      	pop	{r4, pc}

08007930 <memcpy>:
 8007930:	440a      	add	r2, r1
 8007932:	4291      	cmp	r1, r2
 8007934:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007938:	d100      	bne.n	800793c <memcpy+0xc>
 800793a:	4770      	bx	lr
 800793c:	b510      	push	{r4, lr}
 800793e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007942:	4291      	cmp	r1, r2
 8007944:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007948:	d1f9      	bne.n	800793e <memcpy+0xe>
 800794a:	bd10      	pop	{r4, pc}

0800794c <_Balloc>:
 800794c:	b570      	push	{r4, r5, r6, lr}
 800794e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007950:	4604      	mov	r4, r0
 8007952:	460d      	mov	r5, r1
 8007954:	b976      	cbnz	r6, 8007974 <_Balloc+0x28>
 8007956:	2010      	movs	r0, #16
 8007958:	f7ff ffc2 	bl	80078e0 <malloc>
 800795c:	4602      	mov	r2, r0
 800795e:	6260      	str	r0, [r4, #36]	; 0x24
 8007960:	b920      	cbnz	r0, 800796c <_Balloc+0x20>
 8007962:	2166      	movs	r1, #102	; 0x66
 8007964:	4b17      	ldr	r3, [pc, #92]	; (80079c4 <_Balloc+0x78>)
 8007966:	4818      	ldr	r0, [pc, #96]	; (80079c8 <_Balloc+0x7c>)
 8007968:	f000 ff2c 	bl	80087c4 <__assert_func>
 800796c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007970:	6006      	str	r6, [r0, #0]
 8007972:	60c6      	str	r6, [r0, #12]
 8007974:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007976:	68f3      	ldr	r3, [r6, #12]
 8007978:	b183      	cbz	r3, 800799c <_Balloc+0x50>
 800797a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007982:	b9b8      	cbnz	r0, 80079b4 <_Balloc+0x68>
 8007984:	2101      	movs	r1, #1
 8007986:	fa01 f605 	lsl.w	r6, r1, r5
 800798a:	1d72      	adds	r2, r6, #5
 800798c:	4620      	mov	r0, r4
 800798e:	0092      	lsls	r2, r2, #2
 8007990:	f000 fc94 	bl	80082bc <_calloc_r>
 8007994:	b160      	cbz	r0, 80079b0 <_Balloc+0x64>
 8007996:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800799a:	e00e      	b.n	80079ba <_Balloc+0x6e>
 800799c:	2221      	movs	r2, #33	; 0x21
 800799e:	2104      	movs	r1, #4
 80079a0:	4620      	mov	r0, r4
 80079a2:	f000 fc8b 	bl	80082bc <_calloc_r>
 80079a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079a8:	60f0      	str	r0, [r6, #12]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d1e4      	bne.n	800797a <_Balloc+0x2e>
 80079b0:	2000      	movs	r0, #0
 80079b2:	bd70      	pop	{r4, r5, r6, pc}
 80079b4:	6802      	ldr	r2, [r0, #0]
 80079b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80079ba:	2300      	movs	r3, #0
 80079bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80079c0:	e7f7      	b.n	80079b2 <_Balloc+0x66>
 80079c2:	bf00      	nop
 80079c4:	08009cae 	.word	0x08009cae
 80079c8:	08009dac 	.word	0x08009dac

080079cc <_Bfree>:
 80079cc:	b570      	push	{r4, r5, r6, lr}
 80079ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80079d0:	4605      	mov	r5, r0
 80079d2:	460c      	mov	r4, r1
 80079d4:	b976      	cbnz	r6, 80079f4 <_Bfree+0x28>
 80079d6:	2010      	movs	r0, #16
 80079d8:	f7ff ff82 	bl	80078e0 <malloc>
 80079dc:	4602      	mov	r2, r0
 80079de:	6268      	str	r0, [r5, #36]	; 0x24
 80079e0:	b920      	cbnz	r0, 80079ec <_Bfree+0x20>
 80079e2:	218a      	movs	r1, #138	; 0x8a
 80079e4:	4b08      	ldr	r3, [pc, #32]	; (8007a08 <_Bfree+0x3c>)
 80079e6:	4809      	ldr	r0, [pc, #36]	; (8007a0c <_Bfree+0x40>)
 80079e8:	f000 feec 	bl	80087c4 <__assert_func>
 80079ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079f0:	6006      	str	r6, [r0, #0]
 80079f2:	60c6      	str	r6, [r0, #12]
 80079f4:	b13c      	cbz	r4, 8007a06 <_Bfree+0x3a>
 80079f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80079f8:	6862      	ldr	r2, [r4, #4]
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a00:	6021      	str	r1, [r4, #0]
 8007a02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007a06:	bd70      	pop	{r4, r5, r6, pc}
 8007a08:	08009cae 	.word	0x08009cae
 8007a0c:	08009dac 	.word	0x08009dac

08007a10 <__multadd>:
 8007a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a14:	4607      	mov	r7, r0
 8007a16:	460c      	mov	r4, r1
 8007a18:	461e      	mov	r6, r3
 8007a1a:	2000      	movs	r0, #0
 8007a1c:	690d      	ldr	r5, [r1, #16]
 8007a1e:	f101 0c14 	add.w	ip, r1, #20
 8007a22:	f8dc 3000 	ldr.w	r3, [ip]
 8007a26:	3001      	adds	r0, #1
 8007a28:	b299      	uxth	r1, r3
 8007a2a:	fb02 6101 	mla	r1, r2, r1, r6
 8007a2e:	0c1e      	lsrs	r6, r3, #16
 8007a30:	0c0b      	lsrs	r3, r1, #16
 8007a32:	fb02 3306 	mla	r3, r2, r6, r3
 8007a36:	b289      	uxth	r1, r1
 8007a38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007a3c:	4285      	cmp	r5, r0
 8007a3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007a42:	f84c 1b04 	str.w	r1, [ip], #4
 8007a46:	dcec      	bgt.n	8007a22 <__multadd+0x12>
 8007a48:	b30e      	cbz	r6, 8007a8e <__multadd+0x7e>
 8007a4a:	68a3      	ldr	r3, [r4, #8]
 8007a4c:	42ab      	cmp	r3, r5
 8007a4e:	dc19      	bgt.n	8007a84 <__multadd+0x74>
 8007a50:	6861      	ldr	r1, [r4, #4]
 8007a52:	4638      	mov	r0, r7
 8007a54:	3101      	adds	r1, #1
 8007a56:	f7ff ff79 	bl	800794c <_Balloc>
 8007a5a:	4680      	mov	r8, r0
 8007a5c:	b928      	cbnz	r0, 8007a6a <__multadd+0x5a>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	21b5      	movs	r1, #181	; 0xb5
 8007a62:	4b0c      	ldr	r3, [pc, #48]	; (8007a94 <__multadd+0x84>)
 8007a64:	480c      	ldr	r0, [pc, #48]	; (8007a98 <__multadd+0x88>)
 8007a66:	f000 fead 	bl	80087c4 <__assert_func>
 8007a6a:	6922      	ldr	r2, [r4, #16]
 8007a6c:	f104 010c 	add.w	r1, r4, #12
 8007a70:	3202      	adds	r2, #2
 8007a72:	0092      	lsls	r2, r2, #2
 8007a74:	300c      	adds	r0, #12
 8007a76:	f7ff ff5b 	bl	8007930 <memcpy>
 8007a7a:	4621      	mov	r1, r4
 8007a7c:	4638      	mov	r0, r7
 8007a7e:	f7ff ffa5 	bl	80079cc <_Bfree>
 8007a82:	4644      	mov	r4, r8
 8007a84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007a88:	3501      	adds	r5, #1
 8007a8a:	615e      	str	r6, [r3, #20]
 8007a8c:	6125      	str	r5, [r4, #16]
 8007a8e:	4620      	mov	r0, r4
 8007a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a94:	08009d20 	.word	0x08009d20
 8007a98:	08009dac 	.word	0x08009dac

08007a9c <__s2b>:
 8007a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007aa0:	4615      	mov	r5, r2
 8007aa2:	2209      	movs	r2, #9
 8007aa4:	461f      	mov	r7, r3
 8007aa6:	3308      	adds	r3, #8
 8007aa8:	460c      	mov	r4, r1
 8007aaa:	fb93 f3f2 	sdiv	r3, r3, r2
 8007aae:	4606      	mov	r6, r0
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	db09      	blt.n	8007acc <__s2b+0x30>
 8007ab8:	4630      	mov	r0, r6
 8007aba:	f7ff ff47 	bl	800794c <_Balloc>
 8007abe:	b940      	cbnz	r0, 8007ad2 <__s2b+0x36>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	21ce      	movs	r1, #206	; 0xce
 8007ac4:	4b18      	ldr	r3, [pc, #96]	; (8007b28 <__s2b+0x8c>)
 8007ac6:	4819      	ldr	r0, [pc, #100]	; (8007b2c <__s2b+0x90>)
 8007ac8:	f000 fe7c 	bl	80087c4 <__assert_func>
 8007acc:	0052      	lsls	r2, r2, #1
 8007ace:	3101      	adds	r1, #1
 8007ad0:	e7f0      	b.n	8007ab4 <__s2b+0x18>
 8007ad2:	9b08      	ldr	r3, [sp, #32]
 8007ad4:	2d09      	cmp	r5, #9
 8007ad6:	6143      	str	r3, [r0, #20]
 8007ad8:	f04f 0301 	mov.w	r3, #1
 8007adc:	6103      	str	r3, [r0, #16]
 8007ade:	dd16      	ble.n	8007b0e <__s2b+0x72>
 8007ae0:	f104 0909 	add.w	r9, r4, #9
 8007ae4:	46c8      	mov	r8, r9
 8007ae6:	442c      	add	r4, r5
 8007ae8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007aec:	4601      	mov	r1, r0
 8007aee:	220a      	movs	r2, #10
 8007af0:	4630      	mov	r0, r6
 8007af2:	3b30      	subs	r3, #48	; 0x30
 8007af4:	f7ff ff8c 	bl	8007a10 <__multadd>
 8007af8:	45a0      	cmp	r8, r4
 8007afa:	d1f5      	bne.n	8007ae8 <__s2b+0x4c>
 8007afc:	f1a5 0408 	sub.w	r4, r5, #8
 8007b00:	444c      	add	r4, r9
 8007b02:	1b2d      	subs	r5, r5, r4
 8007b04:	1963      	adds	r3, r4, r5
 8007b06:	42bb      	cmp	r3, r7
 8007b08:	db04      	blt.n	8007b14 <__s2b+0x78>
 8007b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b0e:	2509      	movs	r5, #9
 8007b10:	340a      	adds	r4, #10
 8007b12:	e7f6      	b.n	8007b02 <__s2b+0x66>
 8007b14:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007b18:	4601      	mov	r1, r0
 8007b1a:	220a      	movs	r2, #10
 8007b1c:	4630      	mov	r0, r6
 8007b1e:	3b30      	subs	r3, #48	; 0x30
 8007b20:	f7ff ff76 	bl	8007a10 <__multadd>
 8007b24:	e7ee      	b.n	8007b04 <__s2b+0x68>
 8007b26:	bf00      	nop
 8007b28:	08009d20 	.word	0x08009d20
 8007b2c:	08009dac 	.word	0x08009dac

08007b30 <__hi0bits>:
 8007b30:	0c02      	lsrs	r2, r0, #16
 8007b32:	0412      	lsls	r2, r2, #16
 8007b34:	4603      	mov	r3, r0
 8007b36:	b9ca      	cbnz	r2, 8007b6c <__hi0bits+0x3c>
 8007b38:	0403      	lsls	r3, r0, #16
 8007b3a:	2010      	movs	r0, #16
 8007b3c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007b40:	bf04      	itt	eq
 8007b42:	021b      	lsleq	r3, r3, #8
 8007b44:	3008      	addeq	r0, #8
 8007b46:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007b4a:	bf04      	itt	eq
 8007b4c:	011b      	lsleq	r3, r3, #4
 8007b4e:	3004      	addeq	r0, #4
 8007b50:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007b54:	bf04      	itt	eq
 8007b56:	009b      	lsleq	r3, r3, #2
 8007b58:	3002      	addeq	r0, #2
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	db05      	blt.n	8007b6a <__hi0bits+0x3a>
 8007b5e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007b62:	f100 0001 	add.w	r0, r0, #1
 8007b66:	bf08      	it	eq
 8007b68:	2020      	moveq	r0, #32
 8007b6a:	4770      	bx	lr
 8007b6c:	2000      	movs	r0, #0
 8007b6e:	e7e5      	b.n	8007b3c <__hi0bits+0xc>

08007b70 <__lo0bits>:
 8007b70:	6803      	ldr	r3, [r0, #0]
 8007b72:	4602      	mov	r2, r0
 8007b74:	f013 0007 	ands.w	r0, r3, #7
 8007b78:	d00b      	beq.n	8007b92 <__lo0bits+0x22>
 8007b7a:	07d9      	lsls	r1, r3, #31
 8007b7c:	d421      	bmi.n	8007bc2 <__lo0bits+0x52>
 8007b7e:	0798      	lsls	r0, r3, #30
 8007b80:	bf49      	itett	mi
 8007b82:	085b      	lsrmi	r3, r3, #1
 8007b84:	089b      	lsrpl	r3, r3, #2
 8007b86:	2001      	movmi	r0, #1
 8007b88:	6013      	strmi	r3, [r2, #0]
 8007b8a:	bf5c      	itt	pl
 8007b8c:	2002      	movpl	r0, #2
 8007b8e:	6013      	strpl	r3, [r2, #0]
 8007b90:	4770      	bx	lr
 8007b92:	b299      	uxth	r1, r3
 8007b94:	b909      	cbnz	r1, 8007b9a <__lo0bits+0x2a>
 8007b96:	2010      	movs	r0, #16
 8007b98:	0c1b      	lsrs	r3, r3, #16
 8007b9a:	b2d9      	uxtb	r1, r3
 8007b9c:	b909      	cbnz	r1, 8007ba2 <__lo0bits+0x32>
 8007b9e:	3008      	adds	r0, #8
 8007ba0:	0a1b      	lsrs	r3, r3, #8
 8007ba2:	0719      	lsls	r1, r3, #28
 8007ba4:	bf04      	itt	eq
 8007ba6:	091b      	lsreq	r3, r3, #4
 8007ba8:	3004      	addeq	r0, #4
 8007baa:	0799      	lsls	r1, r3, #30
 8007bac:	bf04      	itt	eq
 8007bae:	089b      	lsreq	r3, r3, #2
 8007bb0:	3002      	addeq	r0, #2
 8007bb2:	07d9      	lsls	r1, r3, #31
 8007bb4:	d403      	bmi.n	8007bbe <__lo0bits+0x4e>
 8007bb6:	085b      	lsrs	r3, r3, #1
 8007bb8:	f100 0001 	add.w	r0, r0, #1
 8007bbc:	d003      	beq.n	8007bc6 <__lo0bits+0x56>
 8007bbe:	6013      	str	r3, [r2, #0]
 8007bc0:	4770      	bx	lr
 8007bc2:	2000      	movs	r0, #0
 8007bc4:	4770      	bx	lr
 8007bc6:	2020      	movs	r0, #32
 8007bc8:	4770      	bx	lr
	...

08007bcc <__i2b>:
 8007bcc:	b510      	push	{r4, lr}
 8007bce:	460c      	mov	r4, r1
 8007bd0:	2101      	movs	r1, #1
 8007bd2:	f7ff febb 	bl	800794c <_Balloc>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	b928      	cbnz	r0, 8007be6 <__i2b+0x1a>
 8007bda:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007bde:	4b04      	ldr	r3, [pc, #16]	; (8007bf0 <__i2b+0x24>)
 8007be0:	4804      	ldr	r0, [pc, #16]	; (8007bf4 <__i2b+0x28>)
 8007be2:	f000 fdef 	bl	80087c4 <__assert_func>
 8007be6:	2301      	movs	r3, #1
 8007be8:	6144      	str	r4, [r0, #20]
 8007bea:	6103      	str	r3, [r0, #16]
 8007bec:	bd10      	pop	{r4, pc}
 8007bee:	bf00      	nop
 8007bf0:	08009d20 	.word	0x08009d20
 8007bf4:	08009dac 	.word	0x08009dac

08007bf8 <__multiply>:
 8007bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bfc:	4691      	mov	r9, r2
 8007bfe:	690a      	ldr	r2, [r1, #16]
 8007c00:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007c04:	460c      	mov	r4, r1
 8007c06:	429a      	cmp	r2, r3
 8007c08:	bfbe      	ittt	lt
 8007c0a:	460b      	movlt	r3, r1
 8007c0c:	464c      	movlt	r4, r9
 8007c0e:	4699      	movlt	r9, r3
 8007c10:	6927      	ldr	r7, [r4, #16]
 8007c12:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007c16:	68a3      	ldr	r3, [r4, #8]
 8007c18:	6861      	ldr	r1, [r4, #4]
 8007c1a:	eb07 060a 	add.w	r6, r7, sl
 8007c1e:	42b3      	cmp	r3, r6
 8007c20:	b085      	sub	sp, #20
 8007c22:	bfb8      	it	lt
 8007c24:	3101      	addlt	r1, #1
 8007c26:	f7ff fe91 	bl	800794c <_Balloc>
 8007c2a:	b930      	cbnz	r0, 8007c3a <__multiply+0x42>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	f240 115d 	movw	r1, #349	; 0x15d
 8007c32:	4b43      	ldr	r3, [pc, #268]	; (8007d40 <__multiply+0x148>)
 8007c34:	4843      	ldr	r0, [pc, #268]	; (8007d44 <__multiply+0x14c>)
 8007c36:	f000 fdc5 	bl	80087c4 <__assert_func>
 8007c3a:	f100 0514 	add.w	r5, r0, #20
 8007c3e:	462b      	mov	r3, r5
 8007c40:	2200      	movs	r2, #0
 8007c42:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007c46:	4543      	cmp	r3, r8
 8007c48:	d321      	bcc.n	8007c8e <__multiply+0x96>
 8007c4a:	f104 0314 	add.w	r3, r4, #20
 8007c4e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007c52:	f109 0314 	add.w	r3, r9, #20
 8007c56:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007c5a:	9202      	str	r2, [sp, #8]
 8007c5c:	1b3a      	subs	r2, r7, r4
 8007c5e:	3a15      	subs	r2, #21
 8007c60:	f022 0203 	bic.w	r2, r2, #3
 8007c64:	3204      	adds	r2, #4
 8007c66:	f104 0115 	add.w	r1, r4, #21
 8007c6a:	428f      	cmp	r7, r1
 8007c6c:	bf38      	it	cc
 8007c6e:	2204      	movcc	r2, #4
 8007c70:	9201      	str	r2, [sp, #4]
 8007c72:	9a02      	ldr	r2, [sp, #8]
 8007c74:	9303      	str	r3, [sp, #12]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d80c      	bhi.n	8007c94 <__multiply+0x9c>
 8007c7a:	2e00      	cmp	r6, #0
 8007c7c:	dd03      	ble.n	8007c86 <__multiply+0x8e>
 8007c7e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d059      	beq.n	8007d3a <__multiply+0x142>
 8007c86:	6106      	str	r6, [r0, #16]
 8007c88:	b005      	add	sp, #20
 8007c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c8e:	f843 2b04 	str.w	r2, [r3], #4
 8007c92:	e7d8      	b.n	8007c46 <__multiply+0x4e>
 8007c94:	f8b3 a000 	ldrh.w	sl, [r3]
 8007c98:	f1ba 0f00 	cmp.w	sl, #0
 8007c9c:	d023      	beq.n	8007ce6 <__multiply+0xee>
 8007c9e:	46a9      	mov	r9, r5
 8007ca0:	f04f 0c00 	mov.w	ip, #0
 8007ca4:	f104 0e14 	add.w	lr, r4, #20
 8007ca8:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007cac:	f8d9 1000 	ldr.w	r1, [r9]
 8007cb0:	fa1f fb82 	uxth.w	fp, r2
 8007cb4:	b289      	uxth	r1, r1
 8007cb6:	fb0a 110b 	mla	r1, sl, fp, r1
 8007cba:	4461      	add	r1, ip
 8007cbc:	f8d9 c000 	ldr.w	ip, [r9]
 8007cc0:	0c12      	lsrs	r2, r2, #16
 8007cc2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007cc6:	fb0a c202 	mla	r2, sl, r2, ip
 8007cca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007cce:	b289      	uxth	r1, r1
 8007cd0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007cd4:	4577      	cmp	r7, lr
 8007cd6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007cda:	f849 1b04 	str.w	r1, [r9], #4
 8007cde:	d8e3      	bhi.n	8007ca8 <__multiply+0xb0>
 8007ce0:	9a01      	ldr	r2, [sp, #4]
 8007ce2:	f845 c002 	str.w	ip, [r5, r2]
 8007ce6:	9a03      	ldr	r2, [sp, #12]
 8007ce8:	3304      	adds	r3, #4
 8007cea:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007cee:	f1b9 0f00 	cmp.w	r9, #0
 8007cf2:	d020      	beq.n	8007d36 <__multiply+0x13e>
 8007cf4:	46ae      	mov	lr, r5
 8007cf6:	f04f 0a00 	mov.w	sl, #0
 8007cfa:	6829      	ldr	r1, [r5, #0]
 8007cfc:	f104 0c14 	add.w	ip, r4, #20
 8007d00:	f8bc b000 	ldrh.w	fp, [ip]
 8007d04:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007d08:	b289      	uxth	r1, r1
 8007d0a:	fb09 220b 	mla	r2, r9, fp, r2
 8007d0e:	4492      	add	sl, r2
 8007d10:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007d14:	f84e 1b04 	str.w	r1, [lr], #4
 8007d18:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007d1c:	f8be 1000 	ldrh.w	r1, [lr]
 8007d20:	0c12      	lsrs	r2, r2, #16
 8007d22:	fb09 1102 	mla	r1, r9, r2, r1
 8007d26:	4567      	cmp	r7, ip
 8007d28:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007d2c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007d30:	d8e6      	bhi.n	8007d00 <__multiply+0x108>
 8007d32:	9a01      	ldr	r2, [sp, #4]
 8007d34:	50a9      	str	r1, [r5, r2]
 8007d36:	3504      	adds	r5, #4
 8007d38:	e79b      	b.n	8007c72 <__multiply+0x7a>
 8007d3a:	3e01      	subs	r6, #1
 8007d3c:	e79d      	b.n	8007c7a <__multiply+0x82>
 8007d3e:	bf00      	nop
 8007d40:	08009d20 	.word	0x08009d20
 8007d44:	08009dac 	.word	0x08009dac

08007d48 <__pow5mult>:
 8007d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d4c:	4615      	mov	r5, r2
 8007d4e:	f012 0203 	ands.w	r2, r2, #3
 8007d52:	4606      	mov	r6, r0
 8007d54:	460f      	mov	r7, r1
 8007d56:	d007      	beq.n	8007d68 <__pow5mult+0x20>
 8007d58:	4c25      	ldr	r4, [pc, #148]	; (8007df0 <__pow5mult+0xa8>)
 8007d5a:	3a01      	subs	r2, #1
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d62:	f7ff fe55 	bl	8007a10 <__multadd>
 8007d66:	4607      	mov	r7, r0
 8007d68:	10ad      	asrs	r5, r5, #2
 8007d6a:	d03d      	beq.n	8007de8 <__pow5mult+0xa0>
 8007d6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007d6e:	b97c      	cbnz	r4, 8007d90 <__pow5mult+0x48>
 8007d70:	2010      	movs	r0, #16
 8007d72:	f7ff fdb5 	bl	80078e0 <malloc>
 8007d76:	4602      	mov	r2, r0
 8007d78:	6270      	str	r0, [r6, #36]	; 0x24
 8007d7a:	b928      	cbnz	r0, 8007d88 <__pow5mult+0x40>
 8007d7c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007d80:	4b1c      	ldr	r3, [pc, #112]	; (8007df4 <__pow5mult+0xac>)
 8007d82:	481d      	ldr	r0, [pc, #116]	; (8007df8 <__pow5mult+0xb0>)
 8007d84:	f000 fd1e 	bl	80087c4 <__assert_func>
 8007d88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d8c:	6004      	str	r4, [r0, #0]
 8007d8e:	60c4      	str	r4, [r0, #12]
 8007d90:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007d94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d98:	b94c      	cbnz	r4, 8007dae <__pow5mult+0x66>
 8007d9a:	f240 2171 	movw	r1, #625	; 0x271
 8007d9e:	4630      	mov	r0, r6
 8007da0:	f7ff ff14 	bl	8007bcc <__i2b>
 8007da4:	2300      	movs	r3, #0
 8007da6:	4604      	mov	r4, r0
 8007da8:	f8c8 0008 	str.w	r0, [r8, #8]
 8007dac:	6003      	str	r3, [r0, #0]
 8007dae:	f04f 0900 	mov.w	r9, #0
 8007db2:	07eb      	lsls	r3, r5, #31
 8007db4:	d50a      	bpl.n	8007dcc <__pow5mult+0x84>
 8007db6:	4639      	mov	r1, r7
 8007db8:	4622      	mov	r2, r4
 8007dba:	4630      	mov	r0, r6
 8007dbc:	f7ff ff1c 	bl	8007bf8 <__multiply>
 8007dc0:	4680      	mov	r8, r0
 8007dc2:	4639      	mov	r1, r7
 8007dc4:	4630      	mov	r0, r6
 8007dc6:	f7ff fe01 	bl	80079cc <_Bfree>
 8007dca:	4647      	mov	r7, r8
 8007dcc:	106d      	asrs	r5, r5, #1
 8007dce:	d00b      	beq.n	8007de8 <__pow5mult+0xa0>
 8007dd0:	6820      	ldr	r0, [r4, #0]
 8007dd2:	b938      	cbnz	r0, 8007de4 <__pow5mult+0x9c>
 8007dd4:	4622      	mov	r2, r4
 8007dd6:	4621      	mov	r1, r4
 8007dd8:	4630      	mov	r0, r6
 8007dda:	f7ff ff0d 	bl	8007bf8 <__multiply>
 8007dde:	6020      	str	r0, [r4, #0]
 8007de0:	f8c0 9000 	str.w	r9, [r0]
 8007de4:	4604      	mov	r4, r0
 8007de6:	e7e4      	b.n	8007db2 <__pow5mult+0x6a>
 8007de8:	4638      	mov	r0, r7
 8007dea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dee:	bf00      	nop
 8007df0:	08009ef8 	.word	0x08009ef8
 8007df4:	08009cae 	.word	0x08009cae
 8007df8:	08009dac 	.word	0x08009dac

08007dfc <__lshift>:
 8007dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e00:	460c      	mov	r4, r1
 8007e02:	4607      	mov	r7, r0
 8007e04:	4691      	mov	r9, r2
 8007e06:	6923      	ldr	r3, [r4, #16]
 8007e08:	6849      	ldr	r1, [r1, #4]
 8007e0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007e0e:	68a3      	ldr	r3, [r4, #8]
 8007e10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e14:	f108 0601 	add.w	r6, r8, #1
 8007e18:	42b3      	cmp	r3, r6
 8007e1a:	db0b      	blt.n	8007e34 <__lshift+0x38>
 8007e1c:	4638      	mov	r0, r7
 8007e1e:	f7ff fd95 	bl	800794c <_Balloc>
 8007e22:	4605      	mov	r5, r0
 8007e24:	b948      	cbnz	r0, 8007e3a <__lshift+0x3e>
 8007e26:	4602      	mov	r2, r0
 8007e28:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007e2c:	4b29      	ldr	r3, [pc, #164]	; (8007ed4 <__lshift+0xd8>)
 8007e2e:	482a      	ldr	r0, [pc, #168]	; (8007ed8 <__lshift+0xdc>)
 8007e30:	f000 fcc8 	bl	80087c4 <__assert_func>
 8007e34:	3101      	adds	r1, #1
 8007e36:	005b      	lsls	r3, r3, #1
 8007e38:	e7ee      	b.n	8007e18 <__lshift+0x1c>
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	f100 0114 	add.w	r1, r0, #20
 8007e40:	f100 0210 	add.w	r2, r0, #16
 8007e44:	4618      	mov	r0, r3
 8007e46:	4553      	cmp	r3, sl
 8007e48:	db37      	blt.n	8007eba <__lshift+0xbe>
 8007e4a:	6920      	ldr	r0, [r4, #16]
 8007e4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e50:	f104 0314 	add.w	r3, r4, #20
 8007e54:	f019 091f 	ands.w	r9, r9, #31
 8007e58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e5c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007e60:	d02f      	beq.n	8007ec2 <__lshift+0xc6>
 8007e62:	468a      	mov	sl, r1
 8007e64:	f04f 0c00 	mov.w	ip, #0
 8007e68:	f1c9 0e20 	rsb	lr, r9, #32
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	fa02 f209 	lsl.w	r2, r2, r9
 8007e72:	ea42 020c 	orr.w	r2, r2, ip
 8007e76:	f84a 2b04 	str.w	r2, [sl], #4
 8007e7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e7e:	4298      	cmp	r0, r3
 8007e80:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007e84:	d8f2      	bhi.n	8007e6c <__lshift+0x70>
 8007e86:	1b03      	subs	r3, r0, r4
 8007e88:	3b15      	subs	r3, #21
 8007e8a:	f023 0303 	bic.w	r3, r3, #3
 8007e8e:	3304      	adds	r3, #4
 8007e90:	f104 0215 	add.w	r2, r4, #21
 8007e94:	4290      	cmp	r0, r2
 8007e96:	bf38      	it	cc
 8007e98:	2304      	movcc	r3, #4
 8007e9a:	f841 c003 	str.w	ip, [r1, r3]
 8007e9e:	f1bc 0f00 	cmp.w	ip, #0
 8007ea2:	d001      	beq.n	8007ea8 <__lshift+0xac>
 8007ea4:	f108 0602 	add.w	r6, r8, #2
 8007ea8:	3e01      	subs	r6, #1
 8007eaa:	4638      	mov	r0, r7
 8007eac:	4621      	mov	r1, r4
 8007eae:	612e      	str	r6, [r5, #16]
 8007eb0:	f7ff fd8c 	bl	80079cc <_Bfree>
 8007eb4:	4628      	mov	r0, r5
 8007eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eba:	f842 0f04 	str.w	r0, [r2, #4]!
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	e7c1      	b.n	8007e46 <__lshift+0x4a>
 8007ec2:	3904      	subs	r1, #4
 8007ec4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ec8:	4298      	cmp	r0, r3
 8007eca:	f841 2f04 	str.w	r2, [r1, #4]!
 8007ece:	d8f9      	bhi.n	8007ec4 <__lshift+0xc8>
 8007ed0:	e7ea      	b.n	8007ea8 <__lshift+0xac>
 8007ed2:	bf00      	nop
 8007ed4:	08009d20 	.word	0x08009d20
 8007ed8:	08009dac 	.word	0x08009dac

08007edc <__mcmp>:
 8007edc:	4603      	mov	r3, r0
 8007ede:	690a      	ldr	r2, [r1, #16]
 8007ee0:	6900      	ldr	r0, [r0, #16]
 8007ee2:	b530      	push	{r4, r5, lr}
 8007ee4:	1a80      	subs	r0, r0, r2
 8007ee6:	d10d      	bne.n	8007f04 <__mcmp+0x28>
 8007ee8:	3314      	adds	r3, #20
 8007eea:	3114      	adds	r1, #20
 8007eec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007ef0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007ef4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007ef8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007efc:	4295      	cmp	r5, r2
 8007efe:	d002      	beq.n	8007f06 <__mcmp+0x2a>
 8007f00:	d304      	bcc.n	8007f0c <__mcmp+0x30>
 8007f02:	2001      	movs	r0, #1
 8007f04:	bd30      	pop	{r4, r5, pc}
 8007f06:	42a3      	cmp	r3, r4
 8007f08:	d3f4      	bcc.n	8007ef4 <__mcmp+0x18>
 8007f0a:	e7fb      	b.n	8007f04 <__mcmp+0x28>
 8007f0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f10:	e7f8      	b.n	8007f04 <__mcmp+0x28>
	...

08007f14 <__mdiff>:
 8007f14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f18:	460d      	mov	r5, r1
 8007f1a:	4607      	mov	r7, r0
 8007f1c:	4611      	mov	r1, r2
 8007f1e:	4628      	mov	r0, r5
 8007f20:	4614      	mov	r4, r2
 8007f22:	f7ff ffdb 	bl	8007edc <__mcmp>
 8007f26:	1e06      	subs	r6, r0, #0
 8007f28:	d111      	bne.n	8007f4e <__mdiff+0x3a>
 8007f2a:	4631      	mov	r1, r6
 8007f2c:	4638      	mov	r0, r7
 8007f2e:	f7ff fd0d 	bl	800794c <_Balloc>
 8007f32:	4602      	mov	r2, r0
 8007f34:	b928      	cbnz	r0, 8007f42 <__mdiff+0x2e>
 8007f36:	f240 2132 	movw	r1, #562	; 0x232
 8007f3a:	4b3a      	ldr	r3, [pc, #232]	; (8008024 <__mdiff+0x110>)
 8007f3c:	483a      	ldr	r0, [pc, #232]	; (8008028 <__mdiff+0x114>)
 8007f3e:	f000 fc41 	bl	80087c4 <__assert_func>
 8007f42:	2301      	movs	r3, #1
 8007f44:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007f48:	4610      	mov	r0, r2
 8007f4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f4e:	bfa4      	itt	ge
 8007f50:	4623      	movge	r3, r4
 8007f52:	462c      	movge	r4, r5
 8007f54:	4638      	mov	r0, r7
 8007f56:	6861      	ldr	r1, [r4, #4]
 8007f58:	bfa6      	itte	ge
 8007f5a:	461d      	movge	r5, r3
 8007f5c:	2600      	movge	r6, #0
 8007f5e:	2601      	movlt	r6, #1
 8007f60:	f7ff fcf4 	bl	800794c <_Balloc>
 8007f64:	4602      	mov	r2, r0
 8007f66:	b918      	cbnz	r0, 8007f70 <__mdiff+0x5c>
 8007f68:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007f6c:	4b2d      	ldr	r3, [pc, #180]	; (8008024 <__mdiff+0x110>)
 8007f6e:	e7e5      	b.n	8007f3c <__mdiff+0x28>
 8007f70:	f102 0814 	add.w	r8, r2, #20
 8007f74:	46c2      	mov	sl, r8
 8007f76:	f04f 0c00 	mov.w	ip, #0
 8007f7a:	6927      	ldr	r7, [r4, #16]
 8007f7c:	60c6      	str	r6, [r0, #12]
 8007f7e:	692e      	ldr	r6, [r5, #16]
 8007f80:	f104 0014 	add.w	r0, r4, #20
 8007f84:	f105 0914 	add.w	r9, r5, #20
 8007f88:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007f8c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007f90:	3410      	adds	r4, #16
 8007f92:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007f96:	f859 3b04 	ldr.w	r3, [r9], #4
 8007f9a:	fa1f f18b 	uxth.w	r1, fp
 8007f9e:	448c      	add	ip, r1
 8007fa0:	b299      	uxth	r1, r3
 8007fa2:	0c1b      	lsrs	r3, r3, #16
 8007fa4:	ebac 0101 	sub.w	r1, ip, r1
 8007fa8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007fac:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007fb0:	b289      	uxth	r1, r1
 8007fb2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007fb6:	454e      	cmp	r6, r9
 8007fb8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007fbc:	f84a 3b04 	str.w	r3, [sl], #4
 8007fc0:	d8e7      	bhi.n	8007f92 <__mdiff+0x7e>
 8007fc2:	1b73      	subs	r3, r6, r5
 8007fc4:	3b15      	subs	r3, #21
 8007fc6:	f023 0303 	bic.w	r3, r3, #3
 8007fca:	3515      	adds	r5, #21
 8007fcc:	3304      	adds	r3, #4
 8007fce:	42ae      	cmp	r6, r5
 8007fd0:	bf38      	it	cc
 8007fd2:	2304      	movcc	r3, #4
 8007fd4:	4418      	add	r0, r3
 8007fd6:	4443      	add	r3, r8
 8007fd8:	461e      	mov	r6, r3
 8007fda:	4605      	mov	r5, r0
 8007fdc:	4575      	cmp	r5, lr
 8007fde:	d30e      	bcc.n	8007ffe <__mdiff+0xea>
 8007fe0:	f10e 0103 	add.w	r1, lr, #3
 8007fe4:	1a09      	subs	r1, r1, r0
 8007fe6:	f021 0103 	bic.w	r1, r1, #3
 8007fea:	3803      	subs	r0, #3
 8007fec:	4586      	cmp	lr, r0
 8007fee:	bf38      	it	cc
 8007ff0:	2100      	movcc	r1, #0
 8007ff2:	4419      	add	r1, r3
 8007ff4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007ff8:	b18b      	cbz	r3, 800801e <__mdiff+0x10a>
 8007ffa:	6117      	str	r7, [r2, #16]
 8007ffc:	e7a4      	b.n	8007f48 <__mdiff+0x34>
 8007ffe:	f855 8b04 	ldr.w	r8, [r5], #4
 8008002:	fa1f f188 	uxth.w	r1, r8
 8008006:	4461      	add	r1, ip
 8008008:	140c      	asrs	r4, r1, #16
 800800a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800800e:	b289      	uxth	r1, r1
 8008010:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008014:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008018:	f846 1b04 	str.w	r1, [r6], #4
 800801c:	e7de      	b.n	8007fdc <__mdiff+0xc8>
 800801e:	3f01      	subs	r7, #1
 8008020:	e7e8      	b.n	8007ff4 <__mdiff+0xe0>
 8008022:	bf00      	nop
 8008024:	08009d20 	.word	0x08009d20
 8008028:	08009dac 	.word	0x08009dac

0800802c <__ulp>:
 800802c:	4b11      	ldr	r3, [pc, #68]	; (8008074 <__ulp+0x48>)
 800802e:	400b      	ands	r3, r1
 8008030:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008034:	2b00      	cmp	r3, #0
 8008036:	dd02      	ble.n	800803e <__ulp+0x12>
 8008038:	2000      	movs	r0, #0
 800803a:	4619      	mov	r1, r3
 800803c:	4770      	bx	lr
 800803e:	425b      	negs	r3, r3
 8008040:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008044:	f04f 0000 	mov.w	r0, #0
 8008048:	f04f 0100 	mov.w	r1, #0
 800804c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008050:	da04      	bge.n	800805c <__ulp+0x30>
 8008052:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008056:	fa43 f102 	asr.w	r1, r3, r2
 800805a:	4770      	bx	lr
 800805c:	f1a2 0314 	sub.w	r3, r2, #20
 8008060:	2b1e      	cmp	r3, #30
 8008062:	bfd6      	itet	le
 8008064:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008068:	2301      	movgt	r3, #1
 800806a:	fa22 f303 	lsrle.w	r3, r2, r3
 800806e:	4618      	mov	r0, r3
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	7ff00000 	.word	0x7ff00000

08008078 <__b2d>:
 8008078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800807c:	6907      	ldr	r7, [r0, #16]
 800807e:	f100 0914 	add.w	r9, r0, #20
 8008082:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8008086:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800808a:	f1a7 0804 	sub.w	r8, r7, #4
 800808e:	4630      	mov	r0, r6
 8008090:	f7ff fd4e 	bl	8007b30 <__hi0bits>
 8008094:	f1c0 0320 	rsb	r3, r0, #32
 8008098:	280a      	cmp	r0, #10
 800809a:	600b      	str	r3, [r1, #0]
 800809c:	491f      	ldr	r1, [pc, #124]	; (800811c <__b2d+0xa4>)
 800809e:	dc17      	bgt.n	80080d0 <__b2d+0x58>
 80080a0:	45c1      	cmp	r9, r8
 80080a2:	bf28      	it	cs
 80080a4:	2200      	movcs	r2, #0
 80080a6:	f1c0 0c0b 	rsb	ip, r0, #11
 80080aa:	fa26 f30c 	lsr.w	r3, r6, ip
 80080ae:	bf38      	it	cc
 80080b0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80080b4:	ea43 0501 	orr.w	r5, r3, r1
 80080b8:	f100 0315 	add.w	r3, r0, #21
 80080bc:	fa06 f303 	lsl.w	r3, r6, r3
 80080c0:	fa22 f20c 	lsr.w	r2, r2, ip
 80080c4:	ea43 0402 	orr.w	r4, r3, r2
 80080c8:	4620      	mov	r0, r4
 80080ca:	4629      	mov	r1, r5
 80080cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080d0:	45c1      	cmp	r9, r8
 80080d2:	bf2e      	itee	cs
 80080d4:	2200      	movcs	r2, #0
 80080d6:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80080da:	f1a7 0808 	subcc.w	r8, r7, #8
 80080de:	f1b0 030b 	subs.w	r3, r0, #11
 80080e2:	d016      	beq.n	8008112 <__b2d+0x9a>
 80080e4:	f1c3 0720 	rsb	r7, r3, #32
 80080e8:	fa22 f107 	lsr.w	r1, r2, r7
 80080ec:	45c8      	cmp	r8, r9
 80080ee:	fa06 f603 	lsl.w	r6, r6, r3
 80080f2:	ea46 0601 	orr.w	r6, r6, r1
 80080f6:	bf94      	ite	ls
 80080f8:	2100      	movls	r1, #0
 80080fa:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80080fe:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8008102:	fa02 f003 	lsl.w	r0, r2, r3
 8008106:	40f9      	lsrs	r1, r7
 8008108:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800810c:	ea40 0401 	orr.w	r4, r0, r1
 8008110:	e7da      	b.n	80080c8 <__b2d+0x50>
 8008112:	4614      	mov	r4, r2
 8008114:	ea46 0501 	orr.w	r5, r6, r1
 8008118:	e7d6      	b.n	80080c8 <__b2d+0x50>
 800811a:	bf00      	nop
 800811c:	3ff00000 	.word	0x3ff00000

08008120 <__d2b>:
 8008120:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008124:	2101      	movs	r1, #1
 8008126:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800812a:	4690      	mov	r8, r2
 800812c:	461d      	mov	r5, r3
 800812e:	f7ff fc0d 	bl	800794c <_Balloc>
 8008132:	4604      	mov	r4, r0
 8008134:	b930      	cbnz	r0, 8008144 <__d2b+0x24>
 8008136:	4602      	mov	r2, r0
 8008138:	f240 310a 	movw	r1, #778	; 0x30a
 800813c:	4b24      	ldr	r3, [pc, #144]	; (80081d0 <__d2b+0xb0>)
 800813e:	4825      	ldr	r0, [pc, #148]	; (80081d4 <__d2b+0xb4>)
 8008140:	f000 fb40 	bl	80087c4 <__assert_func>
 8008144:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008148:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800814c:	bb2d      	cbnz	r5, 800819a <__d2b+0x7a>
 800814e:	9301      	str	r3, [sp, #4]
 8008150:	f1b8 0300 	subs.w	r3, r8, #0
 8008154:	d026      	beq.n	80081a4 <__d2b+0x84>
 8008156:	4668      	mov	r0, sp
 8008158:	9300      	str	r3, [sp, #0]
 800815a:	f7ff fd09 	bl	8007b70 <__lo0bits>
 800815e:	9900      	ldr	r1, [sp, #0]
 8008160:	b1f0      	cbz	r0, 80081a0 <__d2b+0x80>
 8008162:	9a01      	ldr	r2, [sp, #4]
 8008164:	f1c0 0320 	rsb	r3, r0, #32
 8008168:	fa02 f303 	lsl.w	r3, r2, r3
 800816c:	430b      	orrs	r3, r1
 800816e:	40c2      	lsrs	r2, r0
 8008170:	6163      	str	r3, [r4, #20]
 8008172:	9201      	str	r2, [sp, #4]
 8008174:	9b01      	ldr	r3, [sp, #4]
 8008176:	2b00      	cmp	r3, #0
 8008178:	bf14      	ite	ne
 800817a:	2102      	movne	r1, #2
 800817c:	2101      	moveq	r1, #1
 800817e:	61a3      	str	r3, [r4, #24]
 8008180:	6121      	str	r1, [r4, #16]
 8008182:	b1c5      	cbz	r5, 80081b6 <__d2b+0x96>
 8008184:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008188:	4405      	add	r5, r0
 800818a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800818e:	603d      	str	r5, [r7, #0]
 8008190:	6030      	str	r0, [r6, #0]
 8008192:	4620      	mov	r0, r4
 8008194:	b002      	add	sp, #8
 8008196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800819a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800819e:	e7d6      	b.n	800814e <__d2b+0x2e>
 80081a0:	6161      	str	r1, [r4, #20]
 80081a2:	e7e7      	b.n	8008174 <__d2b+0x54>
 80081a4:	a801      	add	r0, sp, #4
 80081a6:	f7ff fce3 	bl	8007b70 <__lo0bits>
 80081aa:	2101      	movs	r1, #1
 80081ac:	9b01      	ldr	r3, [sp, #4]
 80081ae:	6121      	str	r1, [r4, #16]
 80081b0:	6163      	str	r3, [r4, #20]
 80081b2:	3020      	adds	r0, #32
 80081b4:	e7e5      	b.n	8008182 <__d2b+0x62>
 80081b6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80081ba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80081be:	6038      	str	r0, [r7, #0]
 80081c0:	6918      	ldr	r0, [r3, #16]
 80081c2:	f7ff fcb5 	bl	8007b30 <__hi0bits>
 80081c6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80081ca:	6031      	str	r1, [r6, #0]
 80081cc:	e7e1      	b.n	8008192 <__d2b+0x72>
 80081ce:	bf00      	nop
 80081d0:	08009d20 	.word	0x08009d20
 80081d4:	08009dac 	.word	0x08009dac

080081d8 <__ratio>:
 80081d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081dc:	4688      	mov	r8, r1
 80081de:	4669      	mov	r1, sp
 80081e0:	4681      	mov	r9, r0
 80081e2:	f7ff ff49 	bl	8008078 <__b2d>
 80081e6:	460f      	mov	r7, r1
 80081e8:	4604      	mov	r4, r0
 80081ea:	460d      	mov	r5, r1
 80081ec:	4640      	mov	r0, r8
 80081ee:	a901      	add	r1, sp, #4
 80081f0:	f7ff ff42 	bl	8008078 <__b2d>
 80081f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80081f8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80081fc:	468b      	mov	fp, r1
 80081fe:	eba3 0c02 	sub.w	ip, r3, r2
 8008202:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008206:	1a9b      	subs	r3, r3, r2
 8008208:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800820c:	2b00      	cmp	r3, #0
 800820e:	bfd5      	itete	le
 8008210:	460a      	movle	r2, r1
 8008212:	462a      	movgt	r2, r5
 8008214:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008218:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800821c:	bfd8      	it	le
 800821e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008222:	465b      	mov	r3, fp
 8008224:	4602      	mov	r2, r0
 8008226:	4639      	mov	r1, r7
 8008228:	4620      	mov	r0, r4
 800822a:	f7f8 fa7f 	bl	800072c <__aeabi_ddiv>
 800822e:	b003      	add	sp, #12
 8008230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008234 <__copybits>:
 8008234:	3901      	subs	r1, #1
 8008236:	b570      	push	{r4, r5, r6, lr}
 8008238:	1149      	asrs	r1, r1, #5
 800823a:	6914      	ldr	r4, [r2, #16]
 800823c:	3101      	adds	r1, #1
 800823e:	f102 0314 	add.w	r3, r2, #20
 8008242:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008246:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800824a:	1f05      	subs	r5, r0, #4
 800824c:	42a3      	cmp	r3, r4
 800824e:	d30c      	bcc.n	800826a <__copybits+0x36>
 8008250:	1aa3      	subs	r3, r4, r2
 8008252:	3b11      	subs	r3, #17
 8008254:	f023 0303 	bic.w	r3, r3, #3
 8008258:	3211      	adds	r2, #17
 800825a:	42a2      	cmp	r2, r4
 800825c:	bf88      	it	hi
 800825e:	2300      	movhi	r3, #0
 8008260:	4418      	add	r0, r3
 8008262:	2300      	movs	r3, #0
 8008264:	4288      	cmp	r0, r1
 8008266:	d305      	bcc.n	8008274 <__copybits+0x40>
 8008268:	bd70      	pop	{r4, r5, r6, pc}
 800826a:	f853 6b04 	ldr.w	r6, [r3], #4
 800826e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008272:	e7eb      	b.n	800824c <__copybits+0x18>
 8008274:	f840 3b04 	str.w	r3, [r0], #4
 8008278:	e7f4      	b.n	8008264 <__copybits+0x30>

0800827a <__any_on>:
 800827a:	f100 0214 	add.w	r2, r0, #20
 800827e:	6900      	ldr	r0, [r0, #16]
 8008280:	114b      	asrs	r3, r1, #5
 8008282:	4298      	cmp	r0, r3
 8008284:	b510      	push	{r4, lr}
 8008286:	db11      	blt.n	80082ac <__any_on+0x32>
 8008288:	dd0a      	ble.n	80082a0 <__any_on+0x26>
 800828a:	f011 011f 	ands.w	r1, r1, #31
 800828e:	d007      	beq.n	80082a0 <__any_on+0x26>
 8008290:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008294:	fa24 f001 	lsr.w	r0, r4, r1
 8008298:	fa00 f101 	lsl.w	r1, r0, r1
 800829c:	428c      	cmp	r4, r1
 800829e:	d10b      	bne.n	80082b8 <__any_on+0x3e>
 80082a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d803      	bhi.n	80082b0 <__any_on+0x36>
 80082a8:	2000      	movs	r0, #0
 80082aa:	bd10      	pop	{r4, pc}
 80082ac:	4603      	mov	r3, r0
 80082ae:	e7f7      	b.n	80082a0 <__any_on+0x26>
 80082b0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80082b4:	2900      	cmp	r1, #0
 80082b6:	d0f5      	beq.n	80082a4 <__any_on+0x2a>
 80082b8:	2001      	movs	r0, #1
 80082ba:	e7f6      	b.n	80082aa <__any_on+0x30>

080082bc <_calloc_r>:
 80082bc:	b570      	push	{r4, r5, r6, lr}
 80082be:	fba1 5402 	umull	r5, r4, r1, r2
 80082c2:	b934      	cbnz	r4, 80082d2 <_calloc_r+0x16>
 80082c4:	4629      	mov	r1, r5
 80082c6:	f000 f875 	bl	80083b4 <_malloc_r>
 80082ca:	4606      	mov	r6, r0
 80082cc:	b928      	cbnz	r0, 80082da <_calloc_r+0x1e>
 80082ce:	4630      	mov	r0, r6
 80082d0:	bd70      	pop	{r4, r5, r6, pc}
 80082d2:	220c      	movs	r2, #12
 80082d4:	2600      	movs	r6, #0
 80082d6:	6002      	str	r2, [r0, #0]
 80082d8:	e7f9      	b.n	80082ce <_calloc_r+0x12>
 80082da:	462a      	mov	r2, r5
 80082dc:	4621      	mov	r1, r4
 80082de:	f7fc fbf1 	bl	8004ac4 <memset>
 80082e2:	e7f4      	b.n	80082ce <_calloc_r+0x12>

080082e4 <_free_r>:
 80082e4:	b538      	push	{r3, r4, r5, lr}
 80082e6:	4605      	mov	r5, r0
 80082e8:	2900      	cmp	r1, #0
 80082ea:	d040      	beq.n	800836e <_free_r+0x8a>
 80082ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082f0:	1f0c      	subs	r4, r1, #4
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	bfb8      	it	lt
 80082f6:	18e4      	addlt	r4, r4, r3
 80082f8:	f000 faae 	bl	8008858 <__malloc_lock>
 80082fc:	4a1c      	ldr	r2, [pc, #112]	; (8008370 <_free_r+0x8c>)
 80082fe:	6813      	ldr	r3, [r2, #0]
 8008300:	b933      	cbnz	r3, 8008310 <_free_r+0x2c>
 8008302:	6063      	str	r3, [r4, #4]
 8008304:	6014      	str	r4, [r2, #0]
 8008306:	4628      	mov	r0, r5
 8008308:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800830c:	f000 baaa 	b.w	8008864 <__malloc_unlock>
 8008310:	42a3      	cmp	r3, r4
 8008312:	d908      	bls.n	8008326 <_free_r+0x42>
 8008314:	6820      	ldr	r0, [r4, #0]
 8008316:	1821      	adds	r1, r4, r0
 8008318:	428b      	cmp	r3, r1
 800831a:	bf01      	itttt	eq
 800831c:	6819      	ldreq	r1, [r3, #0]
 800831e:	685b      	ldreq	r3, [r3, #4]
 8008320:	1809      	addeq	r1, r1, r0
 8008322:	6021      	streq	r1, [r4, #0]
 8008324:	e7ed      	b.n	8008302 <_free_r+0x1e>
 8008326:	461a      	mov	r2, r3
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	b10b      	cbz	r3, 8008330 <_free_r+0x4c>
 800832c:	42a3      	cmp	r3, r4
 800832e:	d9fa      	bls.n	8008326 <_free_r+0x42>
 8008330:	6811      	ldr	r1, [r2, #0]
 8008332:	1850      	adds	r0, r2, r1
 8008334:	42a0      	cmp	r0, r4
 8008336:	d10b      	bne.n	8008350 <_free_r+0x6c>
 8008338:	6820      	ldr	r0, [r4, #0]
 800833a:	4401      	add	r1, r0
 800833c:	1850      	adds	r0, r2, r1
 800833e:	4283      	cmp	r3, r0
 8008340:	6011      	str	r1, [r2, #0]
 8008342:	d1e0      	bne.n	8008306 <_free_r+0x22>
 8008344:	6818      	ldr	r0, [r3, #0]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	4401      	add	r1, r0
 800834a:	6011      	str	r1, [r2, #0]
 800834c:	6053      	str	r3, [r2, #4]
 800834e:	e7da      	b.n	8008306 <_free_r+0x22>
 8008350:	d902      	bls.n	8008358 <_free_r+0x74>
 8008352:	230c      	movs	r3, #12
 8008354:	602b      	str	r3, [r5, #0]
 8008356:	e7d6      	b.n	8008306 <_free_r+0x22>
 8008358:	6820      	ldr	r0, [r4, #0]
 800835a:	1821      	adds	r1, r4, r0
 800835c:	428b      	cmp	r3, r1
 800835e:	bf01      	itttt	eq
 8008360:	6819      	ldreq	r1, [r3, #0]
 8008362:	685b      	ldreq	r3, [r3, #4]
 8008364:	1809      	addeq	r1, r1, r0
 8008366:	6021      	streq	r1, [r4, #0]
 8008368:	6063      	str	r3, [r4, #4]
 800836a:	6054      	str	r4, [r2, #4]
 800836c:	e7cb      	b.n	8008306 <_free_r+0x22>
 800836e:	bd38      	pop	{r3, r4, r5, pc}
 8008370:	200006ec 	.word	0x200006ec

08008374 <sbrk_aligned>:
 8008374:	b570      	push	{r4, r5, r6, lr}
 8008376:	4e0e      	ldr	r6, [pc, #56]	; (80083b0 <sbrk_aligned+0x3c>)
 8008378:	460c      	mov	r4, r1
 800837a:	6831      	ldr	r1, [r6, #0]
 800837c:	4605      	mov	r5, r0
 800837e:	b911      	cbnz	r1, 8008386 <sbrk_aligned+0x12>
 8008380:	f000 f9ee 	bl	8008760 <_sbrk_r>
 8008384:	6030      	str	r0, [r6, #0]
 8008386:	4621      	mov	r1, r4
 8008388:	4628      	mov	r0, r5
 800838a:	f000 f9e9 	bl	8008760 <_sbrk_r>
 800838e:	1c43      	adds	r3, r0, #1
 8008390:	d00a      	beq.n	80083a8 <sbrk_aligned+0x34>
 8008392:	1cc4      	adds	r4, r0, #3
 8008394:	f024 0403 	bic.w	r4, r4, #3
 8008398:	42a0      	cmp	r0, r4
 800839a:	d007      	beq.n	80083ac <sbrk_aligned+0x38>
 800839c:	1a21      	subs	r1, r4, r0
 800839e:	4628      	mov	r0, r5
 80083a0:	f000 f9de 	bl	8008760 <_sbrk_r>
 80083a4:	3001      	adds	r0, #1
 80083a6:	d101      	bne.n	80083ac <sbrk_aligned+0x38>
 80083a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80083ac:	4620      	mov	r0, r4
 80083ae:	bd70      	pop	{r4, r5, r6, pc}
 80083b0:	200006f0 	.word	0x200006f0

080083b4 <_malloc_r>:
 80083b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083b8:	1ccd      	adds	r5, r1, #3
 80083ba:	f025 0503 	bic.w	r5, r5, #3
 80083be:	3508      	adds	r5, #8
 80083c0:	2d0c      	cmp	r5, #12
 80083c2:	bf38      	it	cc
 80083c4:	250c      	movcc	r5, #12
 80083c6:	2d00      	cmp	r5, #0
 80083c8:	4607      	mov	r7, r0
 80083ca:	db01      	blt.n	80083d0 <_malloc_r+0x1c>
 80083cc:	42a9      	cmp	r1, r5
 80083ce:	d905      	bls.n	80083dc <_malloc_r+0x28>
 80083d0:	230c      	movs	r3, #12
 80083d2:	2600      	movs	r6, #0
 80083d4:	603b      	str	r3, [r7, #0]
 80083d6:	4630      	mov	r0, r6
 80083d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083dc:	4e2e      	ldr	r6, [pc, #184]	; (8008498 <_malloc_r+0xe4>)
 80083de:	f000 fa3b 	bl	8008858 <__malloc_lock>
 80083e2:	6833      	ldr	r3, [r6, #0]
 80083e4:	461c      	mov	r4, r3
 80083e6:	bb34      	cbnz	r4, 8008436 <_malloc_r+0x82>
 80083e8:	4629      	mov	r1, r5
 80083ea:	4638      	mov	r0, r7
 80083ec:	f7ff ffc2 	bl	8008374 <sbrk_aligned>
 80083f0:	1c43      	adds	r3, r0, #1
 80083f2:	4604      	mov	r4, r0
 80083f4:	d14d      	bne.n	8008492 <_malloc_r+0xde>
 80083f6:	6834      	ldr	r4, [r6, #0]
 80083f8:	4626      	mov	r6, r4
 80083fa:	2e00      	cmp	r6, #0
 80083fc:	d140      	bne.n	8008480 <_malloc_r+0xcc>
 80083fe:	6823      	ldr	r3, [r4, #0]
 8008400:	4631      	mov	r1, r6
 8008402:	4638      	mov	r0, r7
 8008404:	eb04 0803 	add.w	r8, r4, r3
 8008408:	f000 f9aa 	bl	8008760 <_sbrk_r>
 800840c:	4580      	cmp	r8, r0
 800840e:	d13a      	bne.n	8008486 <_malloc_r+0xd2>
 8008410:	6821      	ldr	r1, [r4, #0]
 8008412:	3503      	adds	r5, #3
 8008414:	1a6d      	subs	r5, r5, r1
 8008416:	f025 0503 	bic.w	r5, r5, #3
 800841a:	3508      	adds	r5, #8
 800841c:	2d0c      	cmp	r5, #12
 800841e:	bf38      	it	cc
 8008420:	250c      	movcc	r5, #12
 8008422:	4638      	mov	r0, r7
 8008424:	4629      	mov	r1, r5
 8008426:	f7ff ffa5 	bl	8008374 <sbrk_aligned>
 800842a:	3001      	adds	r0, #1
 800842c:	d02b      	beq.n	8008486 <_malloc_r+0xd2>
 800842e:	6823      	ldr	r3, [r4, #0]
 8008430:	442b      	add	r3, r5
 8008432:	6023      	str	r3, [r4, #0]
 8008434:	e00e      	b.n	8008454 <_malloc_r+0xa0>
 8008436:	6822      	ldr	r2, [r4, #0]
 8008438:	1b52      	subs	r2, r2, r5
 800843a:	d41e      	bmi.n	800847a <_malloc_r+0xc6>
 800843c:	2a0b      	cmp	r2, #11
 800843e:	d916      	bls.n	800846e <_malloc_r+0xba>
 8008440:	1961      	adds	r1, r4, r5
 8008442:	42a3      	cmp	r3, r4
 8008444:	6025      	str	r5, [r4, #0]
 8008446:	bf18      	it	ne
 8008448:	6059      	strne	r1, [r3, #4]
 800844a:	6863      	ldr	r3, [r4, #4]
 800844c:	bf08      	it	eq
 800844e:	6031      	streq	r1, [r6, #0]
 8008450:	5162      	str	r2, [r4, r5]
 8008452:	604b      	str	r3, [r1, #4]
 8008454:	4638      	mov	r0, r7
 8008456:	f104 060b 	add.w	r6, r4, #11
 800845a:	f000 fa03 	bl	8008864 <__malloc_unlock>
 800845e:	f026 0607 	bic.w	r6, r6, #7
 8008462:	1d23      	adds	r3, r4, #4
 8008464:	1af2      	subs	r2, r6, r3
 8008466:	d0b6      	beq.n	80083d6 <_malloc_r+0x22>
 8008468:	1b9b      	subs	r3, r3, r6
 800846a:	50a3      	str	r3, [r4, r2]
 800846c:	e7b3      	b.n	80083d6 <_malloc_r+0x22>
 800846e:	6862      	ldr	r2, [r4, #4]
 8008470:	42a3      	cmp	r3, r4
 8008472:	bf0c      	ite	eq
 8008474:	6032      	streq	r2, [r6, #0]
 8008476:	605a      	strne	r2, [r3, #4]
 8008478:	e7ec      	b.n	8008454 <_malloc_r+0xa0>
 800847a:	4623      	mov	r3, r4
 800847c:	6864      	ldr	r4, [r4, #4]
 800847e:	e7b2      	b.n	80083e6 <_malloc_r+0x32>
 8008480:	4634      	mov	r4, r6
 8008482:	6876      	ldr	r6, [r6, #4]
 8008484:	e7b9      	b.n	80083fa <_malloc_r+0x46>
 8008486:	230c      	movs	r3, #12
 8008488:	4638      	mov	r0, r7
 800848a:	603b      	str	r3, [r7, #0]
 800848c:	f000 f9ea 	bl	8008864 <__malloc_unlock>
 8008490:	e7a1      	b.n	80083d6 <_malloc_r+0x22>
 8008492:	6025      	str	r5, [r4, #0]
 8008494:	e7de      	b.n	8008454 <_malloc_r+0xa0>
 8008496:	bf00      	nop
 8008498:	200006ec 	.word	0x200006ec

0800849c <__ssputs_r>:
 800849c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084a0:	688e      	ldr	r6, [r1, #8]
 80084a2:	4682      	mov	sl, r0
 80084a4:	429e      	cmp	r6, r3
 80084a6:	460c      	mov	r4, r1
 80084a8:	4690      	mov	r8, r2
 80084aa:	461f      	mov	r7, r3
 80084ac:	d838      	bhi.n	8008520 <__ssputs_r+0x84>
 80084ae:	898a      	ldrh	r2, [r1, #12]
 80084b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80084b4:	d032      	beq.n	800851c <__ssputs_r+0x80>
 80084b6:	6825      	ldr	r5, [r4, #0]
 80084b8:	6909      	ldr	r1, [r1, #16]
 80084ba:	3301      	adds	r3, #1
 80084bc:	eba5 0901 	sub.w	r9, r5, r1
 80084c0:	6965      	ldr	r5, [r4, #20]
 80084c2:	444b      	add	r3, r9
 80084c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80084c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80084cc:	106d      	asrs	r5, r5, #1
 80084ce:	429d      	cmp	r5, r3
 80084d0:	bf38      	it	cc
 80084d2:	461d      	movcc	r5, r3
 80084d4:	0553      	lsls	r3, r2, #21
 80084d6:	d531      	bpl.n	800853c <__ssputs_r+0xa0>
 80084d8:	4629      	mov	r1, r5
 80084da:	f7ff ff6b 	bl	80083b4 <_malloc_r>
 80084de:	4606      	mov	r6, r0
 80084e0:	b950      	cbnz	r0, 80084f8 <__ssputs_r+0x5c>
 80084e2:	230c      	movs	r3, #12
 80084e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084e8:	f8ca 3000 	str.w	r3, [sl]
 80084ec:	89a3      	ldrh	r3, [r4, #12]
 80084ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084f2:	81a3      	strh	r3, [r4, #12]
 80084f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084f8:	464a      	mov	r2, r9
 80084fa:	6921      	ldr	r1, [r4, #16]
 80084fc:	f7ff fa18 	bl	8007930 <memcpy>
 8008500:	89a3      	ldrh	r3, [r4, #12]
 8008502:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800850a:	81a3      	strh	r3, [r4, #12]
 800850c:	6126      	str	r6, [r4, #16]
 800850e:	444e      	add	r6, r9
 8008510:	6026      	str	r6, [r4, #0]
 8008512:	463e      	mov	r6, r7
 8008514:	6165      	str	r5, [r4, #20]
 8008516:	eba5 0509 	sub.w	r5, r5, r9
 800851a:	60a5      	str	r5, [r4, #8]
 800851c:	42be      	cmp	r6, r7
 800851e:	d900      	bls.n	8008522 <__ssputs_r+0x86>
 8008520:	463e      	mov	r6, r7
 8008522:	4632      	mov	r2, r6
 8008524:	4641      	mov	r1, r8
 8008526:	6820      	ldr	r0, [r4, #0]
 8008528:	f000 f97c 	bl	8008824 <memmove>
 800852c:	68a3      	ldr	r3, [r4, #8]
 800852e:	2000      	movs	r0, #0
 8008530:	1b9b      	subs	r3, r3, r6
 8008532:	60a3      	str	r3, [r4, #8]
 8008534:	6823      	ldr	r3, [r4, #0]
 8008536:	4433      	add	r3, r6
 8008538:	6023      	str	r3, [r4, #0]
 800853a:	e7db      	b.n	80084f4 <__ssputs_r+0x58>
 800853c:	462a      	mov	r2, r5
 800853e:	f000 f997 	bl	8008870 <_realloc_r>
 8008542:	4606      	mov	r6, r0
 8008544:	2800      	cmp	r0, #0
 8008546:	d1e1      	bne.n	800850c <__ssputs_r+0x70>
 8008548:	4650      	mov	r0, sl
 800854a:	6921      	ldr	r1, [r4, #16]
 800854c:	f7ff feca 	bl	80082e4 <_free_r>
 8008550:	e7c7      	b.n	80084e2 <__ssputs_r+0x46>
	...

08008554 <_svfiprintf_r>:
 8008554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008558:	4698      	mov	r8, r3
 800855a:	898b      	ldrh	r3, [r1, #12]
 800855c:	4607      	mov	r7, r0
 800855e:	061b      	lsls	r3, r3, #24
 8008560:	460d      	mov	r5, r1
 8008562:	4614      	mov	r4, r2
 8008564:	b09d      	sub	sp, #116	; 0x74
 8008566:	d50e      	bpl.n	8008586 <_svfiprintf_r+0x32>
 8008568:	690b      	ldr	r3, [r1, #16]
 800856a:	b963      	cbnz	r3, 8008586 <_svfiprintf_r+0x32>
 800856c:	2140      	movs	r1, #64	; 0x40
 800856e:	f7ff ff21 	bl	80083b4 <_malloc_r>
 8008572:	6028      	str	r0, [r5, #0]
 8008574:	6128      	str	r0, [r5, #16]
 8008576:	b920      	cbnz	r0, 8008582 <_svfiprintf_r+0x2e>
 8008578:	230c      	movs	r3, #12
 800857a:	603b      	str	r3, [r7, #0]
 800857c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008580:	e0d1      	b.n	8008726 <_svfiprintf_r+0x1d2>
 8008582:	2340      	movs	r3, #64	; 0x40
 8008584:	616b      	str	r3, [r5, #20]
 8008586:	2300      	movs	r3, #0
 8008588:	9309      	str	r3, [sp, #36]	; 0x24
 800858a:	2320      	movs	r3, #32
 800858c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008590:	2330      	movs	r3, #48	; 0x30
 8008592:	f04f 0901 	mov.w	r9, #1
 8008596:	f8cd 800c 	str.w	r8, [sp, #12]
 800859a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008740 <_svfiprintf_r+0x1ec>
 800859e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085a2:	4623      	mov	r3, r4
 80085a4:	469a      	mov	sl, r3
 80085a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085aa:	b10a      	cbz	r2, 80085b0 <_svfiprintf_r+0x5c>
 80085ac:	2a25      	cmp	r2, #37	; 0x25
 80085ae:	d1f9      	bne.n	80085a4 <_svfiprintf_r+0x50>
 80085b0:	ebba 0b04 	subs.w	fp, sl, r4
 80085b4:	d00b      	beq.n	80085ce <_svfiprintf_r+0x7a>
 80085b6:	465b      	mov	r3, fp
 80085b8:	4622      	mov	r2, r4
 80085ba:	4629      	mov	r1, r5
 80085bc:	4638      	mov	r0, r7
 80085be:	f7ff ff6d 	bl	800849c <__ssputs_r>
 80085c2:	3001      	adds	r0, #1
 80085c4:	f000 80aa 	beq.w	800871c <_svfiprintf_r+0x1c8>
 80085c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085ca:	445a      	add	r2, fp
 80085cc:	9209      	str	r2, [sp, #36]	; 0x24
 80085ce:	f89a 3000 	ldrb.w	r3, [sl]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	f000 80a2 	beq.w	800871c <_svfiprintf_r+0x1c8>
 80085d8:	2300      	movs	r3, #0
 80085da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80085de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085e2:	f10a 0a01 	add.w	sl, sl, #1
 80085e6:	9304      	str	r3, [sp, #16]
 80085e8:	9307      	str	r3, [sp, #28]
 80085ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80085ee:	931a      	str	r3, [sp, #104]	; 0x68
 80085f0:	4654      	mov	r4, sl
 80085f2:	2205      	movs	r2, #5
 80085f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085f8:	4851      	ldr	r0, [pc, #324]	; (8008740 <_svfiprintf_r+0x1ec>)
 80085fa:	f7ff f98b 	bl	8007914 <memchr>
 80085fe:	9a04      	ldr	r2, [sp, #16]
 8008600:	b9d8      	cbnz	r0, 800863a <_svfiprintf_r+0xe6>
 8008602:	06d0      	lsls	r0, r2, #27
 8008604:	bf44      	itt	mi
 8008606:	2320      	movmi	r3, #32
 8008608:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800860c:	0711      	lsls	r1, r2, #28
 800860e:	bf44      	itt	mi
 8008610:	232b      	movmi	r3, #43	; 0x2b
 8008612:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008616:	f89a 3000 	ldrb.w	r3, [sl]
 800861a:	2b2a      	cmp	r3, #42	; 0x2a
 800861c:	d015      	beq.n	800864a <_svfiprintf_r+0xf6>
 800861e:	4654      	mov	r4, sl
 8008620:	2000      	movs	r0, #0
 8008622:	f04f 0c0a 	mov.w	ip, #10
 8008626:	9a07      	ldr	r2, [sp, #28]
 8008628:	4621      	mov	r1, r4
 800862a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800862e:	3b30      	subs	r3, #48	; 0x30
 8008630:	2b09      	cmp	r3, #9
 8008632:	d94e      	bls.n	80086d2 <_svfiprintf_r+0x17e>
 8008634:	b1b0      	cbz	r0, 8008664 <_svfiprintf_r+0x110>
 8008636:	9207      	str	r2, [sp, #28]
 8008638:	e014      	b.n	8008664 <_svfiprintf_r+0x110>
 800863a:	eba0 0308 	sub.w	r3, r0, r8
 800863e:	fa09 f303 	lsl.w	r3, r9, r3
 8008642:	4313      	orrs	r3, r2
 8008644:	46a2      	mov	sl, r4
 8008646:	9304      	str	r3, [sp, #16]
 8008648:	e7d2      	b.n	80085f0 <_svfiprintf_r+0x9c>
 800864a:	9b03      	ldr	r3, [sp, #12]
 800864c:	1d19      	adds	r1, r3, #4
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	9103      	str	r1, [sp, #12]
 8008652:	2b00      	cmp	r3, #0
 8008654:	bfbb      	ittet	lt
 8008656:	425b      	neglt	r3, r3
 8008658:	f042 0202 	orrlt.w	r2, r2, #2
 800865c:	9307      	strge	r3, [sp, #28]
 800865e:	9307      	strlt	r3, [sp, #28]
 8008660:	bfb8      	it	lt
 8008662:	9204      	strlt	r2, [sp, #16]
 8008664:	7823      	ldrb	r3, [r4, #0]
 8008666:	2b2e      	cmp	r3, #46	; 0x2e
 8008668:	d10c      	bne.n	8008684 <_svfiprintf_r+0x130>
 800866a:	7863      	ldrb	r3, [r4, #1]
 800866c:	2b2a      	cmp	r3, #42	; 0x2a
 800866e:	d135      	bne.n	80086dc <_svfiprintf_r+0x188>
 8008670:	9b03      	ldr	r3, [sp, #12]
 8008672:	3402      	adds	r4, #2
 8008674:	1d1a      	adds	r2, r3, #4
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	9203      	str	r2, [sp, #12]
 800867a:	2b00      	cmp	r3, #0
 800867c:	bfb8      	it	lt
 800867e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008682:	9305      	str	r3, [sp, #20]
 8008684:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008744 <_svfiprintf_r+0x1f0>
 8008688:	2203      	movs	r2, #3
 800868a:	4650      	mov	r0, sl
 800868c:	7821      	ldrb	r1, [r4, #0]
 800868e:	f7ff f941 	bl	8007914 <memchr>
 8008692:	b140      	cbz	r0, 80086a6 <_svfiprintf_r+0x152>
 8008694:	2340      	movs	r3, #64	; 0x40
 8008696:	eba0 000a 	sub.w	r0, r0, sl
 800869a:	fa03 f000 	lsl.w	r0, r3, r0
 800869e:	9b04      	ldr	r3, [sp, #16]
 80086a0:	3401      	adds	r4, #1
 80086a2:	4303      	orrs	r3, r0
 80086a4:	9304      	str	r3, [sp, #16]
 80086a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086aa:	2206      	movs	r2, #6
 80086ac:	4826      	ldr	r0, [pc, #152]	; (8008748 <_svfiprintf_r+0x1f4>)
 80086ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086b2:	f7ff f92f 	bl	8007914 <memchr>
 80086b6:	2800      	cmp	r0, #0
 80086b8:	d038      	beq.n	800872c <_svfiprintf_r+0x1d8>
 80086ba:	4b24      	ldr	r3, [pc, #144]	; (800874c <_svfiprintf_r+0x1f8>)
 80086bc:	bb1b      	cbnz	r3, 8008706 <_svfiprintf_r+0x1b2>
 80086be:	9b03      	ldr	r3, [sp, #12]
 80086c0:	3307      	adds	r3, #7
 80086c2:	f023 0307 	bic.w	r3, r3, #7
 80086c6:	3308      	adds	r3, #8
 80086c8:	9303      	str	r3, [sp, #12]
 80086ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086cc:	4433      	add	r3, r6
 80086ce:	9309      	str	r3, [sp, #36]	; 0x24
 80086d0:	e767      	b.n	80085a2 <_svfiprintf_r+0x4e>
 80086d2:	460c      	mov	r4, r1
 80086d4:	2001      	movs	r0, #1
 80086d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80086da:	e7a5      	b.n	8008628 <_svfiprintf_r+0xd4>
 80086dc:	2300      	movs	r3, #0
 80086de:	f04f 0c0a 	mov.w	ip, #10
 80086e2:	4619      	mov	r1, r3
 80086e4:	3401      	adds	r4, #1
 80086e6:	9305      	str	r3, [sp, #20]
 80086e8:	4620      	mov	r0, r4
 80086ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086ee:	3a30      	subs	r2, #48	; 0x30
 80086f0:	2a09      	cmp	r2, #9
 80086f2:	d903      	bls.n	80086fc <_svfiprintf_r+0x1a8>
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d0c5      	beq.n	8008684 <_svfiprintf_r+0x130>
 80086f8:	9105      	str	r1, [sp, #20]
 80086fa:	e7c3      	b.n	8008684 <_svfiprintf_r+0x130>
 80086fc:	4604      	mov	r4, r0
 80086fe:	2301      	movs	r3, #1
 8008700:	fb0c 2101 	mla	r1, ip, r1, r2
 8008704:	e7f0      	b.n	80086e8 <_svfiprintf_r+0x194>
 8008706:	ab03      	add	r3, sp, #12
 8008708:	9300      	str	r3, [sp, #0]
 800870a:	462a      	mov	r2, r5
 800870c:	4638      	mov	r0, r7
 800870e:	4b10      	ldr	r3, [pc, #64]	; (8008750 <_svfiprintf_r+0x1fc>)
 8008710:	a904      	add	r1, sp, #16
 8008712:	f7fc fa7d 	bl	8004c10 <_printf_float>
 8008716:	1c42      	adds	r2, r0, #1
 8008718:	4606      	mov	r6, r0
 800871a:	d1d6      	bne.n	80086ca <_svfiprintf_r+0x176>
 800871c:	89ab      	ldrh	r3, [r5, #12]
 800871e:	065b      	lsls	r3, r3, #25
 8008720:	f53f af2c 	bmi.w	800857c <_svfiprintf_r+0x28>
 8008724:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008726:	b01d      	add	sp, #116	; 0x74
 8008728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800872c:	ab03      	add	r3, sp, #12
 800872e:	9300      	str	r3, [sp, #0]
 8008730:	462a      	mov	r2, r5
 8008732:	4638      	mov	r0, r7
 8008734:	4b06      	ldr	r3, [pc, #24]	; (8008750 <_svfiprintf_r+0x1fc>)
 8008736:	a904      	add	r1, sp, #16
 8008738:	f7fc fd06 	bl	8005148 <_printf_i>
 800873c:	e7eb      	b.n	8008716 <_svfiprintf_r+0x1c2>
 800873e:	bf00      	nop
 8008740:	08009f04 	.word	0x08009f04
 8008744:	08009f0a 	.word	0x08009f0a
 8008748:	08009f0e 	.word	0x08009f0e
 800874c:	08004c11 	.word	0x08004c11
 8008750:	0800849d 	.word	0x0800849d

08008754 <nan>:
 8008754:	2000      	movs	r0, #0
 8008756:	4901      	ldr	r1, [pc, #4]	; (800875c <nan+0x8>)
 8008758:	4770      	bx	lr
 800875a:	bf00      	nop
 800875c:	7ff80000 	.word	0x7ff80000

08008760 <_sbrk_r>:
 8008760:	b538      	push	{r3, r4, r5, lr}
 8008762:	2300      	movs	r3, #0
 8008764:	4d05      	ldr	r5, [pc, #20]	; (800877c <_sbrk_r+0x1c>)
 8008766:	4604      	mov	r4, r0
 8008768:	4608      	mov	r0, r1
 800876a:	602b      	str	r3, [r5, #0]
 800876c:	f7f9 fcd8 	bl	8002120 <_sbrk>
 8008770:	1c43      	adds	r3, r0, #1
 8008772:	d102      	bne.n	800877a <_sbrk_r+0x1a>
 8008774:	682b      	ldr	r3, [r5, #0]
 8008776:	b103      	cbz	r3, 800877a <_sbrk_r+0x1a>
 8008778:	6023      	str	r3, [r4, #0]
 800877a:	bd38      	pop	{r3, r4, r5, pc}
 800877c:	200006f4 	.word	0x200006f4

08008780 <strncmp>:
 8008780:	4603      	mov	r3, r0
 8008782:	b510      	push	{r4, lr}
 8008784:	b172      	cbz	r2, 80087a4 <strncmp+0x24>
 8008786:	3901      	subs	r1, #1
 8008788:	1884      	adds	r4, r0, r2
 800878a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800878e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008792:	4290      	cmp	r0, r2
 8008794:	d101      	bne.n	800879a <strncmp+0x1a>
 8008796:	42a3      	cmp	r3, r4
 8008798:	d101      	bne.n	800879e <strncmp+0x1e>
 800879a:	1a80      	subs	r0, r0, r2
 800879c:	bd10      	pop	{r4, pc}
 800879e:	2800      	cmp	r0, #0
 80087a0:	d1f3      	bne.n	800878a <strncmp+0xa>
 80087a2:	e7fa      	b.n	800879a <strncmp+0x1a>
 80087a4:	4610      	mov	r0, r2
 80087a6:	e7f9      	b.n	800879c <strncmp+0x1c>

080087a8 <__ascii_wctomb>:
 80087a8:	4603      	mov	r3, r0
 80087aa:	4608      	mov	r0, r1
 80087ac:	b141      	cbz	r1, 80087c0 <__ascii_wctomb+0x18>
 80087ae:	2aff      	cmp	r2, #255	; 0xff
 80087b0:	d904      	bls.n	80087bc <__ascii_wctomb+0x14>
 80087b2:	228a      	movs	r2, #138	; 0x8a
 80087b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087b8:	601a      	str	r2, [r3, #0]
 80087ba:	4770      	bx	lr
 80087bc:	2001      	movs	r0, #1
 80087be:	700a      	strb	r2, [r1, #0]
 80087c0:	4770      	bx	lr
	...

080087c4 <__assert_func>:
 80087c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80087c6:	4614      	mov	r4, r2
 80087c8:	461a      	mov	r2, r3
 80087ca:	4b09      	ldr	r3, [pc, #36]	; (80087f0 <__assert_func+0x2c>)
 80087cc:	4605      	mov	r5, r0
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	68d8      	ldr	r0, [r3, #12]
 80087d2:	b14c      	cbz	r4, 80087e8 <__assert_func+0x24>
 80087d4:	4b07      	ldr	r3, [pc, #28]	; (80087f4 <__assert_func+0x30>)
 80087d6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80087da:	9100      	str	r1, [sp, #0]
 80087dc:	462b      	mov	r3, r5
 80087de:	4906      	ldr	r1, [pc, #24]	; (80087f8 <__assert_func+0x34>)
 80087e0:	f000 f80e 	bl	8008800 <fiprintf>
 80087e4:	f000 fa8a 	bl	8008cfc <abort>
 80087e8:	4b04      	ldr	r3, [pc, #16]	; (80087fc <__assert_func+0x38>)
 80087ea:	461c      	mov	r4, r3
 80087ec:	e7f3      	b.n	80087d6 <__assert_func+0x12>
 80087ee:	bf00      	nop
 80087f0:	20000018 	.word	0x20000018
 80087f4:	08009f15 	.word	0x08009f15
 80087f8:	08009f22 	.word	0x08009f22
 80087fc:	08009f50 	.word	0x08009f50

08008800 <fiprintf>:
 8008800:	b40e      	push	{r1, r2, r3}
 8008802:	b503      	push	{r0, r1, lr}
 8008804:	4601      	mov	r1, r0
 8008806:	ab03      	add	r3, sp, #12
 8008808:	4805      	ldr	r0, [pc, #20]	; (8008820 <fiprintf+0x20>)
 800880a:	f853 2b04 	ldr.w	r2, [r3], #4
 800880e:	6800      	ldr	r0, [r0, #0]
 8008810:	9301      	str	r3, [sp, #4]
 8008812:	f000 f883 	bl	800891c <_vfiprintf_r>
 8008816:	b002      	add	sp, #8
 8008818:	f85d eb04 	ldr.w	lr, [sp], #4
 800881c:	b003      	add	sp, #12
 800881e:	4770      	bx	lr
 8008820:	20000018 	.word	0x20000018

08008824 <memmove>:
 8008824:	4288      	cmp	r0, r1
 8008826:	b510      	push	{r4, lr}
 8008828:	eb01 0402 	add.w	r4, r1, r2
 800882c:	d902      	bls.n	8008834 <memmove+0x10>
 800882e:	4284      	cmp	r4, r0
 8008830:	4623      	mov	r3, r4
 8008832:	d807      	bhi.n	8008844 <memmove+0x20>
 8008834:	1e43      	subs	r3, r0, #1
 8008836:	42a1      	cmp	r1, r4
 8008838:	d008      	beq.n	800884c <memmove+0x28>
 800883a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800883e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008842:	e7f8      	b.n	8008836 <memmove+0x12>
 8008844:	4601      	mov	r1, r0
 8008846:	4402      	add	r2, r0
 8008848:	428a      	cmp	r2, r1
 800884a:	d100      	bne.n	800884e <memmove+0x2a>
 800884c:	bd10      	pop	{r4, pc}
 800884e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008852:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008856:	e7f7      	b.n	8008848 <memmove+0x24>

08008858 <__malloc_lock>:
 8008858:	4801      	ldr	r0, [pc, #4]	; (8008860 <__malloc_lock+0x8>)
 800885a:	f000 bc0b 	b.w	8009074 <__retarget_lock_acquire_recursive>
 800885e:	bf00      	nop
 8008860:	200006f8 	.word	0x200006f8

08008864 <__malloc_unlock>:
 8008864:	4801      	ldr	r0, [pc, #4]	; (800886c <__malloc_unlock+0x8>)
 8008866:	f000 bc06 	b.w	8009076 <__retarget_lock_release_recursive>
 800886a:	bf00      	nop
 800886c:	200006f8 	.word	0x200006f8

08008870 <_realloc_r>:
 8008870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008874:	4680      	mov	r8, r0
 8008876:	4614      	mov	r4, r2
 8008878:	460e      	mov	r6, r1
 800887a:	b921      	cbnz	r1, 8008886 <_realloc_r+0x16>
 800887c:	4611      	mov	r1, r2
 800887e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008882:	f7ff bd97 	b.w	80083b4 <_malloc_r>
 8008886:	b92a      	cbnz	r2, 8008894 <_realloc_r+0x24>
 8008888:	f7ff fd2c 	bl	80082e4 <_free_r>
 800888c:	4625      	mov	r5, r4
 800888e:	4628      	mov	r0, r5
 8008890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008894:	f000 fc56 	bl	8009144 <_malloc_usable_size_r>
 8008898:	4284      	cmp	r4, r0
 800889a:	4607      	mov	r7, r0
 800889c:	d802      	bhi.n	80088a4 <_realloc_r+0x34>
 800889e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80088a2:	d812      	bhi.n	80088ca <_realloc_r+0x5a>
 80088a4:	4621      	mov	r1, r4
 80088a6:	4640      	mov	r0, r8
 80088a8:	f7ff fd84 	bl	80083b4 <_malloc_r>
 80088ac:	4605      	mov	r5, r0
 80088ae:	2800      	cmp	r0, #0
 80088b0:	d0ed      	beq.n	800888e <_realloc_r+0x1e>
 80088b2:	42bc      	cmp	r4, r7
 80088b4:	4622      	mov	r2, r4
 80088b6:	4631      	mov	r1, r6
 80088b8:	bf28      	it	cs
 80088ba:	463a      	movcs	r2, r7
 80088bc:	f7ff f838 	bl	8007930 <memcpy>
 80088c0:	4631      	mov	r1, r6
 80088c2:	4640      	mov	r0, r8
 80088c4:	f7ff fd0e 	bl	80082e4 <_free_r>
 80088c8:	e7e1      	b.n	800888e <_realloc_r+0x1e>
 80088ca:	4635      	mov	r5, r6
 80088cc:	e7df      	b.n	800888e <_realloc_r+0x1e>

080088ce <__sfputc_r>:
 80088ce:	6893      	ldr	r3, [r2, #8]
 80088d0:	b410      	push	{r4}
 80088d2:	3b01      	subs	r3, #1
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	6093      	str	r3, [r2, #8]
 80088d8:	da07      	bge.n	80088ea <__sfputc_r+0x1c>
 80088da:	6994      	ldr	r4, [r2, #24]
 80088dc:	42a3      	cmp	r3, r4
 80088de:	db01      	blt.n	80088e4 <__sfputc_r+0x16>
 80088e0:	290a      	cmp	r1, #10
 80088e2:	d102      	bne.n	80088ea <__sfputc_r+0x1c>
 80088e4:	bc10      	pop	{r4}
 80088e6:	f000 b949 	b.w	8008b7c <__swbuf_r>
 80088ea:	6813      	ldr	r3, [r2, #0]
 80088ec:	1c58      	adds	r0, r3, #1
 80088ee:	6010      	str	r0, [r2, #0]
 80088f0:	7019      	strb	r1, [r3, #0]
 80088f2:	4608      	mov	r0, r1
 80088f4:	bc10      	pop	{r4}
 80088f6:	4770      	bx	lr

080088f8 <__sfputs_r>:
 80088f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088fa:	4606      	mov	r6, r0
 80088fc:	460f      	mov	r7, r1
 80088fe:	4614      	mov	r4, r2
 8008900:	18d5      	adds	r5, r2, r3
 8008902:	42ac      	cmp	r4, r5
 8008904:	d101      	bne.n	800890a <__sfputs_r+0x12>
 8008906:	2000      	movs	r0, #0
 8008908:	e007      	b.n	800891a <__sfputs_r+0x22>
 800890a:	463a      	mov	r2, r7
 800890c:	4630      	mov	r0, r6
 800890e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008912:	f7ff ffdc 	bl	80088ce <__sfputc_r>
 8008916:	1c43      	adds	r3, r0, #1
 8008918:	d1f3      	bne.n	8008902 <__sfputs_r+0xa>
 800891a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800891c <_vfiprintf_r>:
 800891c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008920:	460d      	mov	r5, r1
 8008922:	4614      	mov	r4, r2
 8008924:	4698      	mov	r8, r3
 8008926:	4606      	mov	r6, r0
 8008928:	b09d      	sub	sp, #116	; 0x74
 800892a:	b118      	cbz	r0, 8008934 <_vfiprintf_r+0x18>
 800892c:	6983      	ldr	r3, [r0, #24]
 800892e:	b90b      	cbnz	r3, 8008934 <_vfiprintf_r+0x18>
 8008930:	f000 fb02 	bl	8008f38 <__sinit>
 8008934:	4b89      	ldr	r3, [pc, #548]	; (8008b5c <_vfiprintf_r+0x240>)
 8008936:	429d      	cmp	r5, r3
 8008938:	d11b      	bne.n	8008972 <_vfiprintf_r+0x56>
 800893a:	6875      	ldr	r5, [r6, #4]
 800893c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800893e:	07d9      	lsls	r1, r3, #31
 8008940:	d405      	bmi.n	800894e <_vfiprintf_r+0x32>
 8008942:	89ab      	ldrh	r3, [r5, #12]
 8008944:	059a      	lsls	r2, r3, #22
 8008946:	d402      	bmi.n	800894e <_vfiprintf_r+0x32>
 8008948:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800894a:	f000 fb93 	bl	8009074 <__retarget_lock_acquire_recursive>
 800894e:	89ab      	ldrh	r3, [r5, #12]
 8008950:	071b      	lsls	r3, r3, #28
 8008952:	d501      	bpl.n	8008958 <_vfiprintf_r+0x3c>
 8008954:	692b      	ldr	r3, [r5, #16]
 8008956:	b9eb      	cbnz	r3, 8008994 <_vfiprintf_r+0x78>
 8008958:	4629      	mov	r1, r5
 800895a:	4630      	mov	r0, r6
 800895c:	f000 f960 	bl	8008c20 <__swsetup_r>
 8008960:	b1c0      	cbz	r0, 8008994 <_vfiprintf_r+0x78>
 8008962:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008964:	07dc      	lsls	r4, r3, #31
 8008966:	d50e      	bpl.n	8008986 <_vfiprintf_r+0x6a>
 8008968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800896c:	b01d      	add	sp, #116	; 0x74
 800896e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008972:	4b7b      	ldr	r3, [pc, #492]	; (8008b60 <_vfiprintf_r+0x244>)
 8008974:	429d      	cmp	r5, r3
 8008976:	d101      	bne.n	800897c <_vfiprintf_r+0x60>
 8008978:	68b5      	ldr	r5, [r6, #8]
 800897a:	e7df      	b.n	800893c <_vfiprintf_r+0x20>
 800897c:	4b79      	ldr	r3, [pc, #484]	; (8008b64 <_vfiprintf_r+0x248>)
 800897e:	429d      	cmp	r5, r3
 8008980:	bf08      	it	eq
 8008982:	68f5      	ldreq	r5, [r6, #12]
 8008984:	e7da      	b.n	800893c <_vfiprintf_r+0x20>
 8008986:	89ab      	ldrh	r3, [r5, #12]
 8008988:	0598      	lsls	r0, r3, #22
 800898a:	d4ed      	bmi.n	8008968 <_vfiprintf_r+0x4c>
 800898c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800898e:	f000 fb72 	bl	8009076 <__retarget_lock_release_recursive>
 8008992:	e7e9      	b.n	8008968 <_vfiprintf_r+0x4c>
 8008994:	2300      	movs	r3, #0
 8008996:	9309      	str	r3, [sp, #36]	; 0x24
 8008998:	2320      	movs	r3, #32
 800899a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800899e:	2330      	movs	r3, #48	; 0x30
 80089a0:	f04f 0901 	mov.w	r9, #1
 80089a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80089a8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008b68 <_vfiprintf_r+0x24c>
 80089ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089b0:	4623      	mov	r3, r4
 80089b2:	469a      	mov	sl, r3
 80089b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089b8:	b10a      	cbz	r2, 80089be <_vfiprintf_r+0xa2>
 80089ba:	2a25      	cmp	r2, #37	; 0x25
 80089bc:	d1f9      	bne.n	80089b2 <_vfiprintf_r+0x96>
 80089be:	ebba 0b04 	subs.w	fp, sl, r4
 80089c2:	d00b      	beq.n	80089dc <_vfiprintf_r+0xc0>
 80089c4:	465b      	mov	r3, fp
 80089c6:	4622      	mov	r2, r4
 80089c8:	4629      	mov	r1, r5
 80089ca:	4630      	mov	r0, r6
 80089cc:	f7ff ff94 	bl	80088f8 <__sfputs_r>
 80089d0:	3001      	adds	r0, #1
 80089d2:	f000 80aa 	beq.w	8008b2a <_vfiprintf_r+0x20e>
 80089d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089d8:	445a      	add	r2, fp
 80089da:	9209      	str	r2, [sp, #36]	; 0x24
 80089dc:	f89a 3000 	ldrb.w	r3, [sl]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	f000 80a2 	beq.w	8008b2a <_vfiprintf_r+0x20e>
 80089e6:	2300      	movs	r3, #0
 80089e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089f0:	f10a 0a01 	add.w	sl, sl, #1
 80089f4:	9304      	str	r3, [sp, #16]
 80089f6:	9307      	str	r3, [sp, #28]
 80089f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089fc:	931a      	str	r3, [sp, #104]	; 0x68
 80089fe:	4654      	mov	r4, sl
 8008a00:	2205      	movs	r2, #5
 8008a02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a06:	4858      	ldr	r0, [pc, #352]	; (8008b68 <_vfiprintf_r+0x24c>)
 8008a08:	f7fe ff84 	bl	8007914 <memchr>
 8008a0c:	9a04      	ldr	r2, [sp, #16]
 8008a0e:	b9d8      	cbnz	r0, 8008a48 <_vfiprintf_r+0x12c>
 8008a10:	06d1      	lsls	r1, r2, #27
 8008a12:	bf44      	itt	mi
 8008a14:	2320      	movmi	r3, #32
 8008a16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a1a:	0713      	lsls	r3, r2, #28
 8008a1c:	bf44      	itt	mi
 8008a1e:	232b      	movmi	r3, #43	; 0x2b
 8008a20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a24:	f89a 3000 	ldrb.w	r3, [sl]
 8008a28:	2b2a      	cmp	r3, #42	; 0x2a
 8008a2a:	d015      	beq.n	8008a58 <_vfiprintf_r+0x13c>
 8008a2c:	4654      	mov	r4, sl
 8008a2e:	2000      	movs	r0, #0
 8008a30:	f04f 0c0a 	mov.w	ip, #10
 8008a34:	9a07      	ldr	r2, [sp, #28]
 8008a36:	4621      	mov	r1, r4
 8008a38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a3c:	3b30      	subs	r3, #48	; 0x30
 8008a3e:	2b09      	cmp	r3, #9
 8008a40:	d94e      	bls.n	8008ae0 <_vfiprintf_r+0x1c4>
 8008a42:	b1b0      	cbz	r0, 8008a72 <_vfiprintf_r+0x156>
 8008a44:	9207      	str	r2, [sp, #28]
 8008a46:	e014      	b.n	8008a72 <_vfiprintf_r+0x156>
 8008a48:	eba0 0308 	sub.w	r3, r0, r8
 8008a4c:	fa09 f303 	lsl.w	r3, r9, r3
 8008a50:	4313      	orrs	r3, r2
 8008a52:	46a2      	mov	sl, r4
 8008a54:	9304      	str	r3, [sp, #16]
 8008a56:	e7d2      	b.n	80089fe <_vfiprintf_r+0xe2>
 8008a58:	9b03      	ldr	r3, [sp, #12]
 8008a5a:	1d19      	adds	r1, r3, #4
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	9103      	str	r1, [sp, #12]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	bfbb      	ittet	lt
 8008a64:	425b      	neglt	r3, r3
 8008a66:	f042 0202 	orrlt.w	r2, r2, #2
 8008a6a:	9307      	strge	r3, [sp, #28]
 8008a6c:	9307      	strlt	r3, [sp, #28]
 8008a6e:	bfb8      	it	lt
 8008a70:	9204      	strlt	r2, [sp, #16]
 8008a72:	7823      	ldrb	r3, [r4, #0]
 8008a74:	2b2e      	cmp	r3, #46	; 0x2e
 8008a76:	d10c      	bne.n	8008a92 <_vfiprintf_r+0x176>
 8008a78:	7863      	ldrb	r3, [r4, #1]
 8008a7a:	2b2a      	cmp	r3, #42	; 0x2a
 8008a7c:	d135      	bne.n	8008aea <_vfiprintf_r+0x1ce>
 8008a7e:	9b03      	ldr	r3, [sp, #12]
 8008a80:	3402      	adds	r4, #2
 8008a82:	1d1a      	adds	r2, r3, #4
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	9203      	str	r2, [sp, #12]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	bfb8      	it	lt
 8008a8c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008a90:	9305      	str	r3, [sp, #20]
 8008a92:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008b6c <_vfiprintf_r+0x250>
 8008a96:	2203      	movs	r2, #3
 8008a98:	4650      	mov	r0, sl
 8008a9a:	7821      	ldrb	r1, [r4, #0]
 8008a9c:	f7fe ff3a 	bl	8007914 <memchr>
 8008aa0:	b140      	cbz	r0, 8008ab4 <_vfiprintf_r+0x198>
 8008aa2:	2340      	movs	r3, #64	; 0x40
 8008aa4:	eba0 000a 	sub.w	r0, r0, sl
 8008aa8:	fa03 f000 	lsl.w	r0, r3, r0
 8008aac:	9b04      	ldr	r3, [sp, #16]
 8008aae:	3401      	adds	r4, #1
 8008ab0:	4303      	orrs	r3, r0
 8008ab2:	9304      	str	r3, [sp, #16]
 8008ab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ab8:	2206      	movs	r2, #6
 8008aba:	482d      	ldr	r0, [pc, #180]	; (8008b70 <_vfiprintf_r+0x254>)
 8008abc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ac0:	f7fe ff28 	bl	8007914 <memchr>
 8008ac4:	2800      	cmp	r0, #0
 8008ac6:	d03f      	beq.n	8008b48 <_vfiprintf_r+0x22c>
 8008ac8:	4b2a      	ldr	r3, [pc, #168]	; (8008b74 <_vfiprintf_r+0x258>)
 8008aca:	bb1b      	cbnz	r3, 8008b14 <_vfiprintf_r+0x1f8>
 8008acc:	9b03      	ldr	r3, [sp, #12]
 8008ace:	3307      	adds	r3, #7
 8008ad0:	f023 0307 	bic.w	r3, r3, #7
 8008ad4:	3308      	adds	r3, #8
 8008ad6:	9303      	str	r3, [sp, #12]
 8008ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ada:	443b      	add	r3, r7
 8008adc:	9309      	str	r3, [sp, #36]	; 0x24
 8008ade:	e767      	b.n	80089b0 <_vfiprintf_r+0x94>
 8008ae0:	460c      	mov	r4, r1
 8008ae2:	2001      	movs	r0, #1
 8008ae4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ae8:	e7a5      	b.n	8008a36 <_vfiprintf_r+0x11a>
 8008aea:	2300      	movs	r3, #0
 8008aec:	f04f 0c0a 	mov.w	ip, #10
 8008af0:	4619      	mov	r1, r3
 8008af2:	3401      	adds	r4, #1
 8008af4:	9305      	str	r3, [sp, #20]
 8008af6:	4620      	mov	r0, r4
 8008af8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008afc:	3a30      	subs	r2, #48	; 0x30
 8008afe:	2a09      	cmp	r2, #9
 8008b00:	d903      	bls.n	8008b0a <_vfiprintf_r+0x1ee>
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d0c5      	beq.n	8008a92 <_vfiprintf_r+0x176>
 8008b06:	9105      	str	r1, [sp, #20]
 8008b08:	e7c3      	b.n	8008a92 <_vfiprintf_r+0x176>
 8008b0a:	4604      	mov	r4, r0
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b12:	e7f0      	b.n	8008af6 <_vfiprintf_r+0x1da>
 8008b14:	ab03      	add	r3, sp, #12
 8008b16:	9300      	str	r3, [sp, #0]
 8008b18:	462a      	mov	r2, r5
 8008b1a:	4630      	mov	r0, r6
 8008b1c:	4b16      	ldr	r3, [pc, #88]	; (8008b78 <_vfiprintf_r+0x25c>)
 8008b1e:	a904      	add	r1, sp, #16
 8008b20:	f7fc f876 	bl	8004c10 <_printf_float>
 8008b24:	4607      	mov	r7, r0
 8008b26:	1c78      	adds	r0, r7, #1
 8008b28:	d1d6      	bne.n	8008ad8 <_vfiprintf_r+0x1bc>
 8008b2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b2c:	07d9      	lsls	r1, r3, #31
 8008b2e:	d405      	bmi.n	8008b3c <_vfiprintf_r+0x220>
 8008b30:	89ab      	ldrh	r3, [r5, #12]
 8008b32:	059a      	lsls	r2, r3, #22
 8008b34:	d402      	bmi.n	8008b3c <_vfiprintf_r+0x220>
 8008b36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b38:	f000 fa9d 	bl	8009076 <__retarget_lock_release_recursive>
 8008b3c:	89ab      	ldrh	r3, [r5, #12]
 8008b3e:	065b      	lsls	r3, r3, #25
 8008b40:	f53f af12 	bmi.w	8008968 <_vfiprintf_r+0x4c>
 8008b44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b46:	e711      	b.n	800896c <_vfiprintf_r+0x50>
 8008b48:	ab03      	add	r3, sp, #12
 8008b4a:	9300      	str	r3, [sp, #0]
 8008b4c:	462a      	mov	r2, r5
 8008b4e:	4630      	mov	r0, r6
 8008b50:	4b09      	ldr	r3, [pc, #36]	; (8008b78 <_vfiprintf_r+0x25c>)
 8008b52:	a904      	add	r1, sp, #16
 8008b54:	f7fc faf8 	bl	8005148 <_printf_i>
 8008b58:	e7e4      	b.n	8008b24 <_vfiprintf_r+0x208>
 8008b5a:	bf00      	nop
 8008b5c:	08009f74 	.word	0x08009f74
 8008b60:	08009f94 	.word	0x08009f94
 8008b64:	08009f54 	.word	0x08009f54
 8008b68:	08009f04 	.word	0x08009f04
 8008b6c:	08009f0a 	.word	0x08009f0a
 8008b70:	08009f0e 	.word	0x08009f0e
 8008b74:	08004c11 	.word	0x08004c11
 8008b78:	080088f9 	.word	0x080088f9

08008b7c <__swbuf_r>:
 8008b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b7e:	460e      	mov	r6, r1
 8008b80:	4614      	mov	r4, r2
 8008b82:	4605      	mov	r5, r0
 8008b84:	b118      	cbz	r0, 8008b8e <__swbuf_r+0x12>
 8008b86:	6983      	ldr	r3, [r0, #24]
 8008b88:	b90b      	cbnz	r3, 8008b8e <__swbuf_r+0x12>
 8008b8a:	f000 f9d5 	bl	8008f38 <__sinit>
 8008b8e:	4b21      	ldr	r3, [pc, #132]	; (8008c14 <__swbuf_r+0x98>)
 8008b90:	429c      	cmp	r4, r3
 8008b92:	d12b      	bne.n	8008bec <__swbuf_r+0x70>
 8008b94:	686c      	ldr	r4, [r5, #4]
 8008b96:	69a3      	ldr	r3, [r4, #24]
 8008b98:	60a3      	str	r3, [r4, #8]
 8008b9a:	89a3      	ldrh	r3, [r4, #12]
 8008b9c:	071a      	lsls	r2, r3, #28
 8008b9e:	d52f      	bpl.n	8008c00 <__swbuf_r+0x84>
 8008ba0:	6923      	ldr	r3, [r4, #16]
 8008ba2:	b36b      	cbz	r3, 8008c00 <__swbuf_r+0x84>
 8008ba4:	6923      	ldr	r3, [r4, #16]
 8008ba6:	6820      	ldr	r0, [r4, #0]
 8008ba8:	b2f6      	uxtb	r6, r6
 8008baa:	1ac0      	subs	r0, r0, r3
 8008bac:	6963      	ldr	r3, [r4, #20]
 8008bae:	4637      	mov	r7, r6
 8008bb0:	4283      	cmp	r3, r0
 8008bb2:	dc04      	bgt.n	8008bbe <__swbuf_r+0x42>
 8008bb4:	4621      	mov	r1, r4
 8008bb6:	4628      	mov	r0, r5
 8008bb8:	f000 f92a 	bl	8008e10 <_fflush_r>
 8008bbc:	bb30      	cbnz	r0, 8008c0c <__swbuf_r+0x90>
 8008bbe:	68a3      	ldr	r3, [r4, #8]
 8008bc0:	3001      	adds	r0, #1
 8008bc2:	3b01      	subs	r3, #1
 8008bc4:	60a3      	str	r3, [r4, #8]
 8008bc6:	6823      	ldr	r3, [r4, #0]
 8008bc8:	1c5a      	adds	r2, r3, #1
 8008bca:	6022      	str	r2, [r4, #0]
 8008bcc:	701e      	strb	r6, [r3, #0]
 8008bce:	6963      	ldr	r3, [r4, #20]
 8008bd0:	4283      	cmp	r3, r0
 8008bd2:	d004      	beq.n	8008bde <__swbuf_r+0x62>
 8008bd4:	89a3      	ldrh	r3, [r4, #12]
 8008bd6:	07db      	lsls	r3, r3, #31
 8008bd8:	d506      	bpl.n	8008be8 <__swbuf_r+0x6c>
 8008bda:	2e0a      	cmp	r6, #10
 8008bdc:	d104      	bne.n	8008be8 <__swbuf_r+0x6c>
 8008bde:	4621      	mov	r1, r4
 8008be0:	4628      	mov	r0, r5
 8008be2:	f000 f915 	bl	8008e10 <_fflush_r>
 8008be6:	b988      	cbnz	r0, 8008c0c <__swbuf_r+0x90>
 8008be8:	4638      	mov	r0, r7
 8008bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bec:	4b0a      	ldr	r3, [pc, #40]	; (8008c18 <__swbuf_r+0x9c>)
 8008bee:	429c      	cmp	r4, r3
 8008bf0:	d101      	bne.n	8008bf6 <__swbuf_r+0x7a>
 8008bf2:	68ac      	ldr	r4, [r5, #8]
 8008bf4:	e7cf      	b.n	8008b96 <__swbuf_r+0x1a>
 8008bf6:	4b09      	ldr	r3, [pc, #36]	; (8008c1c <__swbuf_r+0xa0>)
 8008bf8:	429c      	cmp	r4, r3
 8008bfa:	bf08      	it	eq
 8008bfc:	68ec      	ldreq	r4, [r5, #12]
 8008bfe:	e7ca      	b.n	8008b96 <__swbuf_r+0x1a>
 8008c00:	4621      	mov	r1, r4
 8008c02:	4628      	mov	r0, r5
 8008c04:	f000 f80c 	bl	8008c20 <__swsetup_r>
 8008c08:	2800      	cmp	r0, #0
 8008c0a:	d0cb      	beq.n	8008ba4 <__swbuf_r+0x28>
 8008c0c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008c10:	e7ea      	b.n	8008be8 <__swbuf_r+0x6c>
 8008c12:	bf00      	nop
 8008c14:	08009f74 	.word	0x08009f74
 8008c18:	08009f94 	.word	0x08009f94
 8008c1c:	08009f54 	.word	0x08009f54

08008c20 <__swsetup_r>:
 8008c20:	4b32      	ldr	r3, [pc, #200]	; (8008cec <__swsetup_r+0xcc>)
 8008c22:	b570      	push	{r4, r5, r6, lr}
 8008c24:	681d      	ldr	r5, [r3, #0]
 8008c26:	4606      	mov	r6, r0
 8008c28:	460c      	mov	r4, r1
 8008c2a:	b125      	cbz	r5, 8008c36 <__swsetup_r+0x16>
 8008c2c:	69ab      	ldr	r3, [r5, #24]
 8008c2e:	b913      	cbnz	r3, 8008c36 <__swsetup_r+0x16>
 8008c30:	4628      	mov	r0, r5
 8008c32:	f000 f981 	bl	8008f38 <__sinit>
 8008c36:	4b2e      	ldr	r3, [pc, #184]	; (8008cf0 <__swsetup_r+0xd0>)
 8008c38:	429c      	cmp	r4, r3
 8008c3a:	d10f      	bne.n	8008c5c <__swsetup_r+0x3c>
 8008c3c:	686c      	ldr	r4, [r5, #4]
 8008c3e:	89a3      	ldrh	r3, [r4, #12]
 8008c40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c44:	0719      	lsls	r1, r3, #28
 8008c46:	d42c      	bmi.n	8008ca2 <__swsetup_r+0x82>
 8008c48:	06dd      	lsls	r5, r3, #27
 8008c4a:	d411      	bmi.n	8008c70 <__swsetup_r+0x50>
 8008c4c:	2309      	movs	r3, #9
 8008c4e:	6033      	str	r3, [r6, #0]
 8008c50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008c54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c58:	81a3      	strh	r3, [r4, #12]
 8008c5a:	e03e      	b.n	8008cda <__swsetup_r+0xba>
 8008c5c:	4b25      	ldr	r3, [pc, #148]	; (8008cf4 <__swsetup_r+0xd4>)
 8008c5e:	429c      	cmp	r4, r3
 8008c60:	d101      	bne.n	8008c66 <__swsetup_r+0x46>
 8008c62:	68ac      	ldr	r4, [r5, #8]
 8008c64:	e7eb      	b.n	8008c3e <__swsetup_r+0x1e>
 8008c66:	4b24      	ldr	r3, [pc, #144]	; (8008cf8 <__swsetup_r+0xd8>)
 8008c68:	429c      	cmp	r4, r3
 8008c6a:	bf08      	it	eq
 8008c6c:	68ec      	ldreq	r4, [r5, #12]
 8008c6e:	e7e6      	b.n	8008c3e <__swsetup_r+0x1e>
 8008c70:	0758      	lsls	r0, r3, #29
 8008c72:	d512      	bpl.n	8008c9a <__swsetup_r+0x7a>
 8008c74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c76:	b141      	cbz	r1, 8008c8a <__swsetup_r+0x6a>
 8008c78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c7c:	4299      	cmp	r1, r3
 8008c7e:	d002      	beq.n	8008c86 <__swsetup_r+0x66>
 8008c80:	4630      	mov	r0, r6
 8008c82:	f7ff fb2f 	bl	80082e4 <_free_r>
 8008c86:	2300      	movs	r3, #0
 8008c88:	6363      	str	r3, [r4, #52]	; 0x34
 8008c8a:	89a3      	ldrh	r3, [r4, #12]
 8008c8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008c90:	81a3      	strh	r3, [r4, #12]
 8008c92:	2300      	movs	r3, #0
 8008c94:	6063      	str	r3, [r4, #4]
 8008c96:	6923      	ldr	r3, [r4, #16]
 8008c98:	6023      	str	r3, [r4, #0]
 8008c9a:	89a3      	ldrh	r3, [r4, #12]
 8008c9c:	f043 0308 	orr.w	r3, r3, #8
 8008ca0:	81a3      	strh	r3, [r4, #12]
 8008ca2:	6923      	ldr	r3, [r4, #16]
 8008ca4:	b94b      	cbnz	r3, 8008cba <__swsetup_r+0x9a>
 8008ca6:	89a3      	ldrh	r3, [r4, #12]
 8008ca8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008cac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cb0:	d003      	beq.n	8008cba <__swsetup_r+0x9a>
 8008cb2:	4621      	mov	r1, r4
 8008cb4:	4630      	mov	r0, r6
 8008cb6:	f000 fa05 	bl	80090c4 <__smakebuf_r>
 8008cba:	89a0      	ldrh	r0, [r4, #12]
 8008cbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008cc0:	f010 0301 	ands.w	r3, r0, #1
 8008cc4:	d00a      	beq.n	8008cdc <__swsetup_r+0xbc>
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	60a3      	str	r3, [r4, #8]
 8008cca:	6963      	ldr	r3, [r4, #20]
 8008ccc:	425b      	negs	r3, r3
 8008cce:	61a3      	str	r3, [r4, #24]
 8008cd0:	6923      	ldr	r3, [r4, #16]
 8008cd2:	b943      	cbnz	r3, 8008ce6 <__swsetup_r+0xc6>
 8008cd4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008cd8:	d1ba      	bne.n	8008c50 <__swsetup_r+0x30>
 8008cda:	bd70      	pop	{r4, r5, r6, pc}
 8008cdc:	0781      	lsls	r1, r0, #30
 8008cde:	bf58      	it	pl
 8008ce0:	6963      	ldrpl	r3, [r4, #20]
 8008ce2:	60a3      	str	r3, [r4, #8]
 8008ce4:	e7f4      	b.n	8008cd0 <__swsetup_r+0xb0>
 8008ce6:	2000      	movs	r0, #0
 8008ce8:	e7f7      	b.n	8008cda <__swsetup_r+0xba>
 8008cea:	bf00      	nop
 8008cec:	20000018 	.word	0x20000018
 8008cf0:	08009f74 	.word	0x08009f74
 8008cf4:	08009f94 	.word	0x08009f94
 8008cf8:	08009f54 	.word	0x08009f54

08008cfc <abort>:
 8008cfc:	2006      	movs	r0, #6
 8008cfe:	b508      	push	{r3, lr}
 8008d00:	f000 fa50 	bl	80091a4 <raise>
 8008d04:	2001      	movs	r0, #1
 8008d06:	f7f9 f998 	bl	800203a <_exit>
	...

08008d0c <__sflush_r>:
 8008d0c:	898a      	ldrh	r2, [r1, #12]
 8008d0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d10:	4605      	mov	r5, r0
 8008d12:	0710      	lsls	r0, r2, #28
 8008d14:	460c      	mov	r4, r1
 8008d16:	d457      	bmi.n	8008dc8 <__sflush_r+0xbc>
 8008d18:	684b      	ldr	r3, [r1, #4]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	dc04      	bgt.n	8008d28 <__sflush_r+0x1c>
 8008d1e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	dc01      	bgt.n	8008d28 <__sflush_r+0x1c>
 8008d24:	2000      	movs	r0, #0
 8008d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d2a:	2e00      	cmp	r6, #0
 8008d2c:	d0fa      	beq.n	8008d24 <__sflush_r+0x18>
 8008d2e:	2300      	movs	r3, #0
 8008d30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d34:	682f      	ldr	r7, [r5, #0]
 8008d36:	602b      	str	r3, [r5, #0]
 8008d38:	d032      	beq.n	8008da0 <__sflush_r+0x94>
 8008d3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d3c:	89a3      	ldrh	r3, [r4, #12]
 8008d3e:	075a      	lsls	r2, r3, #29
 8008d40:	d505      	bpl.n	8008d4e <__sflush_r+0x42>
 8008d42:	6863      	ldr	r3, [r4, #4]
 8008d44:	1ac0      	subs	r0, r0, r3
 8008d46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d48:	b10b      	cbz	r3, 8008d4e <__sflush_r+0x42>
 8008d4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d4c:	1ac0      	subs	r0, r0, r3
 8008d4e:	2300      	movs	r3, #0
 8008d50:	4602      	mov	r2, r0
 8008d52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d54:	4628      	mov	r0, r5
 8008d56:	6a21      	ldr	r1, [r4, #32]
 8008d58:	47b0      	blx	r6
 8008d5a:	1c43      	adds	r3, r0, #1
 8008d5c:	89a3      	ldrh	r3, [r4, #12]
 8008d5e:	d106      	bne.n	8008d6e <__sflush_r+0x62>
 8008d60:	6829      	ldr	r1, [r5, #0]
 8008d62:	291d      	cmp	r1, #29
 8008d64:	d82c      	bhi.n	8008dc0 <__sflush_r+0xb4>
 8008d66:	4a29      	ldr	r2, [pc, #164]	; (8008e0c <__sflush_r+0x100>)
 8008d68:	40ca      	lsrs	r2, r1
 8008d6a:	07d6      	lsls	r6, r2, #31
 8008d6c:	d528      	bpl.n	8008dc0 <__sflush_r+0xb4>
 8008d6e:	2200      	movs	r2, #0
 8008d70:	6062      	str	r2, [r4, #4]
 8008d72:	6922      	ldr	r2, [r4, #16]
 8008d74:	04d9      	lsls	r1, r3, #19
 8008d76:	6022      	str	r2, [r4, #0]
 8008d78:	d504      	bpl.n	8008d84 <__sflush_r+0x78>
 8008d7a:	1c42      	adds	r2, r0, #1
 8008d7c:	d101      	bne.n	8008d82 <__sflush_r+0x76>
 8008d7e:	682b      	ldr	r3, [r5, #0]
 8008d80:	b903      	cbnz	r3, 8008d84 <__sflush_r+0x78>
 8008d82:	6560      	str	r0, [r4, #84]	; 0x54
 8008d84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d86:	602f      	str	r7, [r5, #0]
 8008d88:	2900      	cmp	r1, #0
 8008d8a:	d0cb      	beq.n	8008d24 <__sflush_r+0x18>
 8008d8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d90:	4299      	cmp	r1, r3
 8008d92:	d002      	beq.n	8008d9a <__sflush_r+0x8e>
 8008d94:	4628      	mov	r0, r5
 8008d96:	f7ff faa5 	bl	80082e4 <_free_r>
 8008d9a:	2000      	movs	r0, #0
 8008d9c:	6360      	str	r0, [r4, #52]	; 0x34
 8008d9e:	e7c2      	b.n	8008d26 <__sflush_r+0x1a>
 8008da0:	6a21      	ldr	r1, [r4, #32]
 8008da2:	2301      	movs	r3, #1
 8008da4:	4628      	mov	r0, r5
 8008da6:	47b0      	blx	r6
 8008da8:	1c41      	adds	r1, r0, #1
 8008daa:	d1c7      	bne.n	8008d3c <__sflush_r+0x30>
 8008dac:	682b      	ldr	r3, [r5, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d0c4      	beq.n	8008d3c <__sflush_r+0x30>
 8008db2:	2b1d      	cmp	r3, #29
 8008db4:	d001      	beq.n	8008dba <__sflush_r+0xae>
 8008db6:	2b16      	cmp	r3, #22
 8008db8:	d101      	bne.n	8008dbe <__sflush_r+0xb2>
 8008dba:	602f      	str	r7, [r5, #0]
 8008dbc:	e7b2      	b.n	8008d24 <__sflush_r+0x18>
 8008dbe:	89a3      	ldrh	r3, [r4, #12]
 8008dc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dc4:	81a3      	strh	r3, [r4, #12]
 8008dc6:	e7ae      	b.n	8008d26 <__sflush_r+0x1a>
 8008dc8:	690f      	ldr	r7, [r1, #16]
 8008dca:	2f00      	cmp	r7, #0
 8008dcc:	d0aa      	beq.n	8008d24 <__sflush_r+0x18>
 8008dce:	0793      	lsls	r3, r2, #30
 8008dd0:	bf18      	it	ne
 8008dd2:	2300      	movne	r3, #0
 8008dd4:	680e      	ldr	r6, [r1, #0]
 8008dd6:	bf08      	it	eq
 8008dd8:	694b      	ldreq	r3, [r1, #20]
 8008dda:	1bf6      	subs	r6, r6, r7
 8008ddc:	600f      	str	r7, [r1, #0]
 8008dde:	608b      	str	r3, [r1, #8]
 8008de0:	2e00      	cmp	r6, #0
 8008de2:	dd9f      	ble.n	8008d24 <__sflush_r+0x18>
 8008de4:	4633      	mov	r3, r6
 8008de6:	463a      	mov	r2, r7
 8008de8:	4628      	mov	r0, r5
 8008dea:	6a21      	ldr	r1, [r4, #32]
 8008dec:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008df0:	47e0      	blx	ip
 8008df2:	2800      	cmp	r0, #0
 8008df4:	dc06      	bgt.n	8008e04 <__sflush_r+0xf8>
 8008df6:	89a3      	ldrh	r3, [r4, #12]
 8008df8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008dfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e00:	81a3      	strh	r3, [r4, #12]
 8008e02:	e790      	b.n	8008d26 <__sflush_r+0x1a>
 8008e04:	4407      	add	r7, r0
 8008e06:	1a36      	subs	r6, r6, r0
 8008e08:	e7ea      	b.n	8008de0 <__sflush_r+0xd4>
 8008e0a:	bf00      	nop
 8008e0c:	20400001 	.word	0x20400001

08008e10 <_fflush_r>:
 8008e10:	b538      	push	{r3, r4, r5, lr}
 8008e12:	690b      	ldr	r3, [r1, #16]
 8008e14:	4605      	mov	r5, r0
 8008e16:	460c      	mov	r4, r1
 8008e18:	b913      	cbnz	r3, 8008e20 <_fflush_r+0x10>
 8008e1a:	2500      	movs	r5, #0
 8008e1c:	4628      	mov	r0, r5
 8008e1e:	bd38      	pop	{r3, r4, r5, pc}
 8008e20:	b118      	cbz	r0, 8008e2a <_fflush_r+0x1a>
 8008e22:	6983      	ldr	r3, [r0, #24]
 8008e24:	b90b      	cbnz	r3, 8008e2a <_fflush_r+0x1a>
 8008e26:	f000 f887 	bl	8008f38 <__sinit>
 8008e2a:	4b14      	ldr	r3, [pc, #80]	; (8008e7c <_fflush_r+0x6c>)
 8008e2c:	429c      	cmp	r4, r3
 8008e2e:	d11b      	bne.n	8008e68 <_fflush_r+0x58>
 8008e30:	686c      	ldr	r4, [r5, #4]
 8008e32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d0ef      	beq.n	8008e1a <_fflush_r+0xa>
 8008e3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e3c:	07d0      	lsls	r0, r2, #31
 8008e3e:	d404      	bmi.n	8008e4a <_fflush_r+0x3a>
 8008e40:	0599      	lsls	r1, r3, #22
 8008e42:	d402      	bmi.n	8008e4a <_fflush_r+0x3a>
 8008e44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e46:	f000 f915 	bl	8009074 <__retarget_lock_acquire_recursive>
 8008e4a:	4628      	mov	r0, r5
 8008e4c:	4621      	mov	r1, r4
 8008e4e:	f7ff ff5d 	bl	8008d0c <__sflush_r>
 8008e52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e54:	4605      	mov	r5, r0
 8008e56:	07da      	lsls	r2, r3, #31
 8008e58:	d4e0      	bmi.n	8008e1c <_fflush_r+0xc>
 8008e5a:	89a3      	ldrh	r3, [r4, #12]
 8008e5c:	059b      	lsls	r3, r3, #22
 8008e5e:	d4dd      	bmi.n	8008e1c <_fflush_r+0xc>
 8008e60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e62:	f000 f908 	bl	8009076 <__retarget_lock_release_recursive>
 8008e66:	e7d9      	b.n	8008e1c <_fflush_r+0xc>
 8008e68:	4b05      	ldr	r3, [pc, #20]	; (8008e80 <_fflush_r+0x70>)
 8008e6a:	429c      	cmp	r4, r3
 8008e6c:	d101      	bne.n	8008e72 <_fflush_r+0x62>
 8008e6e:	68ac      	ldr	r4, [r5, #8]
 8008e70:	e7df      	b.n	8008e32 <_fflush_r+0x22>
 8008e72:	4b04      	ldr	r3, [pc, #16]	; (8008e84 <_fflush_r+0x74>)
 8008e74:	429c      	cmp	r4, r3
 8008e76:	bf08      	it	eq
 8008e78:	68ec      	ldreq	r4, [r5, #12]
 8008e7a:	e7da      	b.n	8008e32 <_fflush_r+0x22>
 8008e7c:	08009f74 	.word	0x08009f74
 8008e80:	08009f94 	.word	0x08009f94
 8008e84:	08009f54 	.word	0x08009f54

08008e88 <std>:
 8008e88:	2300      	movs	r3, #0
 8008e8a:	b510      	push	{r4, lr}
 8008e8c:	4604      	mov	r4, r0
 8008e8e:	e9c0 3300 	strd	r3, r3, [r0]
 8008e92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e96:	6083      	str	r3, [r0, #8]
 8008e98:	8181      	strh	r1, [r0, #12]
 8008e9a:	6643      	str	r3, [r0, #100]	; 0x64
 8008e9c:	81c2      	strh	r2, [r0, #14]
 8008e9e:	6183      	str	r3, [r0, #24]
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	2208      	movs	r2, #8
 8008ea4:	305c      	adds	r0, #92	; 0x5c
 8008ea6:	f7fb fe0d 	bl	8004ac4 <memset>
 8008eaa:	4b05      	ldr	r3, [pc, #20]	; (8008ec0 <std+0x38>)
 8008eac:	6224      	str	r4, [r4, #32]
 8008eae:	6263      	str	r3, [r4, #36]	; 0x24
 8008eb0:	4b04      	ldr	r3, [pc, #16]	; (8008ec4 <std+0x3c>)
 8008eb2:	62a3      	str	r3, [r4, #40]	; 0x28
 8008eb4:	4b04      	ldr	r3, [pc, #16]	; (8008ec8 <std+0x40>)
 8008eb6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008eb8:	4b04      	ldr	r3, [pc, #16]	; (8008ecc <std+0x44>)
 8008eba:	6323      	str	r3, [r4, #48]	; 0x30
 8008ebc:	bd10      	pop	{r4, pc}
 8008ebe:	bf00      	nop
 8008ec0:	080091dd 	.word	0x080091dd
 8008ec4:	080091ff 	.word	0x080091ff
 8008ec8:	08009237 	.word	0x08009237
 8008ecc:	0800925b 	.word	0x0800925b

08008ed0 <_cleanup_r>:
 8008ed0:	4901      	ldr	r1, [pc, #4]	; (8008ed8 <_cleanup_r+0x8>)
 8008ed2:	f000 b8af 	b.w	8009034 <_fwalk_reent>
 8008ed6:	bf00      	nop
 8008ed8:	08008e11 	.word	0x08008e11

08008edc <__sfmoreglue>:
 8008edc:	2268      	movs	r2, #104	; 0x68
 8008ede:	b570      	push	{r4, r5, r6, lr}
 8008ee0:	1e4d      	subs	r5, r1, #1
 8008ee2:	4355      	muls	r5, r2
 8008ee4:	460e      	mov	r6, r1
 8008ee6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008eea:	f7ff fa63 	bl	80083b4 <_malloc_r>
 8008eee:	4604      	mov	r4, r0
 8008ef0:	b140      	cbz	r0, 8008f04 <__sfmoreglue+0x28>
 8008ef2:	2100      	movs	r1, #0
 8008ef4:	e9c0 1600 	strd	r1, r6, [r0]
 8008ef8:	300c      	adds	r0, #12
 8008efa:	60a0      	str	r0, [r4, #8]
 8008efc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008f00:	f7fb fde0 	bl	8004ac4 <memset>
 8008f04:	4620      	mov	r0, r4
 8008f06:	bd70      	pop	{r4, r5, r6, pc}

08008f08 <__sfp_lock_acquire>:
 8008f08:	4801      	ldr	r0, [pc, #4]	; (8008f10 <__sfp_lock_acquire+0x8>)
 8008f0a:	f000 b8b3 	b.w	8009074 <__retarget_lock_acquire_recursive>
 8008f0e:	bf00      	nop
 8008f10:	200006f9 	.word	0x200006f9

08008f14 <__sfp_lock_release>:
 8008f14:	4801      	ldr	r0, [pc, #4]	; (8008f1c <__sfp_lock_release+0x8>)
 8008f16:	f000 b8ae 	b.w	8009076 <__retarget_lock_release_recursive>
 8008f1a:	bf00      	nop
 8008f1c:	200006f9 	.word	0x200006f9

08008f20 <__sinit_lock_acquire>:
 8008f20:	4801      	ldr	r0, [pc, #4]	; (8008f28 <__sinit_lock_acquire+0x8>)
 8008f22:	f000 b8a7 	b.w	8009074 <__retarget_lock_acquire_recursive>
 8008f26:	bf00      	nop
 8008f28:	200006fa 	.word	0x200006fa

08008f2c <__sinit_lock_release>:
 8008f2c:	4801      	ldr	r0, [pc, #4]	; (8008f34 <__sinit_lock_release+0x8>)
 8008f2e:	f000 b8a2 	b.w	8009076 <__retarget_lock_release_recursive>
 8008f32:	bf00      	nop
 8008f34:	200006fa 	.word	0x200006fa

08008f38 <__sinit>:
 8008f38:	b510      	push	{r4, lr}
 8008f3a:	4604      	mov	r4, r0
 8008f3c:	f7ff fff0 	bl	8008f20 <__sinit_lock_acquire>
 8008f40:	69a3      	ldr	r3, [r4, #24]
 8008f42:	b11b      	cbz	r3, 8008f4c <__sinit+0x14>
 8008f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f48:	f7ff bff0 	b.w	8008f2c <__sinit_lock_release>
 8008f4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008f50:	6523      	str	r3, [r4, #80]	; 0x50
 8008f52:	4b13      	ldr	r3, [pc, #76]	; (8008fa0 <__sinit+0x68>)
 8008f54:	4a13      	ldr	r2, [pc, #76]	; (8008fa4 <__sinit+0x6c>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	62a2      	str	r2, [r4, #40]	; 0x28
 8008f5a:	42a3      	cmp	r3, r4
 8008f5c:	bf08      	it	eq
 8008f5e:	2301      	moveq	r3, #1
 8008f60:	4620      	mov	r0, r4
 8008f62:	bf08      	it	eq
 8008f64:	61a3      	streq	r3, [r4, #24]
 8008f66:	f000 f81f 	bl	8008fa8 <__sfp>
 8008f6a:	6060      	str	r0, [r4, #4]
 8008f6c:	4620      	mov	r0, r4
 8008f6e:	f000 f81b 	bl	8008fa8 <__sfp>
 8008f72:	60a0      	str	r0, [r4, #8]
 8008f74:	4620      	mov	r0, r4
 8008f76:	f000 f817 	bl	8008fa8 <__sfp>
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	2104      	movs	r1, #4
 8008f7e:	60e0      	str	r0, [r4, #12]
 8008f80:	6860      	ldr	r0, [r4, #4]
 8008f82:	f7ff ff81 	bl	8008e88 <std>
 8008f86:	2201      	movs	r2, #1
 8008f88:	2109      	movs	r1, #9
 8008f8a:	68a0      	ldr	r0, [r4, #8]
 8008f8c:	f7ff ff7c 	bl	8008e88 <std>
 8008f90:	2202      	movs	r2, #2
 8008f92:	2112      	movs	r1, #18
 8008f94:	68e0      	ldr	r0, [r4, #12]
 8008f96:	f7ff ff77 	bl	8008e88 <std>
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	61a3      	str	r3, [r4, #24]
 8008f9e:	e7d1      	b.n	8008f44 <__sinit+0xc>
 8008fa0:	08009b10 	.word	0x08009b10
 8008fa4:	08008ed1 	.word	0x08008ed1

08008fa8 <__sfp>:
 8008fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008faa:	4607      	mov	r7, r0
 8008fac:	f7ff ffac 	bl	8008f08 <__sfp_lock_acquire>
 8008fb0:	4b1e      	ldr	r3, [pc, #120]	; (800902c <__sfp+0x84>)
 8008fb2:	681e      	ldr	r6, [r3, #0]
 8008fb4:	69b3      	ldr	r3, [r6, #24]
 8008fb6:	b913      	cbnz	r3, 8008fbe <__sfp+0x16>
 8008fb8:	4630      	mov	r0, r6
 8008fba:	f7ff ffbd 	bl	8008f38 <__sinit>
 8008fbe:	3648      	adds	r6, #72	; 0x48
 8008fc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008fc4:	3b01      	subs	r3, #1
 8008fc6:	d503      	bpl.n	8008fd0 <__sfp+0x28>
 8008fc8:	6833      	ldr	r3, [r6, #0]
 8008fca:	b30b      	cbz	r3, 8009010 <__sfp+0x68>
 8008fcc:	6836      	ldr	r6, [r6, #0]
 8008fce:	e7f7      	b.n	8008fc0 <__sfp+0x18>
 8008fd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008fd4:	b9d5      	cbnz	r5, 800900c <__sfp+0x64>
 8008fd6:	4b16      	ldr	r3, [pc, #88]	; (8009030 <__sfp+0x88>)
 8008fd8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008fdc:	60e3      	str	r3, [r4, #12]
 8008fde:	6665      	str	r5, [r4, #100]	; 0x64
 8008fe0:	f000 f847 	bl	8009072 <__retarget_lock_init_recursive>
 8008fe4:	f7ff ff96 	bl	8008f14 <__sfp_lock_release>
 8008fe8:	2208      	movs	r2, #8
 8008fea:	4629      	mov	r1, r5
 8008fec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008ff0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008ff4:	6025      	str	r5, [r4, #0]
 8008ff6:	61a5      	str	r5, [r4, #24]
 8008ff8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008ffc:	f7fb fd62 	bl	8004ac4 <memset>
 8009000:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009004:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009008:	4620      	mov	r0, r4
 800900a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800900c:	3468      	adds	r4, #104	; 0x68
 800900e:	e7d9      	b.n	8008fc4 <__sfp+0x1c>
 8009010:	2104      	movs	r1, #4
 8009012:	4638      	mov	r0, r7
 8009014:	f7ff ff62 	bl	8008edc <__sfmoreglue>
 8009018:	4604      	mov	r4, r0
 800901a:	6030      	str	r0, [r6, #0]
 800901c:	2800      	cmp	r0, #0
 800901e:	d1d5      	bne.n	8008fcc <__sfp+0x24>
 8009020:	f7ff ff78 	bl	8008f14 <__sfp_lock_release>
 8009024:	230c      	movs	r3, #12
 8009026:	603b      	str	r3, [r7, #0]
 8009028:	e7ee      	b.n	8009008 <__sfp+0x60>
 800902a:	bf00      	nop
 800902c:	08009b10 	.word	0x08009b10
 8009030:	ffff0001 	.word	0xffff0001

08009034 <_fwalk_reent>:
 8009034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009038:	4606      	mov	r6, r0
 800903a:	4688      	mov	r8, r1
 800903c:	2700      	movs	r7, #0
 800903e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009042:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009046:	f1b9 0901 	subs.w	r9, r9, #1
 800904a:	d505      	bpl.n	8009058 <_fwalk_reent+0x24>
 800904c:	6824      	ldr	r4, [r4, #0]
 800904e:	2c00      	cmp	r4, #0
 8009050:	d1f7      	bne.n	8009042 <_fwalk_reent+0xe>
 8009052:	4638      	mov	r0, r7
 8009054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009058:	89ab      	ldrh	r3, [r5, #12]
 800905a:	2b01      	cmp	r3, #1
 800905c:	d907      	bls.n	800906e <_fwalk_reent+0x3a>
 800905e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009062:	3301      	adds	r3, #1
 8009064:	d003      	beq.n	800906e <_fwalk_reent+0x3a>
 8009066:	4629      	mov	r1, r5
 8009068:	4630      	mov	r0, r6
 800906a:	47c0      	blx	r8
 800906c:	4307      	orrs	r7, r0
 800906e:	3568      	adds	r5, #104	; 0x68
 8009070:	e7e9      	b.n	8009046 <_fwalk_reent+0x12>

08009072 <__retarget_lock_init_recursive>:
 8009072:	4770      	bx	lr

08009074 <__retarget_lock_acquire_recursive>:
 8009074:	4770      	bx	lr

08009076 <__retarget_lock_release_recursive>:
 8009076:	4770      	bx	lr

08009078 <__swhatbuf_r>:
 8009078:	b570      	push	{r4, r5, r6, lr}
 800907a:	460e      	mov	r6, r1
 800907c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009080:	4614      	mov	r4, r2
 8009082:	2900      	cmp	r1, #0
 8009084:	461d      	mov	r5, r3
 8009086:	b096      	sub	sp, #88	; 0x58
 8009088:	da08      	bge.n	800909c <__swhatbuf_r+0x24>
 800908a:	2200      	movs	r2, #0
 800908c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009090:	602a      	str	r2, [r5, #0]
 8009092:	061a      	lsls	r2, r3, #24
 8009094:	d410      	bmi.n	80090b8 <__swhatbuf_r+0x40>
 8009096:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800909a:	e00e      	b.n	80090ba <__swhatbuf_r+0x42>
 800909c:	466a      	mov	r2, sp
 800909e:	f000 f903 	bl	80092a8 <_fstat_r>
 80090a2:	2800      	cmp	r0, #0
 80090a4:	dbf1      	blt.n	800908a <__swhatbuf_r+0x12>
 80090a6:	9a01      	ldr	r2, [sp, #4]
 80090a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80090ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80090b0:	425a      	negs	r2, r3
 80090b2:	415a      	adcs	r2, r3
 80090b4:	602a      	str	r2, [r5, #0]
 80090b6:	e7ee      	b.n	8009096 <__swhatbuf_r+0x1e>
 80090b8:	2340      	movs	r3, #64	; 0x40
 80090ba:	2000      	movs	r0, #0
 80090bc:	6023      	str	r3, [r4, #0]
 80090be:	b016      	add	sp, #88	; 0x58
 80090c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080090c4 <__smakebuf_r>:
 80090c4:	898b      	ldrh	r3, [r1, #12]
 80090c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80090c8:	079d      	lsls	r5, r3, #30
 80090ca:	4606      	mov	r6, r0
 80090cc:	460c      	mov	r4, r1
 80090ce:	d507      	bpl.n	80090e0 <__smakebuf_r+0x1c>
 80090d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80090d4:	6023      	str	r3, [r4, #0]
 80090d6:	6123      	str	r3, [r4, #16]
 80090d8:	2301      	movs	r3, #1
 80090da:	6163      	str	r3, [r4, #20]
 80090dc:	b002      	add	sp, #8
 80090de:	bd70      	pop	{r4, r5, r6, pc}
 80090e0:	466a      	mov	r2, sp
 80090e2:	ab01      	add	r3, sp, #4
 80090e4:	f7ff ffc8 	bl	8009078 <__swhatbuf_r>
 80090e8:	9900      	ldr	r1, [sp, #0]
 80090ea:	4605      	mov	r5, r0
 80090ec:	4630      	mov	r0, r6
 80090ee:	f7ff f961 	bl	80083b4 <_malloc_r>
 80090f2:	b948      	cbnz	r0, 8009108 <__smakebuf_r+0x44>
 80090f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090f8:	059a      	lsls	r2, r3, #22
 80090fa:	d4ef      	bmi.n	80090dc <__smakebuf_r+0x18>
 80090fc:	f023 0303 	bic.w	r3, r3, #3
 8009100:	f043 0302 	orr.w	r3, r3, #2
 8009104:	81a3      	strh	r3, [r4, #12]
 8009106:	e7e3      	b.n	80090d0 <__smakebuf_r+0xc>
 8009108:	4b0d      	ldr	r3, [pc, #52]	; (8009140 <__smakebuf_r+0x7c>)
 800910a:	62b3      	str	r3, [r6, #40]	; 0x28
 800910c:	89a3      	ldrh	r3, [r4, #12]
 800910e:	6020      	str	r0, [r4, #0]
 8009110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009114:	81a3      	strh	r3, [r4, #12]
 8009116:	9b00      	ldr	r3, [sp, #0]
 8009118:	6120      	str	r0, [r4, #16]
 800911a:	6163      	str	r3, [r4, #20]
 800911c:	9b01      	ldr	r3, [sp, #4]
 800911e:	b15b      	cbz	r3, 8009138 <__smakebuf_r+0x74>
 8009120:	4630      	mov	r0, r6
 8009122:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009126:	f000 f8d1 	bl	80092cc <_isatty_r>
 800912a:	b128      	cbz	r0, 8009138 <__smakebuf_r+0x74>
 800912c:	89a3      	ldrh	r3, [r4, #12]
 800912e:	f023 0303 	bic.w	r3, r3, #3
 8009132:	f043 0301 	orr.w	r3, r3, #1
 8009136:	81a3      	strh	r3, [r4, #12]
 8009138:	89a0      	ldrh	r0, [r4, #12]
 800913a:	4305      	orrs	r5, r0
 800913c:	81a5      	strh	r5, [r4, #12]
 800913e:	e7cd      	b.n	80090dc <__smakebuf_r+0x18>
 8009140:	08008ed1 	.word	0x08008ed1

08009144 <_malloc_usable_size_r>:
 8009144:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009148:	1f18      	subs	r0, r3, #4
 800914a:	2b00      	cmp	r3, #0
 800914c:	bfbc      	itt	lt
 800914e:	580b      	ldrlt	r3, [r1, r0]
 8009150:	18c0      	addlt	r0, r0, r3
 8009152:	4770      	bx	lr

08009154 <_raise_r>:
 8009154:	291f      	cmp	r1, #31
 8009156:	b538      	push	{r3, r4, r5, lr}
 8009158:	4604      	mov	r4, r0
 800915a:	460d      	mov	r5, r1
 800915c:	d904      	bls.n	8009168 <_raise_r+0x14>
 800915e:	2316      	movs	r3, #22
 8009160:	6003      	str	r3, [r0, #0]
 8009162:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009166:	bd38      	pop	{r3, r4, r5, pc}
 8009168:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800916a:	b112      	cbz	r2, 8009172 <_raise_r+0x1e>
 800916c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009170:	b94b      	cbnz	r3, 8009186 <_raise_r+0x32>
 8009172:	4620      	mov	r0, r4
 8009174:	f000 f830 	bl	80091d8 <_getpid_r>
 8009178:	462a      	mov	r2, r5
 800917a:	4601      	mov	r1, r0
 800917c:	4620      	mov	r0, r4
 800917e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009182:	f000 b817 	b.w	80091b4 <_kill_r>
 8009186:	2b01      	cmp	r3, #1
 8009188:	d00a      	beq.n	80091a0 <_raise_r+0x4c>
 800918a:	1c59      	adds	r1, r3, #1
 800918c:	d103      	bne.n	8009196 <_raise_r+0x42>
 800918e:	2316      	movs	r3, #22
 8009190:	6003      	str	r3, [r0, #0]
 8009192:	2001      	movs	r0, #1
 8009194:	e7e7      	b.n	8009166 <_raise_r+0x12>
 8009196:	2400      	movs	r4, #0
 8009198:	4628      	mov	r0, r5
 800919a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800919e:	4798      	blx	r3
 80091a0:	2000      	movs	r0, #0
 80091a2:	e7e0      	b.n	8009166 <_raise_r+0x12>

080091a4 <raise>:
 80091a4:	4b02      	ldr	r3, [pc, #8]	; (80091b0 <raise+0xc>)
 80091a6:	4601      	mov	r1, r0
 80091a8:	6818      	ldr	r0, [r3, #0]
 80091aa:	f7ff bfd3 	b.w	8009154 <_raise_r>
 80091ae:	bf00      	nop
 80091b0:	20000018 	.word	0x20000018

080091b4 <_kill_r>:
 80091b4:	b538      	push	{r3, r4, r5, lr}
 80091b6:	2300      	movs	r3, #0
 80091b8:	4d06      	ldr	r5, [pc, #24]	; (80091d4 <_kill_r+0x20>)
 80091ba:	4604      	mov	r4, r0
 80091bc:	4608      	mov	r0, r1
 80091be:	4611      	mov	r1, r2
 80091c0:	602b      	str	r3, [r5, #0]
 80091c2:	f7f8 ff2a 	bl	800201a <_kill>
 80091c6:	1c43      	adds	r3, r0, #1
 80091c8:	d102      	bne.n	80091d0 <_kill_r+0x1c>
 80091ca:	682b      	ldr	r3, [r5, #0]
 80091cc:	b103      	cbz	r3, 80091d0 <_kill_r+0x1c>
 80091ce:	6023      	str	r3, [r4, #0]
 80091d0:	bd38      	pop	{r3, r4, r5, pc}
 80091d2:	bf00      	nop
 80091d4:	200006f4 	.word	0x200006f4

080091d8 <_getpid_r>:
 80091d8:	f7f8 bf18 	b.w	800200c <_getpid>

080091dc <__sread>:
 80091dc:	b510      	push	{r4, lr}
 80091de:	460c      	mov	r4, r1
 80091e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091e4:	f000 f894 	bl	8009310 <_read_r>
 80091e8:	2800      	cmp	r0, #0
 80091ea:	bfab      	itete	ge
 80091ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80091ee:	89a3      	ldrhlt	r3, [r4, #12]
 80091f0:	181b      	addge	r3, r3, r0
 80091f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80091f6:	bfac      	ite	ge
 80091f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80091fa:	81a3      	strhlt	r3, [r4, #12]
 80091fc:	bd10      	pop	{r4, pc}

080091fe <__swrite>:
 80091fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009202:	461f      	mov	r7, r3
 8009204:	898b      	ldrh	r3, [r1, #12]
 8009206:	4605      	mov	r5, r0
 8009208:	05db      	lsls	r3, r3, #23
 800920a:	460c      	mov	r4, r1
 800920c:	4616      	mov	r6, r2
 800920e:	d505      	bpl.n	800921c <__swrite+0x1e>
 8009210:	2302      	movs	r3, #2
 8009212:	2200      	movs	r2, #0
 8009214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009218:	f000 f868 	bl	80092ec <_lseek_r>
 800921c:	89a3      	ldrh	r3, [r4, #12]
 800921e:	4632      	mov	r2, r6
 8009220:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009224:	81a3      	strh	r3, [r4, #12]
 8009226:	4628      	mov	r0, r5
 8009228:	463b      	mov	r3, r7
 800922a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800922e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009232:	f000 b817 	b.w	8009264 <_write_r>

08009236 <__sseek>:
 8009236:	b510      	push	{r4, lr}
 8009238:	460c      	mov	r4, r1
 800923a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800923e:	f000 f855 	bl	80092ec <_lseek_r>
 8009242:	1c43      	adds	r3, r0, #1
 8009244:	89a3      	ldrh	r3, [r4, #12]
 8009246:	bf15      	itete	ne
 8009248:	6560      	strne	r0, [r4, #84]	; 0x54
 800924a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800924e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009252:	81a3      	strheq	r3, [r4, #12]
 8009254:	bf18      	it	ne
 8009256:	81a3      	strhne	r3, [r4, #12]
 8009258:	bd10      	pop	{r4, pc}

0800925a <__sclose>:
 800925a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800925e:	f000 b813 	b.w	8009288 <_close_r>
	...

08009264 <_write_r>:
 8009264:	b538      	push	{r3, r4, r5, lr}
 8009266:	4604      	mov	r4, r0
 8009268:	4608      	mov	r0, r1
 800926a:	4611      	mov	r1, r2
 800926c:	2200      	movs	r2, #0
 800926e:	4d05      	ldr	r5, [pc, #20]	; (8009284 <_write_r+0x20>)
 8009270:	602a      	str	r2, [r5, #0]
 8009272:	461a      	mov	r2, r3
 8009274:	f7f8 ff08 	bl	8002088 <_write>
 8009278:	1c43      	adds	r3, r0, #1
 800927a:	d102      	bne.n	8009282 <_write_r+0x1e>
 800927c:	682b      	ldr	r3, [r5, #0]
 800927e:	b103      	cbz	r3, 8009282 <_write_r+0x1e>
 8009280:	6023      	str	r3, [r4, #0]
 8009282:	bd38      	pop	{r3, r4, r5, pc}
 8009284:	200006f4 	.word	0x200006f4

08009288 <_close_r>:
 8009288:	b538      	push	{r3, r4, r5, lr}
 800928a:	2300      	movs	r3, #0
 800928c:	4d05      	ldr	r5, [pc, #20]	; (80092a4 <_close_r+0x1c>)
 800928e:	4604      	mov	r4, r0
 8009290:	4608      	mov	r0, r1
 8009292:	602b      	str	r3, [r5, #0]
 8009294:	f7f8 ff14 	bl	80020c0 <_close>
 8009298:	1c43      	adds	r3, r0, #1
 800929a:	d102      	bne.n	80092a2 <_close_r+0x1a>
 800929c:	682b      	ldr	r3, [r5, #0]
 800929e:	b103      	cbz	r3, 80092a2 <_close_r+0x1a>
 80092a0:	6023      	str	r3, [r4, #0]
 80092a2:	bd38      	pop	{r3, r4, r5, pc}
 80092a4:	200006f4 	.word	0x200006f4

080092a8 <_fstat_r>:
 80092a8:	b538      	push	{r3, r4, r5, lr}
 80092aa:	2300      	movs	r3, #0
 80092ac:	4d06      	ldr	r5, [pc, #24]	; (80092c8 <_fstat_r+0x20>)
 80092ae:	4604      	mov	r4, r0
 80092b0:	4608      	mov	r0, r1
 80092b2:	4611      	mov	r1, r2
 80092b4:	602b      	str	r3, [r5, #0]
 80092b6:	f7f8 ff0e 	bl	80020d6 <_fstat>
 80092ba:	1c43      	adds	r3, r0, #1
 80092bc:	d102      	bne.n	80092c4 <_fstat_r+0x1c>
 80092be:	682b      	ldr	r3, [r5, #0]
 80092c0:	b103      	cbz	r3, 80092c4 <_fstat_r+0x1c>
 80092c2:	6023      	str	r3, [r4, #0]
 80092c4:	bd38      	pop	{r3, r4, r5, pc}
 80092c6:	bf00      	nop
 80092c8:	200006f4 	.word	0x200006f4

080092cc <_isatty_r>:
 80092cc:	b538      	push	{r3, r4, r5, lr}
 80092ce:	2300      	movs	r3, #0
 80092d0:	4d05      	ldr	r5, [pc, #20]	; (80092e8 <_isatty_r+0x1c>)
 80092d2:	4604      	mov	r4, r0
 80092d4:	4608      	mov	r0, r1
 80092d6:	602b      	str	r3, [r5, #0]
 80092d8:	f7f8 ff0c 	bl	80020f4 <_isatty>
 80092dc:	1c43      	adds	r3, r0, #1
 80092de:	d102      	bne.n	80092e6 <_isatty_r+0x1a>
 80092e0:	682b      	ldr	r3, [r5, #0]
 80092e2:	b103      	cbz	r3, 80092e6 <_isatty_r+0x1a>
 80092e4:	6023      	str	r3, [r4, #0]
 80092e6:	bd38      	pop	{r3, r4, r5, pc}
 80092e8:	200006f4 	.word	0x200006f4

080092ec <_lseek_r>:
 80092ec:	b538      	push	{r3, r4, r5, lr}
 80092ee:	4604      	mov	r4, r0
 80092f0:	4608      	mov	r0, r1
 80092f2:	4611      	mov	r1, r2
 80092f4:	2200      	movs	r2, #0
 80092f6:	4d05      	ldr	r5, [pc, #20]	; (800930c <_lseek_r+0x20>)
 80092f8:	602a      	str	r2, [r5, #0]
 80092fa:	461a      	mov	r2, r3
 80092fc:	f7f8 ff04 	bl	8002108 <_lseek>
 8009300:	1c43      	adds	r3, r0, #1
 8009302:	d102      	bne.n	800930a <_lseek_r+0x1e>
 8009304:	682b      	ldr	r3, [r5, #0]
 8009306:	b103      	cbz	r3, 800930a <_lseek_r+0x1e>
 8009308:	6023      	str	r3, [r4, #0]
 800930a:	bd38      	pop	{r3, r4, r5, pc}
 800930c:	200006f4 	.word	0x200006f4

08009310 <_read_r>:
 8009310:	b538      	push	{r3, r4, r5, lr}
 8009312:	4604      	mov	r4, r0
 8009314:	4608      	mov	r0, r1
 8009316:	4611      	mov	r1, r2
 8009318:	2200      	movs	r2, #0
 800931a:	4d05      	ldr	r5, [pc, #20]	; (8009330 <_read_r+0x20>)
 800931c:	602a      	str	r2, [r5, #0]
 800931e:	461a      	mov	r2, r3
 8009320:	f7f8 fe95 	bl	800204e <_read>
 8009324:	1c43      	adds	r3, r0, #1
 8009326:	d102      	bne.n	800932e <_read_r+0x1e>
 8009328:	682b      	ldr	r3, [r5, #0]
 800932a:	b103      	cbz	r3, 800932e <_read_r+0x1e>
 800932c:	6023      	str	r3, [r4, #0]
 800932e:	bd38      	pop	{r3, r4, r5, pc}
 8009330:	200006f4 	.word	0x200006f4

08009334 <_init>:
 8009334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009336:	bf00      	nop
 8009338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800933a:	bc08      	pop	{r3}
 800933c:	469e      	mov	lr, r3
 800933e:	4770      	bx	lr

08009340 <_fini>:
 8009340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009342:	bf00      	nop
 8009344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009346:	bc08      	pop	{r3}
 8009348:	469e      	mov	lr, r3
 800934a:	4770      	bx	lr
